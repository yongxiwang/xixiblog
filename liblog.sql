/*
Navicat MySQL Data Transfer

Date: 2017-03-15 11:20:29
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for li_article
-- ----------------------------
DROP TABLE IF EXISTS `li_article`;
CREATE TABLE `li_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `abstract` text,
  `content` text NOT NULL,
  `picurl` varchar(255) DEFAULT NULL,
  `author` varchar(255) DEFAULT NULL,
  `createtime` datetime DEFAULT NULL,
  `view` bigint(20) DEFAULT '1',
  `totop` smallint(6) DEFAULT '0',
  `torecom` smallint(6) DEFAULT '0',
  `topicrecom` smallint(6) DEFAULT '0',
  `tag` int(11) DEFAULT NULL,
  `keywords` varchar(255) DEFAULT NULL,
  `allowcomment` int(11) DEFAULT '1',
  `ispublished` int(11) DEFAULT '0',
  `from` varchar(255) DEFAULT NULL,
  `item` int(11) DEFAULT NULL,
  `like` int(11) DEFAULT '0' COMMENT '喜欢',
  `flag_a` smallint(255) DEFAULT '0',
  `flag_b` smallint(255) DEFAULT '0',
  `flag_c` smallint(255) DEFAULT '0',
  `flag_d` smallint(255) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=70 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_article
-- ----------------------------
INSERT INTO `li_article` VALUES ('1', 'javascript之单例模式', '单例模式即保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式也称作为单子模式，更多的也叫做单体模式。为软件设计中较为简单但是最为常用的一种设计模式。', '<h3 id=\"-\">单例模式的定义</h3>\n<p>单例模式即保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式也称作为单子模式，更多的也叫做单体模式。为软件设计中较为简单但是最为常用的一种设计模式。</p>\n<blockquote>\n<p>单例模式的思路是：一个类能返回一个对象的引用（并且永远是同一个）和一个获得该实例的方法（静态方法，通常使用 getInstance 名称）。那么当我们调用这个方法时，如果类持有的引用不为空就返回该引用，否者就创建该类的实例，并且将实例引用赋值给该类保持的那个引用再返回。同时将该类的构造函数定义为私有方法，避免其他函数使用该构造函数来实例化对象，只通过该类的静态方法来得到该类的唯一实例。</p>\n<h3 id=\"-\">实现单例模式</h3>\n<p>用一个变量标记当前是否已经为某个类创建过对象，如果是，则在下一次获取类的实例时，直接返回之前创建的对象。</p></blockquote><br><pre><code>```js<br>var Singleton = function (name) {<br>    this.name = name;<br>    this.instance = null; //标记是否已经实例化<br>};<p></p>\n\n<p>Singleton.prototype.getName = function () {<br>    console.log(this.name);<br>};</p>\n<p>Singleton.getInstance = function (name) {<br>    if (!this.instance) {<br>        //没有实例，实例化一下<br>        this.instance = new Singleton(name);<br>    }<br>    return this.instance; //返回实例<br>}</p>\n<p>var a = Singleton.getInstance(\'sven1\');<br>var b = Singleton.getInstance(\'sven2\');</p>\n<p>alert(a === b); //true</p></code></pre>\n<pre><code>或者：\n```js\nvar Singleton = function (name) {\n    this.name = name;\n};\n\nSingleton.prototype.getName = function () {\n    console.log(this.name);\n};\n\nSingleton.getInstance = (function () {\n    var instance = null; //标记是否已经实例化\n    return function (name) {\n        if (!instance) {\n            instance = new Singleton(name);\n        }\n        return instance;\n    }\n}());\n\nvar a = Singleton.getInstance(\'sven1\');\nvar b = Singleton.getInstance(\'sven2\');\n\nalert(a === b); //true\n</code></pre><p>这两种方法相对简单，但是有一个问题，增加了这个类的不透明性，Singleton类的使用者必须知道这个单例类。</p>\n<h3 id=\"-\">透明的单例模式</h3>\n<pre><code class=\"lang-js\">var createDiv = (function () {\n    var instance;\n\n    var CreateDiv = function (html) {\n\n        if (instance) {\n            return instance;\n        }\n\n        this.html = html;\n        this.init();\n\n        return instance = this;\n    };\n\n    CreateDiv.prototype.init = function () {\n        var div = document.createElement(\'div\');\n        div.innerHTML = this.html;\n        document.body.appendChild(div);\n    };\n\n    return CreateDiv;\n}());\n\nvar a = new createDiv(\'hello\');\nvar b = new createDiv(\'kit\');\n</code></pre>\n<p>虽然这样子完成了一个透明的单例类，但它同样有一些缺点。<br>1.程序复杂，使用自执行的匿名函数和闭包，让这个匿名函数返回真正的单例类。<br>2.实例单例的构造函数，负责了两件事：第一保证只有一个实例，创建对象和执行init()方法。    </p>\n<h3 id=\"-\">用代理实现单例模式</h3>\n<pre><code class=\"lang-js\">//首先是一个普通的创建div的类\nvar CreateDiv = function (html) {\n    this.html = html;\n    this.init();\n};\n\nCreateDiv.prototype.init = function () {\n    var div = document.createElement(\'div\');\n    div.innerHTML = this.html;\n    document.body.appendChild(div);\n};\n\n//负责管理单例的逻辑移到这个代理类\nvar proxySingletonCreateDiv = (function () {\n    var instance;\n    return function (html) {\n        if (!instance) {\n            instance = new CreateDiv(html);\n        }\n        return instance;\n    };\n}());\n\nproxySingletonCreateDiv(\'aaa\');\nproxySingletonCreateDiv(\'bbb\');\nproxySingletonCreateDiv(\'ccc\');\n</code></pre>\n<h3 id=\"javascript-\">javascript里的单例模式</h3>\n<p>全局变量不是单例模式，但是我们要经常会把全局变量当成单例模式，比如：</p>\n<pre><code class=\"lang-js\">var a = {};\n\n//浏览器自带了一个单例对象。\nwindow;\n</code></pre>\n<p>单例模式的核心是只有一个实例，并提供全局访问，但是全局变量会造成命名空间污染。</p>\n<h3 id=\"-\">惰性单例</h3>\n<p>惰性单例是指在需要的时候才创建对象实例。<br>这种技术在实际开发中很有作用，比如制作一个悬浮的登录框。   </p>\n<p>事先页面只有登录按钮，用于触发事件。</p>\n<pre><code class=\"lang-html\">&lt;body&gt;\n    &lt;button id=\"loginBtn\"&gt;登录&lt;/button&gt;\n&lt;/body&gt;\n</code></pre>\n<p>js部分：</p>\n<pre><code class=\"lang-js\">//负责实现单例\nvar getSingle = function (fn) {\n    var result;\n    return function () {\n        return result || (result = fn.apply(this, arguments));\n    }\n};\n\n//负责创建登录框\nvar createLoginlayer = function () {\n    var div = document.createElement(\'div\');\n    div.innerHTML = \'我是一个登录框\';\n    document.body.appendChild(div);\n    return div;\n};\n\n//生成一个单例对象\nvar createSingleLoginYayer = getSingle(createLoginlayer);\n\n//当有需要的时候创建对象，并具只创建一次\ndocument.getElementById(\'loginBtn\').onclick = function () {\n    createSingleLoginYayer();\n};\n</code></pre>\n<h3 id=\"jquery-one\">jQuery one</h3>\n<pre><code class=\"lang-html\">&lt;button id=\"btn1\"&gt;按钮一&lt;/button&gt;\n&lt;button id=\"btn2\"&gt;按钮二&lt;/button&gt;\n&lt;script src=\"http://cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"007.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>007.js如下：</p>\n<pre><code class=\"lang-js\">var console1 = function () {\n    console.log(1);\n};\n\nvar console2 = function () {\n    console.log(2);\n};\n\nvar btn1 = $(\'#btn1\');\nvar btn2 = $(\'#btn2\');\n\n//每次一次，执行一次\nbtn1.on(\'click\', console1);\n\n//只执行一次\nbtn2.one(\'click\', console2);\n</code></pre>\n<h3 id=\"_-once\">_.once</h3>\n<p>underscorejs也有实现单例的方法，我们拿之前的例子改一下。</p>\n<pre><code class=\"lang-html\">&lt;button id=\"loginBtn\"&gt;登录按钮&lt;/button&gt;\n&lt;script src=\"http://cdn.bootcss.com/underscore.js/1.8.2/underscore-min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"008.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n<p>008.js如下：</p>\n<pre><code class=\"lang-js\">//负责创建登录框\nvar createLoginlayer = function () {\n    var div = document.createElement(\'div\');\n    div.innerHTML = \'我是一个登录框\';\n    document.body.appendChild(div);\n    return div;\n};\n\n//生成一个单例对象\nvar createSingleLoginYayer = _.once(createLoginlayer);\n\n//当有需要的时候创建对象，并具只创建一次\ndocument.getElementById(\'loginBtn\').onclick = function () {\n    createSingleLoginYayer();\n};\n</code></pre>', '', 'guosheng', '2017-05-16 10:20:31', '175', '0', '1', '0', '7', 'javascript,单例模式，设计模式', '1', '1', '网络', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('2', 'javascript常见数组操作整理', '数组常见操作包含了 增、删、查、改、插入、交集、并集', '<p>数组常见操作包含了 增、删、查、改、插入、交集、并集，现整理如下：</p>\n<p>1、数组整体元素修改</p>\n<pre><code class=\"lang-javascript\">        //map,给数组每个元素加1 输出[1,2,3]\n        $.map([0,1,2],function(n){\n            return n+1;\n        })\n</code></pre>\n<p>2、 数组筛选</p>\n<pre><code class=\"lang-javascript\">        $.map([0,1,2],function(n){\n            return n&gt;0?n+1:null\n        })\n        //[2,3]\n</code></pre>\n<p>3、jquery 元素转数组</p>\n<pre><code class=\"lang-javascript\">        $(\"li\").toArray()\n        $.makeArray($(\"li\"))\n</code></pre>\n<p>4、获取两个数组中相同部分或者不同部分</p>\n<pre><code class=\"lang-javascript\">        //去掉true则显示相同部分，保留true则显示不同部分\n        var a=[1,2,3,5,6,3,7,12],\n             b=[1,3,5,12]\n\n        $.grep(a,function(n,i){\n             if(b.indexOf(n)&gt;=0)\n                 return n\n        },true);\n        //[2, 6, 7]\n</code></pre>\n<p>5、数组去重并倒序排序</p>\n<pre><code class=\"lang-javascript\">        var a=[1,2,3,5,6,3,7,12];\n        $.unique(a)\n        //[12, 7, 6, 5, 3, 2, 1]\n</code></pre>\n<p>6、数组排序</p>\n<pre><code class=\"lang-javascript\">        var arr=[1,34,5,8,4,9,12]\n        arr.sort(function(a,b){\n            return a-b;\n        });\n        //顺序：a-b   [1, 4, 5, 8, 9, 12, 34]\n        //倒序：b-a   [34, 12, 9, 8, 5, 4, 1]\n</code></pre>\n<p>7、数组截取slice</p>\n<pre><code class=\"lang-javascript\">        var arr=[1,34,5,8,4,9,12];\n            arr.slice(2,4) // [5, 8]\n        //arr  输出 [1, 34, 5, 8, 4, 9, 12]\n</code></pre>\n<p>8、数组插入、删除splice(需明确位置)</p>\n<pre><code class=\"lang-javascript\">        var arr=[1,34,5,8,4,9,12];\n        //删除\n             arr.splice(2,4)\n            //arr  输出[1, 34, 12]\n        //替换\n            arr.splice(1,2,3,4)\n            //arr  输出[1, 3, 4, 8, 4, 9, 12]\n        //插入\n            arr.splice(2,0,44)\n        //arr  输出[1, 34, 44, 5, 8, 4, 9, 12]\n</code></pre>\n<p>9、数组遍历</p>\n<pre><code class=\"lang-javascript\">        var members=[\"1\",\"2\",\"3\"];\n        $.each(members,function(i,item){\n            console.log(item);\n        });\n        //如何跳出当前的each循环\n        //return false;——跳出所有循环；相当于 javascript 中的 break 效果。\n        //return true;——跳出当前循环，进入下一个循环；相当于 javascript 中的 continue 效果。\n</code></pre>\n<p>10、jQuery根据元素值删除数组元素的方法</p>\n<pre><code class=\"lang-javascript\">        var arr = [\'a\',\'b\',\'c\',\'d\'];\n        arr.splice($.inArray(\'c\',arr),1);\n        console.log(arr);\n        //[\"a\", \"b\", \"d\"]\n</code></pre>\n<p>11、常见的数组操作</p>\n<pre><code class=\"lang-javascript\">        push、pop、shift、unshift、concat\n</code></pre>\n<p>12、数组操作兼容性</p>\n<pre><code class=\"lang-javascript\">        IE8下\n        $.inArray 代替 indexOf\n\n        $.grep代替Array.prototype.filter\n</code></pre>\n<p>13、常见数组操作案例：</p>\n<p>1、jquery实现从数组移除指定的值</p>\n<pre><code class=\"lang-javascript\">        function delItem(arr,m)\n        {\n                return $.grep(arr,function(n,i){\n                    return n!=m\n                });\n        }\n        var a=[1,2,3,5,6,3,7,12];\n            delItem(a,3)\n</code></pre>\n<p>或者</p>\n<pre><code class=\"lang-javascript\">        function delItem(arr,m)\n            {\n                arr.splice($.inArray(m,arr),1);\n                return arr\n            }\n        var arr = [\'a\',\'b\',\'c\',\'d\'];\n            delItem(arr,\"c\")\n</code></pre>\n<p>2、jquery实现从数组移除指定的数组</p>\n<pre><code class=\"lang-javascript\">        function delArray(arr,delArr)\n        {\n                return $.grep(arr,function(n,i){\n                    if( delArr.indexOf(n)&gt;=0)\n                    return n\n                },true);\n        }\n        var a=[1,2,3,5,6,3,7,12],\n            b=[5,7];\n            delArray(a,b)\n</code></pre>\n<p>3、jquery找出2个数组同有的部分</p>\n<pre><code class=\"lang-javascript\">        function findCommonArray(arr,delArr)\n        {\n                return $.grep(arr,function(n,i){\n                    if( delArr.indexOf(n)&gt;=0)\n                        return n\n                });\n        }\n        var a=[1,2,3,5,6,3,7,12],\n            b=[5,7,9];\n            findCommonArray(a,b)\n</code></pre><p><br></p>', 'static/upload/pics/5/17/2016YuKqGjR0liiRzXoofEQPpjld.jpg', '阿华田', '2017-05-17 10:58:44', '332', '1', '1', '1', '7', 'js,jquery', '1', '1', '', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('3', '怎样快速学会一门技术', '前几天fork了Ruby China的源码，面对陌生的Ruby技术栈，一头雾水。我fork它并不单为了学习，而是要在最短的时间搭建起我脑海中的社区网站。所以我不可能针对每一门新技术都去买一本书来读上半个月', '<p>前几天fork了Ruby China的源码，面对陌生的Ruby技术栈，一头雾水。我fork它并不单为了学习，而是要在最短的时间搭建起我脑海中的社区网站。所以我不可能针对每一门新技术都去买一本书来读上半个月。</p><p>我在本机运行起Ruby China，新注册一个用户，发现不能发帖，提示说要注册一个月以上才可以。于是我去找相关代码：</p><p> </p><p># 是否能发帖 </p><p>def newbie? </p><p>return false if self.verified == true </p><p>self.created_at &gt; 1.week.ago end</p><p> </p><p>明明是一星期嘛，代码是不会说谎的。于是把文字改掉，顺便提个pull request。扯远了，代码说如果是self.verified就不是新手了，我先去管理后台看了一下，没有修改这个字段的界面。于是我不得不去数据库里更新这个字段。我大概知道mongodb是数据库，但我不知道该怎么操作。</p><p> </p><p>从宏观出发</p><p> </p><p>当我了解到一个新的技术名词，不会直接陷入细节，而是从宏观上把握它。了解它的背景，为何出现，解决什么问题，有什么同类技术，没有它之前我们如何工作。因为有了宏观的了解，我就能很容易把它和我熟悉的技术去建立关联，从而更快地理解它。</p><p></p><p>实践出真知</p><p> </p><p>打开官网，发现有个非常棒的Try it out，先花10分钟玩一下，对其玩法有个大概了解，然后再来解决实际的问题。</p><p>从前面的Try it out中我知道了help命令，于是便通过help知道了show dbs，use ruby_china_dev。根据使用SQL的经验，我想当然地认为更新一条记录的一个字段应该是这样：</p><p>db.users.update({\"_id\":3}, {verified: true})</p><p> </p><p>但我悲剧地发现，整条记录被替换了，好吧，这就是文档型数据库。于是放狗搜索：</p><p> </p><p>How to update specific field in mongodb</p><p> </p><p>很快便找到了答案。</p><p> </p><p>db.myCollection.update({condField: \'condValue\'}, { $set: { dateField: new Date(2011, 0, 1)}}, false, true);</p><p> </p><p>对应我这里的需求就是：</p><p> </p><p>db.users.update({_id:3}, {$set:{verified:true}}, false, true)</p><p> </p><p>问题解决了。</p><p>随着接触的越来越深，遇到的问题就会越来越多。我会把每一个解决掉的问题放到我的Evernote里，这样下次再遇到就能很快找到答案。当我发现postach.io这个可以和Evernote同步的博客系统后，就开通了这样一个博客，其他人遇到同样的问题时也更容易找到答案了。当我真正对一门技术感兴趣并且有足够的时间去学习时，我通常会按照下面的步骤去学习。</p><p>教是最好的学</p><p> </p><p>实践足够多后时，我可能觉得已经掌握这门技术了。但当我尝试去表达的时候，会惊讶地发现还有很多概念是似懂非懂的。于是我会去查资料，完善自己的体系。只有当我把学到的东西用自己的语言表达出来，并且能让听众明白的时候，才是真正掌握了该技术。学会分享是很重要的，把在该技术上的经验总结出来，写成博客，集结成书出版，再到行业会议上分享实践经验。这样才能成为该领域公认的专家。</p><p> </p><p>推迟学习</p><p> </p><p>一位一年读100多本书的同事说：</p><p> </p><p>你一年才能读几十本书，就不要什么书都看了，多花点时间挑书吧。</p><p> </p><p>现在新技术层出不穷，我们没有那么多时间去深入学习每一门。对于大多数技术，我们只需要搞懂概念部分，从宏观上了解一下，决定我们要不要深入地去学习它。有了这些了解，就能轻松地与别人聊天了，也可以为以后技术选型做一些储备。当面对真正的需求时，或者你有足够的时间做技术储备时，才去进入实践部分。</p><p>编程是一个知识更新很快的行业，只有真正有热情并掌握了好的学习方法的人，才能走的长久。</p><p> </p><p>PS：早读君看到这个身有体会，最近在利用nodeJS结合码农日报的rss来做阅读。我可以分享下整个做的想法：</p><p>A：当初的想法其实就很小，能在命令行中输出那些标题，突然有一天想把这些内容分享给团队的同事看但总不能跑到我这看吧，那这样就需要一个可视化界面了。</p><p>B：那天周五晚下班后在咖啡馆又找了周刊的rss，那多个周刊要在同一套代码里显示，我所想到的就是用参数来做配置，根据不同的参数读取不同的内容。</p><p>其实还是跟早读君实现其他产品思路，学一门新技术一样。基于产品实现学技术学得会更踏实。可能刚开始的时候都是点，但相信到了一定程度后那就是把点结网成面。</p><p><br></p>', '', '前端早读课', '2017-05-20 18:45:55', '152', '0', '0', '0', '1', '', '0', '1', '', '2', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('4', 'html5本地存储localStorage介绍', 'localStorage是html5新增的功能，它的作用是可以在浏览器里保存我们需要的信息，从而可以在页面之间切换和使用，比cookie方便，也比cookie能够存储更多的东西，下面是几个常用的localStorage方法', '<p>localStorage是html5新增的功能，它的作用是可以在浏览器里保存我们需要的信息，从而可以在页面之间切换和使用，比cookie方便，也比cookie能够存储更多的东西，下面是几个常用的localStorage方法：</p><p><b>1、添加localStorage</b></p><p>localStorage.setItem(“key”,”value”); &nbsp; &nbsp; //以“key”为名称存储一个值“value”</p><p><b>2、获取localStorage</b></p><p>localStorage.getItem(“key”); &nbsp; &nbsp;//获取名称为“key”的值</p><p><b>3、删除localStorage</b></p><p>localStorage.removeItem(“key”); &nbsp; &nbsp; //删除名称为“key”的信息</p><p><b>4、清空localStorage</b></p><p>localStorage.clear(); &nbsp; &nbsp; //清空localStorage中所有信息</p><p><b>5、查看已经保存的localStorage</b></p><p>可通过chrome浏览器的控制台工具Resource–Local Storage里查看</p>', '', '前端汇', '2017-05-20 13:41:09', '99', '0', '1', '0', '6', 'html5', '0', '1', '', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('5', 'html5shiv，让低版本的IE浏览器支持HTML5元素(IE8)', '随着html5的盛行，我们在页面中也越来越多的运用到html5元素，但是悲催的是，脑残的IE的低版本实在让人抓狂，咱们辛苦规划好的页面在这些IE版别下显得是浆糊一桶。为了让这不一样的IE版别之间能”认识”HTML5元素，开源的html5shiv呈现了！', '<p>八年抗战，html5终于定稿，近年来，随着html5的盛行，我们在页面中也越来越多的运用到html5元素，但是悲催的是，脑残的IE的低版本实在让人抓狂，咱们辛苦规划好的页面在这些IE版别下显得是浆糊一桶。为了让这不一样的IE版别之间能”认识”HTML5元素，开源的html5shiv呈现了！</p><p><font size=\"4\" style=\"\">1、html5shiv的特点\n</font></p><p>html5shiv的最大特点是让那些个不认HTML5的IE浏览器认出HTML5元素，并依照最基本的处理方法处理HTML5元素——块化（display:block)。这样就阻止了脑残的IE对我们前端人员的残害。</p><h2><font size=\"4\">2、html5shiv的使用方法</font></h2><p>html5shiv的运用方法非常简略，默许只需要将html5shiv按下面方法放在页面的head内即可。</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\">&lt;!--[<span class=\"hljs-keyword\">if</span> lt IE <span class=\"hljs-number\">9</span>]&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"dist/html5shiv.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">![endif]--</span>&gt;</span></span></code></pre><h2><font size=\"4\">3、html5shiv的原理</font></h2><p>html5shiv的原理是使用createElement方法，这包含document.createElement和document.createDocumentFragment，对当前页面的HTML5元素进行动态的调整，并且为这些元素提供最基本的样式。<br></p><h2><font size=\"4\">4、html5shiv官方给的建议</font></h2><p>a.使用min版本的js（压缩过的）以节省带宽和提高加载速度；</p><p>b.必须在body元素之前加载；</p><p>c.可以在页面的CSS之前或者之后加载，但从性能性能上出发，CSS先于html5shiv加载会更优。</p><p></p><p>参考地址：</p><p>html5shiv在GitHub上的地址：https://github.com/aFarkas/html5shiv</p><p><br></p>', '', '前端汇', '2017-05-20 13:46:26', '113', '0', '1', '0', '6', '', '0', '1', '', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('6', 'HTML5获取摄像头视频演示', '', '<p>html5新增了很多强大的API，其中可以获取设备的摄像头视频是个比较大的亮点，零度从网上找到了一些代码，进行了整合，搞出来一个html5获取摄像头的例子，大家可以参考一下。</p><p>主要代码如下：<br></p><p><br></p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"DOMContentLoaded\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n	<span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>),\n		context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>),\n		video = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"video\"</span>),\n		videoObj = { <span class=\"hljs-string\">\"video\"</span>: <span class=\"hljs-literal\">true</span> },\n		errBack = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>) </span>{\n			<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"视频获取失败: \"</span>, error.code); \n		};\n\n	<span class=\"hljs-keyword\">if</span>(navigator.getUserMedia) { <span class=\"hljs-comment\">// Standard</span>\n		navigator.getUserMedia(videoObj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">stream</span>) </span>{\n			video.src = stream;\n			video.play();\n		}, errBack);\n	} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(navigator.webkitGetUserMedia) { <span class=\"hljs-comment\">// WebKit-prefixed</span>\n		navigator.webkitGetUserMedia(videoObj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">stream</span>)</span>{\n			video.src = <span class=\"hljs-built_in\">window</span>.webkitURL.createObjectURL(stream);\n			video.play();\n		}, errBack);\n	} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(navigator.mozGetUserMedia) { <span class=\"hljs-comment\">// moz-prefixed</span>\n		navigator.mozGetUserMedia(videoObj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">stream</span>)</span>{\n			video.src = <span class=\"hljs-built_in\">window</span>.URL.createObjectURL(stream);\n			video.play();\n		}, errBack);\n	}\n	\n}, <span class=\"hljs-literal\">false</span>);</code></pre><p><br></p>', '', '前端汇', '2017-05-20 13:49:04', '349', '0', '0', '0', '6', 'html5,摄像头', '0', '1', '', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('7', 'H5网页判断手机横屏或是竖屏', '我们做出来的H5页面在手机端浏览的时候，用户很有可能会产生更换横竖屏的操作，这时如果我们能够判断出横竖屏，就可以更好的优化我们的网页，进而拥有更好的用户体验度', '<p>我们做出来的H5页面在手机端浏览的时候，用户很有可能会产生更换横竖屏的操作，这时如果我们能够判断出横竖屏，就可以更好的优化我们的网页，进而拥有更好的用户体验度。下面是判断横竖屏的代码：<br></p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'orientationchange\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>)</span>{\n    <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-built_in\">window</span>.orientation == <span class=\"hljs-number\">180</span> || <span class=\"hljs-built_in\">window</span>.orientation==<span class=\"hljs-number\">0</span> ) {\n        alert(<span class=\"hljs-string\">\"竖屏\"</span>);\n    }\n    <span class=\"hljs-keyword\">if</span>( <span class=\"hljs-built_in\">window</span>.orientation == <span class=\"hljs-number\">90</span> || <span class=\"hljs-built_in\">window</span>.orientation == <span class=\"hljs-number\">-90</span> ) {\n        alert(<span class=\"hljs-string\">\"横屏\"</span>);\n    }\n});</code></pre><p>大家可以拿到手机上去试一下<br></p><p><br></p>', '', '前端汇', '2017-05-20 13:50:50', '272', '0', '0', '0', '6', '', '0', '1', '', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('8', '整站快速变黑白灰的方法', '经常看到一些网站遇到重大灾害事故的时候，选择默哀，会把网站的整体颜色变成黑白灰，这种技术其实并不复杂，仅仅是通过滤镜就可实现，下面我把我常用的方法分享给大家。', '<p>经常看到一些网站遇到重大灾害事故的时候，选择默哀，会把网站的整体颜色变成黑白灰，这种技术其实并不复杂，仅仅是通过滤镜就可实现，下面我把我常用的方法分享给大家。\n</p><p>\n</p><p>在css文件中插入以下代码：</p><pre>html {\nfilter:progid:DXImageTransForm.Microsoft.BasicImage(grayscale=1);\n-webkit-filter: saturate(0);\n} </pre><p>保存刷新，你会发现页面瞬间变成了黑白灰基调。当然我们也可以在html文档中直接添加:</p><p></p><pre>&lt;style type=”text/<a href=\"http://www.lingdublog.com/tag/css\" target=\"_blank\">css</a>”&gt;\nhtml{\nfilter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);\n}\n&lt;/style&gt;</pre><p>效果是一样的，通过css滤镜把网页颜色改变。</p><p>值得注意的是，如果您的网站中有flash动画的话，它的颜色不会改变，这时您可以在在FLASH代码的&lt;object …&gt;和&lt;/object&gt;之间插入：</p><p></p><pre>&lt;param value=”false” name=”menu”/&gt;\n&lt;param value=”opaque” name=”wmode”/&gt; </pre><p><br></p><p><br></p>', '', '前端汇', '2017-05-20 13:52:29', '89', '0', '0', '0', '5', '', '0', '1', '', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('9', 'CSS3的属性选择器', 'CSS3中新增了许多选择器，今天给大家说说CSS3的属性选择器。', '<p>CSS3中新增了许多选择器，今天给大家说说CSS3的属性选择器。\n</p><p>\n</p><p>与CSS2相比，CSS3新增了3种属性选择器：[attr^=value]、[attr$=value]、[attr*=value]；分别来讲解一下。</p><h2><font size=\"4\">一、[attr^=value]属性选择器</font></h2><p>大家如果接触过正则表达式的话，应该知道^符号的意思，是表示开头，没错，这里也是表示开头的意思，意思就是选择属性名attr的开头值为value的元素！</p><p>举个例子：</p><p></p><pre>&lt;style type=\"text/css\"&gt;\n[class^=tea]{width:200px; height:200px;}  /*此选择器表示选择class开头字符串为tea的元素*/\n&lt;/style&gt;\n\n&lt;div class=\"teacher\"&gt;我的class是teacher&lt;/div&gt;\n&lt;div class=\"tea\"&gt;我的class是tea&lt;/div&gt;\n&lt;div class=\"teach\"&gt;我的class是teach&lt;/div&gt;\n&lt;div class=\"aaa\"&gt;我的class是aaa&lt;/div&gt;</pre><p>这样会选择前三个元素，而不会选择最后一个元素。</p><h2><font size=\"4\">二、[attr$=value]属性选择器</font></h2><p>相比较前一个，这一个就很容易理解了，$符号就代表结尾，这里意思是选择属性名attr的结尾值为value的元素！</p><p>例子：</p><p></p><pre>&lt;style type=\"text/css\"&gt;\n[class$=er]{width:200px; height:200px;}  /*此选择器表示选择class结尾字符串为er的元素*/\n&lt;/style&gt;\n\n&lt;div class=\"teacher\"&gt;我的class是teacher&lt;/div&gt;\n&lt;div class=\"tea\"&gt;我的class是tea&lt;/div&gt;\n&lt;div class=\"teach\"&gt;我的class是teach&lt;/div&gt;\n&lt;div class=\"aaa\"&gt;我的class是aaa&lt;/div&gt;</pre><p>这样就会选择class为teacher的div。</p><h2><font size=\"4\">三、[attr*=value]属性选择器</font></h2><p></p><p>最后这一个和前面两个的区别是符号换成了*，这个代表通配符的意思，意思是选择属性名attr的值包含value的元素！</p><p></p><pre>&lt;style type=\"text/css\"&gt;\n[class$=ch]{width:200px; height:200px;}  /*此选择器表示选择class包含字符串为ch的元素*/\n&lt;/style&gt;\n\n&lt;div class=\"teacher\"&gt;我的class是teacher&lt;/div&gt;\n&lt;div class=\"tea\"&gt;我的class是tea&lt;/div&gt;\n&lt;div class=\"teach\"&gt;我的class是teach&lt;/div&gt;\n&lt;div class=\"aaa\"&gt;我的class是aaa&lt;/div&gt;</pre><p>这样就会选择class为teacher和class为teach的两个div。</p><p>这三种属性选择器大家如果用的熟练的话会对提高工作效率有很大帮助。</p><p><br></p>', '', '前端汇', '2017-05-20 13:55:57', '80', '0', '0', '0', '0', '', '0', '1', '', '0', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('10', 'nginx下如何禁止未绑定域名访问', '网站初建，对nginx配置也不怎么懂，今日查看网站的百度收录排名，突然发现有一个一模一样的网站出现，连内容和logo也一样，并且排名和收录都比自己的网站高。仔细一看第一反应就是他的域名解析到了我的服务器IP上，应该是nginx上配置问题，没有进行过滤。', '<h3 id=\"nginx-\"><span style=\"color: inherit; font-size: 18px; line-height: 1.8;\">背景</span><br></h3>\n<p>网站初建，对nginx配置也不怎么懂，今日查看网站的百度收录排名，突然发现有一个一模一样的网站出现，连内容和logo也一样，并且排名和收录都比自己的网站高。仔细一看第一反应就是他的域名解析到了我的服务器IP上，应该是nginx上配置问题，没有进行过滤。网上查了一下原因和解决方法，总结如下：</p>\n<h4 id=\"-\">方式一</h4>\n<p>禁止未绑定的域名解析到服务器，跳转到403错位</p>\n<pre><code>server{\n    listen 80 default_server;\n    server_name _;\n    return 403;\n}\n</code></pre><p>其实这个名字没有什么特别的，它仅仅是一个许多无效的域名中的一个代表，与任何真实的名字永远不会相交。其它无效的名称，如“ - “ 和” ！@＃ “也可同样使用。<br>default_server：nginx的虚拟主机是通过HTTP请求中的Host值来找到对应的虚拟主机配置，如果找不到呢？那 nginx就会将请求送到指定了 default_server 的 节点来处理</p>\n<p>对于未绑定的域名指向你的服务器时，匹配不到你配置的虚拟主机域名后，会默认使用这个虚拟主机，然后直接返回404。</p>\n<h4 id=\"-\">方式二</h4>\n<p>把这些流量收集起来，导入到自己的网站，以其人之道还治其人之身</p>\n<pre><code>server{\n    listen 80 default_server;\n    server_name _;\n    rewrite ^(.*) http://www.jsout.com permanent;\n}\n</code></pre><h4 id=\"-\">总结</h4>\n<p>其实这人也挺无聊的。不过，对于我自身，也加深了解了对nginx的配置。看来对于一个前端工程师来说，多了解一下nginx等服务器的配置也是必要的，成长总是在磕碰之后。</p><p><br></p>', 'static/upload/pics/5/21/2016wD40s7O1PqoLJJx1XOSiJ9O0.jpg', '前端汇', '2017-06-06 18:24:25', '253', '1', '1', '1', '16', 'nginx', '0', '1', '', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('11', '返回顶部javascript完整代码（基于jquery）', '返回顶部按钮, 点击后平滑过渡到顶部; 自动判断浏览器窗口,自动隐藏', '<h4 id=\"-javascript-jquery-\"><span style=\"color: inherit; font-size: 14px; line-height: 1.8;\">背景：</span><br></h4>\n<blockquote>\n<p>文章长了页面拉到底部再拖回到顶部，会显得很麻烦，也很臃肿。加个“返回顶部”按钮就不一样了。</p>\n</blockquote>\n<h5 id=\"-\">需求：</h5>\n<blockquote>\n<p>返回顶部按钮, 点击后平滑过渡到顶部; 自动判断浏览器窗口,自动隐藏</p>\n</blockquote>\n<p>首先在html里引入jquery</p>\n<pre><code class=\"lang-javascript\">&lt;script src=\"&lt;%=_web.url%&gt;static/src/js/widget/jquery/jquery-1.9.1.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>在页面通用部分( footer.html )添加页面元素:</p>\n<pre><code class=\"lang-vbscript-html\">&lt;a id=\"back-top\" class=\"w-gotop\" href=\"javascript:void(0)\"&gt;&lt;/a&gt;\n</code></pre>\n<p>再添加并调整一下css显示样式：</p>\n<pre><code class=\"lang-css\">&lt;style&gt;\n    #back-top{\n        width:50px;\n        height:42px;\n        display:block;\n        background:url(\"/images/common/gotop.jpg\") center center;\n        position: fixed;\n        right: 20px;\n        bottom: 200px;\n        display: none;\n    }\n&lt;/style&gt;\n</code></pre>\n<p>这样按钮就能正常显示在页面的右下角了，最后添加javascript代码：</p>\n<pre><code class=\"lang-javascript\">    $(window).scroll(function() {\n        if($(this).scrollTop() != 0) {\n            $(\'#back-top\').fadeIn();\n        } else {\n            $(\'#back-top\').fadeOut();\n        }\n    });\n    $(\"#back-top\").on(\"click\",function(){$(\"html,body\").animate({scrollTop:\"0\"})})\n</code></pre>\n<p>如此，一个简单的返回到顶部的功能就完成了。O(∩_∩)O</p><p><br></p>', 'static/upload/pics/6/8/2016MAg0iUz_ghGIw4dyphlEn0Ny.jpg', '前端汇', '2017-09-21 15:27:57', '121', '0', '0', '0', '4', 'jquery,返回顶部', '1', '1', '', '1', '0', '1', '0', '0', '0');
INSERT INTO `li_article` VALUES ('12', 'Liblog博客系统简介', 'Liblog是一个简单易用的Markdown博客系统，它是基于开源框架thinkJS(使用 ES6/7 特性开发 Node.js 框架)开发的nodejs项目需要mysql数据库支持，具有管理后台功能，更新博客分为普通文章和markdown文章，markdown文章只需要导入你写好的Markdown文件即可。', '<p><span style=\"color: inherit; font-size: 30px; line-height: 1.8;\">一. 简介</span><br></p>\n<p>Liblog是一个简单易用的Markdown博客系统，它是基于开源框架<a href=\"http://www.thinkjs.org\">thinkJS</a>(使用 ES6/7 特性开发 Node.js 框架)开发的nodejs开源系统。liblog需要mysql数据库支持，具有管理后台功能，更新博客分为普通文章和markdown文章，markdown文章只需要导入你写好的Markdown文件即可。它摆脱了在线编辑器排版困难，无法实时预览的缺点，一切都交给Markdown来完成，一篇博客就是一个Markdown文件。同时也支持评论，代码高亮，分类，标签云，留言板、友情链接、系统设置等常用功能。Liblog提供了不同的主题样式，你可以根据自己的喜好配置，如果你想自己制作博客主题，也是非常容易的。Liblog还支持整站静态网页生成，同时有发布相关的配置，使用nginx做反向代理，动静态资源分离，静态缓存等，使您发布后的博客访问秒开。</p>\n<h2 id=\"-\">二. 功能特点</h2>\n<ol>\n<li>一键导入Markdown文章  </li>\n<li>文章评论  </li>\n<li>代码高亮  </li>\n<li>文章内容分页  </li>\n<li>支持手机端访问  </li>\n<li>自制主题  </li>\n<li>响应式  </li>\n<li>自定义URL</li>\n<li>良好的SEO  </li>\n</ol>\n<h2 id=\"-liblog-\">三. Liblog优势</h2>\n<ol>\n<li>使用nodejs编写，对前端开发人员有天然的二次开发优势  </li>\n<li>一键导入Markdown文章，摆脱后台编辑排版困难，无法实时预览的缺点  </li>\n<li>可自定义URL，支持静态/伪静态访问，良好的SEO  </li>\n<li>完善的后台配置，可自由开关某些功能  </li>\n<li>多主题支持，可自制主题  </li>\n<li>博客，分类，标签，归档  </li>\n<li>采用pm2守护进程管理nodejs应用，宕机自动重启</li>\n</ol>\n<h2 id=\"-\">四. 环境要求</h2>\n<p>Nodejs+nginx</p>\n<h2 id=\"-\">五. 安装步骤</h2>\n<ol>\n<li>下载Liblog源代码</li>\n<li>安装nodejs及nginx,并配置  </li>\n<li>解压上传到你的网站根目录 </li>\n<li>运行启动命令</li>\n<li>访问后台编辑系统配置，填写静态资源目录(网站)</li>\n<li>打开浏览器，访问网站首页  </li>\n<li>具体安装步骤，详见安装教程</li>\n</ol>\n<h2 id=\"-\">六. 详细说明</h2>\n<p><a href=\"http://www.jsout.com/\">1. 安装</a><br><a href=\"http://www.jsout.com/\">2. 目录结构</a><br><a href=\"http://www.jsout.com/\">3. 配置说明</a><br><a href=\"http://www.jsout.com/\">4. 编写博客</a><br><a href=\"http://www.jsout.com/\">5. 缓存机制</a><br><a href=\"http://www.jsout.com/\">6. 站点性能优化</a><br><a href=\"http://www.jsout.com/\">7. 在Nginx上运行Liblog</a>  </p>\n<h2 id=\"-bug-\">七. 问题及bug反馈</h2>\n<p>如果在实际使用过程中对Liblog有新的功能需求，或者在使用Liblog的过程中发现了Bug，欢迎反馈给我。可以直接在Github上提交，也可以发邮件至<code>262248861@qq.com</code>与我取得联系，我将及时回复。如果你自己制作了漂亮好用的主题，也非常欢迎你提交给我，我会在这里展示你的主题链接。如果你正在使用Liblog，也可以告诉我，我将也会在这里列出使用者名单。如果你想和其他Liblog使用者讨论交流，欢迎加入QQ群<code>256687601</code>。</p>\n<h2 id=\"-\">八. 使用者列表</h2>\n<p>前端汇：<a href=\"http://www.jsout.com\">http://www.jsout.com</a><br></p>\n<p>如果你的网站也是用liblog搭建，请告知作者 </p>\n<h2 id=\"-\">九. 感谢</h2>\n<p>Liblog的成长需要喜欢Markdown，喜欢写博客的各位亲们支持！感谢你们使用Liblog，感激你们对Liblog的良好建议与Bug反馈。</p>\n<p>QQ群：<code>256687601</code><br>作者邮箱：<code>262248861@qq.com</code>    </p><p><br></p>', '', '前端汇', '2017-08-30 16:51:06', '409', '0', '1', '0', '17', 'liblog,nodejs', '1', '1', '', '3', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('13', '扒一扒Nodejs formidable的onPart', '话说使用Nodejs实现一个文件上传，还是蛮简单的，基于Express4.x一般也就formidable用的多些吧；基本的不多说了，github一下都会的；接着《也说文件上传之兼容IE789的进度条---丢掉flash》，新版的大文件上传，最后就差断点续传了，业余跟进中...；', '<p>话说使用Nodejs实现一个文件上传，还是蛮简单的，基于Express4.x一般也就formidable用的多些吧；基本的不多说了，github一下都会的；接着《也说文件上传之兼容IE789的进度条---丢掉flash》，新版的大文件上传，最后就差断点续传了，业余跟进中...；对于IE789，在文件上传这块，算是与HTML5无缘了，当然我也选择丢掉了flash，就用最原始的input[type=\"file\"]+hideIframe+轮询；OK，IE789可以凉快去了，BSIE！</p>\n<p>  那么，现代浏览器上就不一样了；大家都知道用HTML5上传大文件必然会选择分段，files API的file.slice(start,end)+formData；简单的将就看吧：</p>\n<pre><code class=\"lang-python\">1    var uploader=function(){\n2\n3  //....\n4\n5  function Files(obj){\n6    this.files=obj.files;\n7    this.__token__=utils.getRandomStr();\n8    this.url=obj.url||location.href;\n9    this.chunkSize=obj.chunkSize||200*1024;\n10    this.chunks=Math.ceil(this.files.size/this.chunkSize);\n11    this.index=0;\n12    this.onprogress=obj.onprogress||function(p){console.log(p);};\n13  }\n14  Files.prototype={\n15    postFiles:function(){\n16      var $self=this;\n17      //大于50M 断点续传\n18      if (this.files.size&gt;50*1024*1024) {\n19        var fileReader = new FileReader(),spark = new SparkMD5.ArrayBuffer();\n20        fileReader.onload = function (e) {\n21              spark.append(e.target.result);   \n22              $self.hash=spark.end();   \n23              window.__hash__=$self.hash;       \n24              var stored=localStorage.getItem(\'fileUploadInfos\');\n25              //断点信息\n26              $self.postSlice();\n27          };\n28        fileReader.readAsArrayBuffer(this.files.slice(0, 10240));\n29      }else{\n30        this.postSlice();\n31      };\n32    },\n33    postSlice:function(){\n34      var $self=this;\n35      if (this.index&gt;=this.chunks) {\n36        return false;\n37      };\n38      this.start=this.index*this.chunkSize;\n39      this.end=Math.min(this.files.size,this.start+this.chunkSize);\n40\n41      var self=this;\n42      var fd = new FormData();\n43      fd.append(\"sliceData\", this.files.slice(this.start,this.end));\n44      this.url=//url datas\n45      var xhr = new XMLHttpRequest();\n46      xhr.upload.addEventListener(\"progress\", function(evt){\n47        if (evt.lengthComputable) {\n48          var led=self.index*self.chunkSize*1+evt.loaded*1;\n49          var p=parseFloat((led)/self.files.size*100).toFixed(2);\n50          self.onprogress&amp;&amp;self.onprogress(p);\n51        }else {\n52          console.log(\'unable to compute\');\n53        }\n54      }, false);\n55      xhr.addEventListener(\"load\", function(){\n56        self.index++;\n57        self.postSlice();\n58        eval(xhr.responseText);\n59      }, false);\n60      xhr.open(\"POST\", this.url);\n61      // xhr.addEventListener(\"error\", uploadFailed, false);\n62      xhr.addEventListener(\"abort\", function () {\n63        //记录断点信息\n64      }, false);\n65      xhr.send(fd);\n66    }\n67  }\n68\n69  return {\n70    Files:Files\n71    //.....\n72  }\n73  }();\n74\n75  if (this.files) {\n76  var Files=new uploader.Files({\n77    files:this.files[0],\n78    chunkSize:10*1024*1024,\n79    onprogress:function(p){\n80      callbk(p);\n81    }\n82  });\n83  Files.postFiles();\n84  }\n</code></pre>\n<p>好吧，其实大家都懂，我就不多BB了；还是说formidable吧，既然用到分段上传，formidable的一般做法肯定是行不通的；不过github上人家也说了，onPart或许可以。。。原谅我英语有点low，一知半解；原文这样的：</p>\n<p><code>You may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any\'field\' / \'file\' events processing which would occur otherwise, making you fully responsible for handling the processing.</code></p>\n<pre><code class=\"lang-python\">1  form.onPart = function(part) {\n2  part.addListener(\'data\', function() {\n3    // ...\n4    });\n5  }\n</code></pre>\n<p><code>If you want to use formidable to only handle certain parts for you, you can do so:</code></p>\n<pre><code class=\"lang-python\">1  form.onPart = function(part) {\n2  if (!part.filename) {\n3    // let formidable handle all non-file parts\n4    form.handlePart(part);\n5    }\n6  }\n</code></pre>\n<p>也就是我们需要使用onPart来分段接收前端发过来的数据，然后合成一个文件，生成到指定目录；</p>\n<p>当使用formData上传时，在request headers里我们会看到有项request payload，也就是我们发送过去的数据，这是未解析的原始数据；那么，难道我们还要自己解析吗？不会玩了。。</p>\n<p>扒一扒formidable的源代码，会发现有好几个_parser结尾的js文件；再看incoming_form.js里有这么一段：</p>\n<pre><code class=\"lang-python\">1  IncomingForm.prototype._parseContentType = function() {\n2  if (this.bytesExpected === 0) {\n3    this._parser = dummyParser(this);\n4    return;\n5  }\n6\n7  if (!this.headers[\'content-type\']) {\n8    this._error(new Error(\'bad content-type header, no content-type\'));\n9    return;\n10  }\n11\n12  if (this.headers[\'content-type\'].match(/octet-stream/i)) {\n13    this._initOctetStream();\n14    return;\n15  }\n16\n17  if (this.headers[\'content-type\'].match(/urlencoded/i)) {\n18    this._initUrlencoded();\n19    return;\n20  }\n21\n22  if (this.headers[\'content-type\'].match(/multipart/i)) {\n23    var m = this.headers[\'content-type\'].match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n24    if (m) {\n25      this._initMultipart(m[1] || m[2]);\n26    } else {\n27      this._error(new Error(\'bad content-type header, no multipart boundary\'));\n28    }\n29    return;\n30  }\n31\n32  if (this.headers[\'content-type\'].match(/json/i)) {\n33    this._initJSONencoded();\n34    return;\n35  }\n36\n37  this._error(new Error(\'bad content-type header, unknown content-type: \'+this.headers[\'content-type\']));\n38};\n</code></pre>\n<p>这几条if很是让人欣喜啊，有木有？特别是看到这句：</p>\n<pre><code class=\"lang-python\">1  this.headers[\'content-type\'].match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n</code></pre>\n<p>这不是在解决咱在request headers里看到的request payload吗？终于在心中大喜，咱不用自己解析那堆数据了；接着往下看：</p>\n<pre><code class=\"lang-python\">1IncomingForm.prototype.onPart = function(part) {\n2  // this method can be overwritten by the user\n3  this.handlePart(part);\n4};\n5\n6IncomingForm.prototype.handlePart = function(part) {\n7  var self = this;\n8\n9  if (part.filename === undefined) {\n10    var value = \'\'\n11      , decoder = new StringDecoder(this.encoding);\n12\n13    part.on(\'data\', function(buffer) {\n14      self._fieldsSize += buffer.length;\n15      if (self._fieldsSize &gt; self.maxFieldsSize) {\n16        self._error(new Error(\'maxFieldsSize exceeded, received \'+self._fieldsSize+\' bytes of field data\'));\n17        return;\n18      }\n19      value += decoder.write(buffer);\n20    });\n21\n22    part.on(\'end\', function() {\n23      self.emit(\'field\', part.name, value);\n24    });\n25    return;\n26  }\n27\n28  this._flushing++;\n29\n30  var file = new File({\n31    path: this._uploadPath(part.filename),\n32    name: part.filename,\n33    type: part.mime,\n34    hash: self.hash\n35  });\n36\n37  this.emit(\'fileBegin\', part.name, file);\n38\n39  file.open();\n40  this.openedFiles.push(file);\n41\n42  part.on(\'data\', function(buffer) {\n43    if (buffer.length == 0) {\n44      return;\n45    }\n46    self.pause();\n47    file.write(buffer, function() {\n48      self.resume();\n49    });\n50  });\n51\n52  part.on(\'end\', function() {\n53    file.end(function() {\n54      self._flushing--;\n55      self.emit(\'file\', part.name, file);\n56      self._maybeEnd();\n57    });\n58  });\n59  };\n</code></pre>\n<p>至此，终于明白作者的话了；自己处理上传的数据，是在handlePart中通过part.on(\'data\')和part.on(\'end\')来收集分段数据，然后生成文件的；那么使用分段上传的话，我们就需要在Nodejs里重写form.handlePart了；</p>\n<pre><code class=\"lang-python\">1form.handlePart=function(part) {\n2  var dd=[],ll=0;\n3  part.on(\'data\', function(data) {\n4    if (data.length == 0) {\n5      return;\n6    }\n7    dd.push(data);\n8    ll+=data.length;\n9  });\n10\n11  part.on(\'end\', function() {  \n12      var p=\'./public/imgs/\'+uploadToken+\'_\'+req.query.name;\n13      fs.open(p, \'a\', function (err, fd) {\n14        if (err) {\n15          throw err;\n16        }\n17        fs.write(fd, Buffer.concat(dd,ll),0, ll,0,function(){\n18            if (req.query.chunks==req.query.index*1+1) {\n19              res.write(bk);\n20            }\n21            fs.close(fd,function(){});\n22            res.end();\n23          });\n24      }); \n25    } \n26  });\n27}\n</code></pre>\n<p>拿到data后生成文件并不难，fs.writeFile、stream都可以的；原谅我初入Nodejs，怎么感觉最后一步的写入文件，这两种方式都特慢呢？不能忍啊，再探！</p>\n<p>试来试去，最后还是选择在接收到第一段数据时就生成文件，之后接收到的数据直接push进去；即上面的fs.write(fd,buffer,offset,length,position,cb)；话说明显快了不少呢！而且，意外的收获是：想一想接下来还要实现断点续传呢！想一想，貌似这样做，基本等于Nodejs端的断点续传已经实现了呢；前端记录断点的位置，下次上传时从断点位置开始，然后直接push到这个没上传完的文件里；</p>\n<p>到这里，Nodejs端的分段接收文件就可以的了，而且还为之后的断点续传做了个很好的铺垫呢；</p>\n<p>好了，对于大文件上传，formidable能做的差不多就这么多了，onPart是必须的；如果大家伙有什么更好的方法，欢迎与我分享！简单的记录，与君共勉，谢谢你能看到这儿！</p><p><br></p>', '', '前端汇', '2017-06-12 16:08:17', '90', '0', '1', '0', '3', 'onPart', '1', '1', '', '3', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('14', 'CSS 文件引入方式', '', '<p>（1）链接式 &nbsp;：&nbsp;在网页的&lt;head&gt;&lt;/head&gt;标签对中使用&lt;link&gt;标记来引入外部样式表文件，使用html规则引入外部css &nbsp;(用得比较多) :</p><p>　　&lt;link href=\"./mystyle.css\" rel=\"stylesheet\" type=\"text/css\"/&gt;</p><p>（2）导入式 ：&nbsp;将一个独立的.css文件引入HTML文件中，导入式使用CSS规则引入外部CSS文件，&lt;style&gt;标记也是写在&lt;head&gt;标记中，使用的语法如下：</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;style type=\"text/css\"&gt;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @import\"mystyle.css\"; 此处要注意.css文件的路径</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;</p><p>比较：link引用和import引用区别是：link是html加载前就引用，而import是html加载后才引用。举例，采用impor引用，会先显示无样式的页面，然后再把样式放进去。如果用JavaScript动态引用CSS，得使用link引用方式才可实现。</p><p>（3）内联css文件，直接在header 里面写css，如：</p><p>&lt;style type=\"text/css\"&gt;div{margin: 0;padding: 0;border:1px red solid;}&lt;/style&gt;</p><p>这种方法的使用情况要少的多，最长见得就是访问量大的门户网站。或者访问量较大的企业网站的首页。与第一种方法比起来，优点突出，弊端也明显。优点：速度 快，所有的CSS控制都是针对本页面标签的，没有多余的ＣＳＳ命令；再者不用外链ＣＳＳ文件。直接在ＨＴＭＬ文档中读取样式。缺点就是改版麻烦些，单个页 面显得臃肿，ＣＳＳ不能被其他ＨＴＭＬ引用造成代码量相对较多，维护也麻烦些。但是采用这种方法的公司大多有钱，对他们来说用户量是关键，他们不缺人进 行复杂的维护工作。</p><p>（4） 直接在标签里面写样式</p><p></p><p>&lt;div style=\"border:1px red solid;\"&gt;测试信息&lt;/div&gt;</p><p><br></p>', '', '前端汇', '2017-06-14 20:05:22', '78', '0', '1', '0', '5', 'css,引入', '1', '1', '', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('15', 'CSS居中问题', '', '<p></p><h2><font size=\"5\">内联元素居中方案</font></h2><p></p><p><b>水平居中设置</b></p><p>&nbsp;&nbsp;&nbsp;&nbsp;行内元素：设置 text-align:center；</p>&nbsp; &nbsp;&nbsp;<span style=\"line-height: 1.8;\">Flex布局：设置display:flex;justify-content:center;(灵活运用)</span><br><br><p><b>垂直居中设置</b></p><p>&nbsp; &nbsp; 1、父元素高度确定的单行文本（内联元素）</p><p>设置 height = line-height；</p><p>&nbsp; &nbsp; 2、<span style=\"line-height: 1.8;\">父元素高度确定的多行文本（内联元素）</span></p><p><span style=\"line-height: 1.8;\">a:插入 table （插入方法和水平居中一样），然后设置 vertical-align:middle； &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><br><span style=\"line-height: 1.8;\">b:先设置 display:table-cell 再设置 vertical-align:middle；</span></p><p><span style=\"line-height: 25.2px;\"><br></span><span style=\"color: inherit; font-size: x-large;\">块级元素居中方案</span><br></p><h2></h2><p><b>水平居中设置</b></p><p>&nbsp;&nbsp;&nbsp;&nbsp;1、定宽块状元素</p><p>设置左右 margin 值为 auto；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;2、不定宽块状元素</p><p>a:在元素外加入 table 标签（完整的，包括 table、tbody、tr、td），该元素写在 td 内，然后设置 margin 的值为 auto；</p><span style=\"line-height: 1.8;\">b:给该元素设置 displa:inine 方法；</span><p><span style=\"line-height: 1.8;\">c:父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left:50%；</span><br></p><p><b>垂直居中设置</b></p><ul><li>1.使用position:absolute（fixed）,设置left、top、margin-left、margin-top的属性;</li></ul><pre><code>.box{\n    position:absolute;/*或fixed*/\n    top:50%;\n    left:50%;\n    margin-top:-100px;\n    margin-left:-200px;\n}</code></pre>\n<ul><li>2.利用position:fixed（absolute）属性，margin:auto这个必须不要忘记了;</li></ul>\n<pre><code>.box{\n    position: absolute;或fixed\n    top:0;\n    right:0;\n    bottom:0;\n    left:0;\n    margin: auto;\n}</code></pre>\n<ul><li>3.利用display:table-cell属性使内容垂直居中;</li></ul>\n<pre><code>.box{\n\ndisplay:table-cell;\n\nvertical-align:middle;\n\ntext-align:center;\n\nwidth:120px;\n\nheight:120px;\n\nbackground:purple;\n\n}</code></pre>\n<ul><li>4.使用css3的新属性transform:translate(x,y)属性;</li></ul>\n<pre><code>.box{\n    position: absolute;\n    transform: translate(50%,50%);\n    -webkit-transform:translate(50%,50%);\n    -moz-transform:translate(50%,50%);\n    -ms-transform:translate(50%,50%);\n}</code></pre>\n<ul><li>5.最高大上的一种，使用:before元素;</li></ul>\n<pre><code>.box{\n\nposition:fixed;\n\ndisplay:block;\n\nbackground:rgba(0,0,0,.5);\n\n}\n\n.box:before{\n\ncontent:\'\';\n\ndisplay:inline-block;\n\nvertical-align:middle;\n\nheight:100%;\n\n}\n\n.box.content{\n\nwidth:60px;\n\nheight:60px;\n\nline-height:60px;\n\ncolor:red;</code></pre>\n<ul><li>6.Flex布局;</li></ul>\n<pre><code><span>.box</span><span>{\n    <span><span>display</span>:<span> -webkit-box</span></span>;\n    <span><span>display</span>:<span> -webkit-flex</span></span>;\n    <span><span>display</span>:<span> -moz-box</span></span>;\n    <span><span>display</span>:<span> -moz-flex</span></span>;\n    <span><span>display</span>:<span> -ms-flexbox</span></span>;\n    <span><span>display</span>:<span> flex</span></span>;\n    <span>水平居中\n    <span>-webkit-box-align</span>:<span> center</span></span>;\n    <span><span>-moz-box-align</span>:<span> center</span></span>;\n    <span><span>-ms-flex-pack</span>:<span>center</span></span>;\n    <span><span>-webkit-justify-content</span>:<span> center</span></span>;\n    <span><span>-moz-justify-content</span>:<span> center</span></span>;\n    <span><span>justify-content</span>:<span> center</span></span>;\n     <span>垂直居中 \n    <span>-webkit-box-pack</span>:<span> center</span></span>;\n    <span><span>-moz-box-pack</span>:<span> center</span></span>;\n    <span><span>-ms-flex-align</span>:<span>center</span></span>;\n    <span><span>-webkit-align-items</span>:<span> center</span></span>;\n    <span><span>-moz-align-items</span>:<span> center</span></span>;\n    <span><span>align-items</span>:<span> center</span></span>;\n<span>}</span></span></code></pre><p><br></p><p></p><p><br></p><p></p><p><br></p>', '', '前端汇', '2017-06-18 10:36:19', '75', '0', '0', '0', '5', '', '1', '1', '', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('16', 'CSS建立表单', '', '<p>1、用css建立表单</p><p>本篇资料主要介绍使用css设置表单元素的方法。</p><p>表单是网页与用户交互所不可缺少的元素，表单是网页的访问者进行交互的接口，例如大家都常遇到的：网上注册、网上登录、网上交易、网上投票、网站留言板等。</p><p>表单用于向服务器传输数据。</p><p>表单中的元素很多，包括常用的输入框、文本框、单选项、复选框、下拉菜单、和按钮等。</p><p><br></p><p>&nbsp;html部分：</p><p>Form：定义表单的范围。</p><p>Input：定义表单中的各个具体表单元素。</p><p>name：名称，设定此一栏的名称，程式中常会用到。</p><p>size：数值，设定此一栏位显现的宽度。</p><p>value：预设内容，设定此一栏位的预设内容。</p><p>align：对齐方式，设定此一栏位的对齐方式。</p><p>maxkength：数值，设定此一栏位可设定输入的最大长度。</p><p>文本输入框：</p><p>将type属性设置为text，就会产生文本框。</p><pre>&lt;p&gt; 姓名：&lt;input type=\"text\"&gt;&lt;/p&gt;</pre><p>密码输入框：</p><p>将type属性设置为password时，就会产生一个密码输入框。</p><pre>&lt;p&gt;密码：\n   &lt;input type=\"password\"&gt;\n   &lt;/p&gt;\n   &lt;p&gt;确认密码：\n   &lt;input type=\"password\"&gt;\n&lt;/p&gt;</pre><p>单选按钮：</p><p>将type属性设置为radio，就会产生单选按钮。</p><pre>&lt;p&gt;性别：\n   &lt;input type=\"radio\" name=\"gender\" value=\"radio\"checked=\"true\"&gt;男      \n   &lt;input type=\"radio\" name=\"gender\" value=\"radio\"&gt;女\n&lt;/p&gt;</pre><p>复选按钮：</p><p>将type属性设置为checkbox时，就会产生复选按钮。</p><pre>&lt;p&gt;专业：\n   &lt;input type=\"checkbox\" name=\"interest\"&gt;美术类\n   &lt;input type=\"checkbox\" name=\"interest\"&gt;理科类\n   &lt;input type=\"checkbox\" name=\"interest\"&gt;文科类\n   &lt;input type=\"checkbox\" name=\"interest\"&gt;体育类\n&lt;/p&gt;&nbsp;</pre><p>按钮：</p><p>将type属性设置为submit时，即为“提交按钮”；将type设置为reset时，即为重置按钮。</p><pre>&lt;p&gt;\n   &lt;input type=\"submit\" value=\"注册提交\"&gt;\n   &lt;input type=\"reset\" value=\"重置内容\"&gt;\n&lt;/p&gt;</pre><p>上面介绍的都是使用&lt;input&gt;标记的，关键在于type属性的值是什么！</p><p>多行文本框：</p><p>若需要访问者输入较多的文字的话，通常使用多行文本框，使用&lt;textarea&gt;/标记来实现的。</p><pre>  &lt;p&gt;\n  &lt;textarea name=\"textarea\" id=\"textarea\" cols=\"45\" rows=\"5\"&gt;&lt;/textarea&gt;\n  &lt;/p&gt;</pre><p>下拉列表框（下拉的菜单）</p><p>下拉列表框是使用&lt;select&gt;标记来实现的。</p><pre>  &lt;p&gt;城市地址：\n  &lt;select name=\"select\" size=\"4\" id=\"select\"&gt;\n  &lt;option value=\"1\"&gt;中国北部地区&lt;/option&gt;\n  &lt;option value=\"2\"&gt;中国南部地区&lt;/option&gt;\n  &lt;option value=\"3\"&gt;中国东部地区&lt;/option&gt;\n  &lt;option value=\"4\"&gt;中国西部地区&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;/p&gt;</pre><p>至此，简单的案例就全部完成了。为了方便读者分析，将上面的代码全部合起来，进行看效果图。</p><p>简单的案列：</p><pre>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n &lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;恋爱交友网&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n \n  &lt;form method=\"post\"&gt;\n   &lt;p&gt; 姓名：&lt;input type=\"text\"&gt;&lt;/p&gt;\n   &lt;p&gt;密码：\n   &lt;input type=\"password\"&gt;\n   &lt;/p&gt;\n   &lt;p&gt;确认密码：\n   &lt;input type=\"password\"&gt;\n   &lt;/p&gt;\n\n   &lt;p&gt;性别：\n       &lt;input type=\"radio\" name=\"gender\" value=\"radio\"checked=\"true\"&gt;男 &amp;nbsp; &amp;nbsp; &amp;nbsp;\n       &lt;input type=\"radio\" name=\"gender\" value=\"radio\"&gt;女\n   &lt;/p&gt;\n\n   &lt;p&gt;专业：\n       &lt;input type=\"checkbox\" name=\"interest\"&gt;美术类\n       &lt;input type=\"checkbox\" name=\"interest\"&gt;理科类\n       &lt;input type=\"checkbox\" name=\"interest\"&gt;文科类\n       &lt;input type=\"checkbox\" name=\"interest\"&gt;体育类\n   &lt;/p&gt;\n\n  &lt;p&gt;城市地址：\n  &lt;select name=\"select\"id=\"select\"&gt;\n  &lt;option value=\"1\"&gt;中国北部地区&lt;/option&gt;\n  &lt;option value=\"2\"&gt;中国南部地区&lt;/option&gt;\n  &lt;option value=\"3\"&gt;中国东部地区&lt;/option&gt;\n  &lt;option value=\"4\"&gt;中国西部地区&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;/p&gt;\n\n  &lt;p&gt;特长：\n  &lt;textarea name=\"textarea\" id=\"textarea\" cols=\"45\" rows=\"5\"&gt;&lt;/textarea&gt;\n  &lt;/p&gt;\n\n  &lt;p&gt;\n   &lt;input type=\"submit\" value=\"注册提交\"&gt;\n   &lt;input type=\"reset\" value=\"重置内容\"&gt;\n   &lt;/p&gt;\n  &lt;/form&gt;\n &lt;/body&gt;\n&lt;/html&gt;</pre><p>效果图：</p><p><img src=\"/static/upload/pics/6/17/2016qrk9pZr6h3PHA2BL3h6dQ_eL.png\" alt=\"906897-20160614231745729-288226652\" style=\"max-width:100%;\"><br></p><p>css部分：</p><p>1、先来看一份“简单案例2”：</p><pre>&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n&lt;title&gt;表单&lt;/title&gt;\n&lt;style&gt;\n&lt;!--\nform{                               /*设置整个表单样式*/\n    border: 2px dotted #AAAAAA;\n    padding: 1px 6px 1px 6px;\n    margin:0px;\n    font:14px Arial;\n}\ninput{                            /* 所有input标记 */\n    color: #00008B;    \n}\ninput.txt{                        /* 文本框单独设置 */\n    border: 1px inset #00008B;\n    background-color: #ADD8E6;\n}\ninput.btn{                        /* 按钮单独设置 */\n    color: #00008B;\n    background-color: #ADD8E6;\n    border: 1px outset #00008B;\n    padding: 1px 2px 1px 2px;\n}\nselect{                            /*设置下拉列表框*/\n    width: 80px;\n    color: #00008B;\n    background-color: #ADD8E6;\n    border: 1px solid #00008B;\n}\ntextarea{                              /*设置多行文本框*/\n    width: 200px;\n    height: 40px;\n    color: #00008B;\n    background-color: #ADD8E6;\n    border: 1px inset #00008B;\n}\n--&gt;\n&lt;/style&gt;\n   &lt;/head&gt;\n&lt;body&gt;\n&lt;form method=\"post\"&gt;\n&lt;p&gt;请输入您的姓名:&lt;br&gt;&lt;input type=\"text\" name=\"name\" id=\"name\" class=\"txt\"&gt;&lt;/p&gt;\n&lt;p&gt;请选择你最喜欢的颜色:&lt;br&gt;\n&lt;select name=\"color\" id=\"color\"&gt;\n    &lt;option value=\"red\"&gt;红&lt;/option&gt;\n    &lt;option value=\"green\"&gt;绿&lt;/option&gt;\n    &lt;option value=\"blue\"&gt;蓝&lt;/option&gt;\n    &lt;option value=\"yellow\"&gt;黄&lt;/option&gt;\n    &lt;option value=\"cyan\"&gt;青&lt;/option&gt;\n    &lt;option value=\"purple\"&gt;紫&lt;/option&gt;\n&lt;/select&gt;<br>&lt;/p&gt;\n&lt;p&gt;请问你的性别:&lt;br&gt;\n    &lt;input type=\"radio\" name=\"sex\" id=\"male\" value=\"male\" class=\"rad\"&gt;男&lt;br&gt;\n    &lt;input type=\"radio\" name=\"sex\" id=\"female\" value=\"female\" class=\"rad\"&gt;女<br>&lt;/p&gt;\n&lt;p&gt;你喜欢做些什么:&lt;br&gt;\n    &lt;input type=\"checkbox\" name=\"hobby\" id=\"book\" value=\"book\" class=\"check\"&gt;看书\n    &lt;input type=\"checkbox\" name=\"hobby\" id=\"net\" value=\"net\" class=\"check\"&gt;上网\n    &lt;input type=\"checkbox\" name=\"hobby\" id=\"sleep\" value=\"sleep\" class=\"check\"&gt;睡觉<br>&lt;/p&gt;\n&lt;p&gt;我要留言:&lt;br&gt;&lt;textarea name=\"comments\" id=\"comments\" cols=\"30\" rows=\"4\" class=\"txtarea\"&gt;&lt;/textarea&gt;&lt;/p&gt;\n&lt;p&gt;&lt;input type=\"submit\" name=\"btnSubmit\" id=\"btnSubmit\" value=\"提交\" class=\"btn\"&gt;&lt;/p&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre><p>1、首先body部分十分简单，就一个简单的表单结构；</p><p>2、设置整个表单的样式，给表单加一个边框，设置一下内边距和外边距，再设置表单里用14像素的Arial字体；</p><p>3、给所有的输入框中的字添加同一种颜色；</p><p>4、给带有“txt”类别的&lt;input&gt;标记单独设置 1像素的深蓝色内陷边框，给背景上个浅天蓝色；</p><p>5、给带有“btn”类别的&lt;input&gt;标记单独设置字体颜色为“深蓝色”、背景色为“浅天蓝色”、添加1像素的深蓝色外凸边框、内边距；</p><p>6、给下拉菜单设置宽度，里面的字体设置为“深蓝色”，背景色为“浅天蓝色”，添加1像素的深蓝色实线边框；</p><p>7、给多行文本框设置宽度、高度，里面的字体设置为“深蓝色”，背景色为“浅天蓝色”，添加1像素的深蓝色实线边框；</p><p>效果图：</p><p><img src=\"/static/upload/pics/6/17/2016juU9Mucv_I0XVGxZQ7AXm6mi.png\" alt=\"906897-20160616221947870-980658939\" style=\"max-width:100%;\"><br></p><p>2、对齐文本框和旁边的图像按钮</p><p>一个文本框旁边一个按钮是很经常用到的网页内容，比如搜索框等等，而如果旁边的按钮使用图像的话，他们竖直方向就很不容易对齐，即使使用 vertical-align、padding和margin等都不行（特别是在IE中，Firefox中使用vertical-align还可以）。</p><p>“简单案例3”：&nbsp;</p><pre>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n &lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"Generator\" content=\"EditPlus®\"&gt;\n  &lt;title&gt;搜索框&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n &lt;form&gt; \n &lt;input type=\"text\" name=\"foo\" value=\"Test Field\"/&gt;\n &lt;input type=\"image\" src=\"按钮.png\" /&gt;\n &lt;/form&gt; \n &lt;/body&gt;\n&lt;/html&gt;</pre><p>效果图：</p><p><img src=\"/static/upload/pics/6/17/2016CM_VrUFhjLMiI3qEI7-1gefT.png\" alt=\"906897-20160616232252417-1607516364\" style=\"max-width:100%;\"><br></p><p>上图中完全不对称，解决方案非常简单，只要给图片来个绝对定位，上述代码修改为：</p><pre>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n &lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"Generator\" content=\"EditPlus®\"&gt;\n  &lt;title&gt;搜索框&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n &lt;form&gt; &lt;input type=\"text\" name=\"foo\" value=\"Test Field\"/&gt;\n &lt;input type=\"image\" src=\"搜索框.png\" style=\"position:absolute\"/&gt;\n &lt;/form&gt;   \n &lt;/body&gt;\n&lt;/html&gt;</pre><p>效果图：</p><p><img src=\"/static/upload/pics/6/17/2016EhixkAOQIOyrhcH2DTBmqewJ.png\" alt=\"906897-20160616233135635-1798717909\" style=\"max-width:100%;\"><br></p><p>到这里，在竖直方向经对齐得很好了，水平方向上；在Firefox和IE中，还略有区别，在Firefox中二者紧靠在一起，在IE中，二者之间有一点点间隔。</p><p><br></p>', '', '前端汇', '2017-06-18 10:36:31', '81', '0', '1', '0', '5', '', '0', '1', '', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('17', '如何提升我的HTML&CSS技术，编写有结构的代码', '', '<h3>No1.CSS展现和组织</h3><p>1.CSS结构化</p><p>（1）比较经典的样式架构：我们经常看到的web系统样式文件一般都只包含index.css或者base.css，但在实际开发过程中我们应该尽量按模块分组CSS样式，把同类的样式放到一个模块下。虽然模块化后增加了很多css文件，但当我们发布版本的时候，可以把所有的css文件压缩到一个css文件中，这样可提升页面的加载速度。下面是一个比较经典的CSS样式架构：</p><pre># Base //基础样式\n– normalize.css  //标准化样式\n– layout.css  //流布局样式\n– typography.css  //段落样式\n\n# Components //组件样式\n– alerts.css \n– buttons.css\n– forms.css\n– list.css\n– nav.css\n– tables.css\n\n# Modules 模块样式\n– aside.css //边栏样式\n– footer.css //底部样式\n– header.css //头部样式</pre>\n<p>（2）模块化CSS架构：包含Base、Layout、Module、State、Theme模块。每个模块的意义如下所示：</p>\n<pre># Base（核心元素style，覆盖body、form等默认样式）\n# Layout（区别不同元素的size和grid样式）\n# Module（个别的特别页面样式）\n# State（基于各种事件，提供不同的状态样式，例如:hover等）\n# Theme（基于skin、look、feel的样式）</pre>\n<p>2.如何提升页面加载速度</p>\n<p>（1）选择器写法：由于浏览器会渲染CSS样式名称路径上的每一个选择器，所以应该保持简短的选择器路径，减少渲染，提升页面加载速度。</p><p>（2）减小或压缩文件：在文件通过http协议传输时，可通过gzip方式压缩html、css以及js文件，缩减流量。不同的http服务器都提供了gzip压缩传输。</p><p>（3）减少HTTP请求-减少文件数量：把相似的文件结合成一个文件，例如把多个CSS文件压缩成一个CSS文件、把多个JS文件压缩成一个JS文件，这样每次只用发送一次http请求。</p><p>（4）减少HTTP请求-在正确的位置加载文件：CSS文件应该放在head的开头加载，JS文件应该放在页面的最后位置（body关闭标示&lt;/body&gt;之前加载）。这是因为在加载CSS文件的同时可加载剩下的页面，而加载JS文件时会导致页面加载阻塞，所以最好是等页面加载完了再加载js文件，这样改善了用户感知。</p><p>（5）图片拼切：经常看到一组操作按钮，每个按钮有不同的图标，加载页面时每个图标加载都会产生一次请求。我们可以使用一个合并的图片作为多个元素的背景，然后使用background-position来定位图片的显示位置。下面的页面就实现了这样的想过：</p><pre>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;style type=\"text/css\"&gt;\n        ul {\n        margin: 0;\n        padding: 0;\n        }\n        li {\n        float: left;\n        list-style: none;\n        margin: 2px;\n        }\n        li a {\n        background: linear-gradient(#fff, #eee);\n        border: 1px solid #ccc;\n        border-radius: 3px;\n        display: block;\n        padding: 3px;\n        }\n        li a:hover {\n        border-color: #999;\n        }\n        li span {\n        background: url(\"sprite.png\") 0 0 no-repeat;\n        color: transparent;\n        display: block;\n        font: 0/0 a;\n        height: 16px;\n        width: 16px;\n        }\n        .italic {\n        background-position: -16px 0;\n        }\n        .underline {\n        background-position: -32px 0;\n        }\n        .size {\n        background-position: -48px 0;\n        }\n        .bullet {\n        background-position: -64px 0;\n        }\n        .number {\n        background-position: -80px 0;\n        }\n        .quote {\n        background-position: -96px 0;\n        }\n        .left {\n        background-position: -112px 0;\n        }\n        .center {\n        background-position: -128px 0;\n        }\n        .right {\n        background-position: -144px 0;\n        }\n    &lt;/style&gt;\n\n    &lt;script type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;&lt;span class=\"bold\"&gt;Bold Text&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;&lt;span class=\"italic\"&gt;Italicize Text&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;&lt;span class=\"underline\"&gt;Underline Text&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;&lt;span class=\"size\"&gt;Size Text&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;&lt;span class=\"bullet\"&gt;Bullet Text&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;&lt;span class=\"number\"&gt;Number Text&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;&lt;span class=\"quote\"&gt;Quote Text&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;&lt;span class=\"left\"&gt;Left Align Text&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;&lt;span class=\"center\"&gt;Center Align Text&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;&lt;span class=\"right\"&gt;Right Align Text&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre><p>展示结果如下：\n</p><h3><img src=\"/static/upload/pics/6/21/2016UgybFA4blX_i-SS1J0s6b6S1.png\" alt=\"BrqMVv\" style=\"max-width:100%;\"><br></h3><h3>No2.元素定位</h3><p>1.float浮动定位问题</p><p>（1）float经典问题：先看看代码和展示结果：</p><pre>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;style type=\"text/css\"&gt;\n        .box-set {\n            background: #eaeaed; /* 灰色  */\n            /* overflow: auto; */  /* overflow技术 */\n        }\n        .box {\n            background: #2db34a; /* 绿色 */\n            float: left;\n            margin: 1.858736059%;\n            width: 29.615861214%;\n        }\n    &lt;/style&gt;\n\n    &lt;script type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"box-set\"&gt;\n        &lt;figure class=\"box\"&gt;Box 1&lt;/figure&gt;\n        &lt;figure class=\"box\"&gt;Box 2&lt;/figure&gt;\n        &lt;figure class=\"box\"&gt;Box 3&lt;/figure&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html</pre><p>从下面的展示效果可知，父容器box-set设置的背景色并没有生效，父容器的height等于0。</p><p><img src=\"/static/upload/pics/6/21/2016vvDNuU9bWmS-rXMR2UecQ6IX.png\" alt=\"jUJzaer\" style=\"max-width:100%;\"><br></p><p>（2）解决方法：使用overflow和clearfix两个技术。</p><p>（3）解决方法-overflow：直接在box-set样式中添加属性overflow: auto,添加后就可看到父容器的背景设置生效了。但考虑兼容器，IE6还需要设置width和height。但这里遗留有其他问题，如果我们设置了其他样式，例如box-shadow样式，可能导致阴影效果溢出box-set容器。</p><p><img src=\"/static/upload/pics/6/21/2016wwUewTxJQuwx8jpY21dqOKMM.png\" alt=\"U3UjMbz\" style=\"max-width:100%;\"><br></p><p>（4）解决方法-clearfix：把页面修改成下面的代码，运行页面box-set展示正常并且也解决了IE6和7的兼容问题。需要说明的是:bofore伪类组织child的top-margin溢出，而:after伪类组织child的buttom-margin溢出。</p><pre>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;style type=\"text/css\"&gt;\n        .box-set {\n            background: #eaeaed; /* 灰色  */\n            *zoom: 1;\n        }\n\n        .box-set:before,\n        .box-set:after {\n            content: \"\";\n            display: table;\n        }\n\n        .box-set:after{\n            clear: both;\n        }\n\n        .box {\n            background: #2db34a; /* 绿色 */\n            float: left;\n            margin: 1.858736059%;\n            width: 29.615861214%;\n        }\n    &lt;/style&gt;\n\n    &lt;script type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"box-set\"&gt;\n        &lt;figure class=\"box\"&gt;Box 1&lt;/figure&gt;\n        &lt;figure class=\"box\"&gt;Box 2&lt;/figure&gt;\n        &lt;figure class=\"box\"&gt;Box 3&lt;/figure&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre><p>2.position属性</p><p>（1）position默认值：元素默认的position为static。</p><p>（2）position的relative值：相对于元素position属性值为static的偏移位置。relative不会导致其他元素的位置改变。</p><p>（3）position的absolute值：元素从常规的流文档中溢出，元素的位置是相对于最近的position为relative或者absolute值得父元素偏移位置，找不到则元素的位置相对于body偏移。</p><p>（4）position的fixed值：元素相对于浏览器视窗的偏移位置，不会随着浏览器的滚动条滚动而改变位置。IE6不支持该属性。</p><p>（5）fixed实现header和foot停靠功能：下面这个例子实现footer一致停靠在浏览器的最下面，不会随着滚动条位置的变化而变化。</p><pre>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;style type=\"text/css\"&gt;\n    body {\n        background: #eaeaed;\n    }\n    footer {\n        height: 100px;\n        background: #2db34a;\n        bottom: 0;\n        left: 0;\n        position: fixed;\n        right: 0;\n    }\n    &lt;/style&gt;\n\n    &lt;script type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;footer&gt;Fixed Footer&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre><p>3.z-index属性</p><p>（1）默认z-index位置：越排在DOM节点的靠top位置就越在z方向的下边。</p><p>（2）前置条件：如果要设置z-index属性，必须设置元素的position属性为relative、aboslute或者fixed。例如下面的代码分别按层次停靠元素：</p><pre><span><span>&lt;!DOCTYPE HTML&gt;</span></span>\n<span><span>&lt;<span><span>html</span></span>&gt;</span></span>\n<span><span>&lt;<span><span>head</span></span>&gt;</span></span>\n    <span><span>&lt;<span><span>meta</span></span> <span><span>charset</span></span>=<span><span>\"utf-8\"</span></span>&gt;</span></span>\n    <span><span>&lt;<span><span>style</span></span> <span><span>type</span></span>=<span><span>\"text/css\"</span></span>&gt;</span></span><span><span>\n        <span><span>.box-set</span></span> <span><span>{\n            <span><span><span><span>background</span></span></span><span>:<span><span> <span><span>#eaeaed</span></span>;</span></span></span><span></span></span>\n            <span><span><span><span>height</span></span></span><span>:<span><span> <span><span>160</span></span>px;</span></span></span><span></span></span>\n            <span><span><span><span>position</span></span></span><span>:<span><span> relative;</span></span></span><span></span></span>\n        <span><span>}</span></span></span><span></span></span>\n        <span><span>.box</span></span> <span><span>{\n            <span><span><span><span>background</span></span></span><span>:<span><span> <span><span>#2db34a</span></span>;</span></span></span><span></span></span>\n            <span><span><span><span>border</span></span></span><span>:<span><span> <span><span>2</span></span>px solid <span><span>#ff7b29</span></span>;</span></span></span><span></span></span>\n            <span><span><span><span>position</span></span></span><span>:<span><span> absolute;</span></span></span><span></span></span>\n        <span><span>}</span></span></span><span></span></span>\n        <span><span>.box-1</span></span> <span><span>{\n            <span><span><span><span>left</span></span></span><span>:<span><span> <span><span>10</span></span>px;</span></span></span><span></span></span>\n            <span><span><span><span>top</span></span></span><span>:<span><span> <span><span>10</span></span>px;</span></span></span><span></span></span>\n        <span><span>}</span></span></span><span></span></span>\n        <span><span>.box-2</span></span> <span><span>{\n            <span><span><span><span>bottom</span></span></span><span>:<span><span> <span><span>10</span></span>px;</span></span></span><span></span></span>\n            <span><span><span><span>left</span></span></span><span>:<span><span> <span><span>70</span></span>px;</span></span></span><span></span></span>\n            <span><span><span><span>z-index</span></span></span><span>:<span><span> <span><span>3</span></span>;</span></span></span><span></span></span>\n        <span><span>}</span></span></span><span></span></span>\n        <span><span>.box-3</span></span> <span><span>{\n            <span><span><span><span>left</span></span></span><span>:<span><span> <span><span>130</span></span>px;</span></span></span><span></span></span>\n            <span><span><span><span>top</span></span></span><span>:<span><span> <span><span>10</span></span>px;</span></span></span><span></span></span>\n            <span><span><span><span>z-index</span></span></span><span>:<span><span> <span><span>2</span></span>;</span></span></span><span></span></span>\n        <span><span>}</span></span></span><span></span></span>\n        <span><span>.box-4</span></span> <span><span>{\n            <span><span><span><span>bottom</span></span></span><span>:<span><span> <span><span>10</span></span>px;</span></span></span><span></span></span>\n            <span><span><span><span>left</span></span></span><span>:<span><span> <span><span>190</span></span>px;</span></span></span><span></span></span>\n            <span><span><span><span>z-index</span></span></span><span>:<span><span> <span><span>1</span></span>;</span></span></span><span></span></span>\n        <span><span>}</span></span></span><span></span></span>\n    </span></span><span><span>&lt;/<span><span>style</span></span>&gt;</span></span>\n<span><span>&lt;/<span><span>head</span></span>&gt;</span></span>\n<span><span>&lt;<span><span>body</span></span>&gt;</span></span>\n    <span><span>&lt;<span><span>div</span></span> <span><span>class</span></span>=<span><span>\"box-set\"</span></span>&gt;</span></span>\n        <span><span>&lt;<span><span>figure</span></span> <span><span>class</span></span>=<span><span>\"box box-1\"</span></span>&gt;</span></span>Box 1<span><span>&lt;/<span><span>figure</span></span>&gt;</span></span>\n        <span><span>&lt;<span><span>figure</span></span> <span><span>class</span></span>=<span><span>\"box box-2\"</span></span>&gt;</span></span>Box 2<span><span>&lt;/<span><span>figure</span></span>&gt;</span></span>\n        <span><span>&lt;<span><span>figure</span></span> <span><span>class</span></span>=<span><span>\"box box-3\"</span></span>&gt;</span></span>Box 3<span><span>&lt;/<span><span>figure</span></span>&gt;</span></span>\n        <span><span>&lt;<span><span>figure</span></span> <span><span>class</span></span>=<span><span>\"box box-4\"</span></span>&gt;</span></span>Box 4<span><span>&lt;/<span><span>figure</span></span>&gt;</span></span>\n    <span><span>&lt;/<span><span>div</span></span>&gt;</span></span>\n<span><span>&lt;/<span><span>body</span></span>&gt;</span></span>\n<span><span>&lt;/<span><span>html</span></span>&gt;</span></span></pre><p><br></p>', '', '前端汇', '2017-06-21 19:17:57', '71', '0', '1', '0', '8', '', '1', '1', '', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('18', 'thinkjs性能优化之nginx配置', '网站上线了，发现慢点够可以，特别是图片及静态资源加载，是什么原因？\nnodejs的弊端，不太适合处理静态资源，配合nginx的反向代理，速度能提升不少。\n1、gzip默认没有开启\n2、node应用的静态资源，交给nginx处理，用nginx转发，实现动静态分离\n3、开启静态资源缓存', '<h3 id=\"thinkjs-nginx-\"><span style=\"line-height: 1.8; font-size: 14px;\">网站上线了，发现慢点够可以，特别是图片及静态资源加载，是什么原因？</span><br></h3>\n<p>nodejs的弊端，不太适合处理静态资源，配合nginx的反向代理，速度能提升不少。<br>1、gzip默认没有开启<br>2、node应用的静态资源，交给nginx处理，用nginx转发，实现动静态分离<br>3、开启静态资源缓存</p>\n<h4 id=\"-nginx-gzip\">一、nginx配置开启gzip</h4>\n<pre><code class=\"lang-javascript\">     gzip_vary on;\n     gzip_proxied any;\n     gzip_comp_level 6;\n     gzip_buffers 16 8k;\n     gzip_http_version 1.1;\n     gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;\n     gzip on;\n     gzip_disable \"msie6\";\n</code></pre>\n<h4 id=\"-node-\">二、node应用动静态资源分离</h4>\n<p>1、可以考虑用个二级域名，如<a href=\"http://static.jsout.com\">http://static.jsout.com</a><br>2、如果不用二级域名，也可以通过nginx配置目录达到目的</p>\n<pre><code>server {\n    ...\n    listen 80;\n    server_name www.jsout.com jsout.com;\n    root /var/www/jsout/liblog/www;  //指定静态资源根目录\n    set $node_port 8361;\n    ...\n</code></pre><h4 id=\"-\">三、开启缓存</h4>\n<pre><code>server {\n    ...\n    location ~ /static/ {\n        etag         on;\n        expires      max;\n    }\n    ...\n    }\n</code></pre><h4 id=\"-thinkjs-nodejs-nginx-\">四、附完整的基于thinkjs的nodejs应用nginx配置(以本站为例)</h4>\n<pre><code>worker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp{\n   include       mime.types;\n\n     default_type  application/octet-stream;\n\n     sendfile on;\n     tcp_nopush on;\n     tcp_nodelay on;\n\n     keepalive_timeout 60;\n\n     client_header_buffer_size 4k;\n\n     open_file_cache max=51200 inactive=20s;\n     open_file_cache_valid 30s;\n     open_file_cache_min_uses 1;\n\n     types_hash_max_size 2048;\n     client_max_body_size 10m;\n\n     gzip_vary on;\n     gzip_proxied any;\n     gzip_comp_level 6;\n     gzip_buffers 16 8k;\n     gzip_http_version 1.1;\n     gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;\n     gzip on;\n     gzip_disable \"msie6\";\n\nserver {\n    listen 80;\n    server_name www.jsout.com jsout.com;\n    root /var/www/jsout/liblog/www;\n    set $node_port 8361;\n\n    index index.js index.html index.htm;\n    if ( -f $request_filename/index.html ){\n        rewrite (.*) $1/index.html break;\n    }\n    if ( !-f $request_filename ){\n        rewrite (.*) /index.js;\n    }\n    location = /index.js {\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_pass http://127.0.0.1:$node_port$request_uri;\n        proxy_redirect off;\n    }\n\n    location = /production.js {\n        deny all;\n    }\n\n    location = /testing.js {\n        deny all;\n    }\n\n    location ~ /static/ {\n        etag         on;\n        expires      max;\n    }\n}   \n}\n</code></pre>', 'static/upload/pics/6/23/2016eyKkYFPcTUTEKCsjdKSe_fzN.jpg', '前端汇', '2017-06-23 14:10:07', '558', '1', '1', '0', '2', 'nginx,thinkjs,nodejs', '1', '1', '', '3', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('19', '国产优秀node.js框架thinkjs介绍', 'thinkjs是国产优秀node.js框架，是一款使用 ES6/7 特性全新开发的 Node.js MVC 框架，使用 ES7 中 async/await，或者 ES6 中的 */yield 特性彻底解决了 Node.js 中异步嵌套的问题。同时吸收了国内外众多框架的设计理念和思想，让开发 Node.js 项目更加简单、高效。', '<blockquote>\n<p>　　thinkjs是国产优秀node.js框架，是一款使用 ES6/7 特性全新开发的 Node.js MVC 框架，使用 ES7 中 async/await，或者 ES6 中的 */yield 特性彻底解决了 Node.js 中异步嵌套的问题。同时吸收了国内外众多框架的设计理念和思想，让开发 Node.js 项目更加简单、高效。<br>　　使用 ES6/7 特性来开发项目可以大大提高开发效率，是趋势所在。并且新版的 Node.js 对 ES6 特性也有了较好的支持，即使有些特性还没有支持，也可以借助 Babel 编译来支持。</p>\n</blockquote>\n<p>\n</p><h4 id=\"-\">特性</h4><p>\n使用 ES6/7 特性来开发项目</p><br><p>借助 Babel 编译，可以在项目中大胆使用 ES6/7 所有的特性，无需担心哪些特性当前版本不支持。尤其是使用 async/await 或者 */yield 来解决异步回调的问题。</p><p></p>\n<pre><code>//user controller, home/controller/user.js\nexport default class extends think.controller.base {\n  //login action\n  async loginAction(self){\n    //如果是get请求，直接显示登录页面\n    if(this.isGet()){\n      return this.display();\n    }\n    //这里可以通过post方法获取所有的数据，数据已经在logic里做了校验\n    let data = this.post();\n    let md5 = think.md5(\"think_\" + data.pwd);\n    //用户名和加密后的密码去匹配数据库中对于的条目\n    let result = await this.model(\"user\").where({name: data.name, pwd: md5}).find();\n    //如果未匹配到任何数据，表示用户名或者密码错误\n    if(think.isEmpty(result)){\n      return this.fail(\"login fail\");\n    }\n    //获取到用户信息后，将用户信息写入session\n    await this.session(\"userInfo\", result);\n    return this.success();\n  }\n}\n</code></pre><p>上面的代码我们使用了 ES6 里的 class, export, let 以及 ES7 里的 async/await 等特性，虽然查询数据库和写入 Session 都是异步操作，但借助 async/await，代码都是同步书写的。最后使用 Babel 进行编译，就可以稳定运行在 Node.js 的环境中了。</p>\n<h4 id=\"-typescript\">支持 TypeScript</h4>\n<p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，向这个语言添加了可选的静态类型，在大型项目里非常有用。</p>\n<p>ThinkJS 2.1 开始支持了创建 TypeScript 类型的项目，并且开发时会自动编译、自动更新，无需手工编译等复杂的操作。具体请见这里。</p>\n<h4 id=\"-\">断点调试</h4>\n<p>从 ThinkJS 2.2.0 版本开始，支持对 ES2015+ 和 TypeScript 项目的断点调试，并且报错信息也会定位到源代码下，这样可以给开发和调试带来巨大的便利，具体请见断点调试。</p>\n<h4 id=\"-\">支持多种项目结构和多种项目环境</h4>\n<p>项目支持单模块模式、普通模式、分模块模式等多种项目结构，可以满足各种项目复杂度的开发。</p>\n<p>默认支持 development，testing 和 prodution 3 种项目环境，可以在不同的项目环境下进行不同的配置，满足在不同环境下的配置需求，同时还可以基于项目需要进行扩展。</p>\n<h4 id=\"-\">支持丰富的数据库</h4>\n<p>ThinkJS 支持 mysql，mongodb，sqlite 等常见的数据库，并且封装了很多操作数据库的接口，无需手动拼接 SQL 语句，还可以自动防止 SQL 注入等安全漏洞。同时支持事务、关联模型等高级功能。</p>\n<h4 id=\"-\">代码自动更新</h4>\n<p>ThinkJS 内置了一套代码自动更新的机制，文件修改后立即生效，不用重启 Node.js 服务，也不用借助第三方模块。</p>\n<h4 id=\"-rest-\">自动创建 REST 接口</h4>\n<p>使用 thinkjs 命令可以自动创建 REST 接口，不用写任何的代码即可完成 REST API 的开发。如果想在 REST 接口中过滤字段或者进行权限校验，也很方便处理。</p>\n<h4 id=\"-websocket-\">支持多种 WebSocket 库</h4>\n<p>ThinkJS 支持 socket.io，sockjs 等常见的 WebSocket 库，并且对这些库进行包装，抹平各个库之间接口调用上的差异，给开发者一致的体验。</p>\n<h4 id=\"-\">丰富的测试用例</h4>\n<p>ThinkJS 含有 1500+ 的测试用例，代码覆盖率达到 95% ，每一次修改都有对应的测试用例来保障框架功能的稳定。</p>\n<h4 id=\"-\">支持命令行调用执行定时任务</h4>\n<p>ThinkJS 里的 Action 除了可以响应用户的请求，同时支持在命令行下访问，借助这套机制就可以很方便的执行定时任务。</p>\n<h4 id=\"hook-middleware\">Hook 和 Middleware</h4>\n<p>ThinkJS 使用 Hook 和 Middleware 机制，可以灵活的对访问请求进行拦截处理。</p>\n<p>详细的日志</p>\n<p>ThinkJS 内置了详细的日志功能，可以很方便的查看各种日志，方便追查问题。</p>\n<p>HTTP 请求日志</p>\n<pre><code>[2015-10-12 14:10:03] [HTTP] GET /favicon.ico 200 5ms\n[2015-10-12 14:10:11] [HTTP] GET /zh-cn/doc.html 200 11ms\n[2015-10-12 14:10:11] [HTTP] GET /static/css/reset.css 200 3ms\n</code></pre><p>Socket 连接日志</p>\n<pre><code>[2015-10-12 14:13:54] [SOCKET] Connect mysql with mysql://root:root@127.0.0.1:3306\n</code></pre><p>错误日志</p>\n<pre><code>[2015-10-12 14:15:32] [Error] Error: ER_ACCESS_DENIED_ERROR: Access denied for user \"root3\"@\"localhost\" (using password: YES)\n[2015-10-12 14:16:12] [Error] Error: Address already in use, port:8360. http://www.thinkjs.org/doc/error.html#EADDRINUSE\n</code></pre><h4 id=\"-\">丰富的路由机制</h4>\n<p>ThinkJS 支持正则路由、规则路由、静态路由等多种路由机制，并且可以基于模块来设置。可以让 URL 更加简洁的同时又不丢失性能。</p>\n<h4 id=\"-\">支持国际化和多主题</h4>\n<p>ThinkJS 使用很简单的方法就可以支持国际化和多主题等功能。</p>\n<h3 id=\"-\">与其他框架的对比</h3>\n<h4 id=\"-express-koa-\">与 express/koa 对比</h4>\n<p>express/koa 是 2 个比较简单的框架，框架本身提供的功能比较简单，项目中需要借助大量的第三方插件才能完成项目的开发，所以灵活度比较高。但使用很多第三方组件一方面提高了项目的复杂度，另一方面第三方插件质量参差不齐，也会带来内存泄漏等风险。</p>\n<p>koa 1.x 使用 ES6 里的 <em>/yield 解决了异步回调的问题，但 </em>/yield 只会是个过渡解决方案，会被 ES7 里的 async/await 所替代。</p>\n<p>而 ThinkJS 提供了整套解决方案，每个功能都经过了严格的性能和内存泄漏等方面的测试，并且在项目中可以直接使用 ES6/7 所有的特性。</p>\n<h4 id=\"-sails-\">与 sails 对比</h4>\n<p>sails 也是一个提供整套解决方案的 Node.js 框架，对数据库、REST API、安全方面也很多封装，使用起来比较方便。</p>\n<p>但 sails 对异步回调的问题还没有优化，还是使用 callback 的方式，给开发带来很大的不便，导致项目中无法较好的使用 ES6/7 特性。</p>\n<h4 id=\"thinkjs-\">ThinkJS 的不足</h4>\n<p>上面说了很多 ThinkJS 的优点，当然 ThinkJS 也有很多的不足。如：</p>\n<p>框架还比较新，缺少社区等方面的支持<br>还没有经过超大型项目的检验</p>\n<h4 id=\"-\">性能对比</h4>\n<p>评价一个框架是否出色，一方面看支持的功能，另一方面也要看性能。虽然 ThinkJS 更适合大型项目，功能和复杂度远远超过 Express 和 Koa，但性能上并不比 Express 和 Koa 逊色多少，具体的测试数据请见下图。<br><img src=\"/static/upload/pics/6/23/2016WGIMOcWAXpLhAvofcPGvfn97.webp\" alt=\"11\" style=\"max-width:100%;\"><br></p>\n<p>注：以上数据使用分布式压力测试系统测试。</p>\n<p>从上图中测试数据可以看到，虽然 ThinkJS 比 Express 和 Koa 性能要差一些，但差别并不大。ThinkJS 和 Sails.js 都更符合大型项目，但 ThinkJS 的性能要比 Sails.js 高很多。</p>\n<p>具体测试代码请见：<a href=\"https://github.com/thinkjs-team/thinkjs-performance-test，可以下载代码在本机测试，如果使用\">https://github.com/thinkjs-team/thinkjs-performance-test，可以下载代码在本机测试，如果使用</a> ab 测试工具，请注意该工具在 Mac 系统下很不稳定，多次测试结果会相差很大。</p><p><br></p>', '', '前端汇', '2017-06-23 14:37:55', '251', '0', '1', '0', '2', 'thinkjs,nodejs', '1', '1', 'https://www.thinkjs.org/zh-cn/doc/index.html', '3', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('20', 'html5的video元素学习手札', '', '<p>为了监控移动端视频播放的情况，研究了一下 html5&nbsp;&lt;video&gt;&nbsp;标签的属性与事件触发，及其在各系统和各个浏览器的兼容情况</p><h3>属性与事件</h3><p>理解清楚属性和事件，才能更好的使用 video ，达到预期的效果，更好的检测视频播放的状况来做出分析和调整，这里仅列举了解到且大致理解的，更多相关后续补充</p><h4>属性</h4><p>&lt;video&gt;&nbsp;标签嵌入到HTML文档中</p><pre><span><span><span>&lt;<span><span>video</span></span> <span><span>src</span></span>=<span><span>\"\"</span></span> <span><span>type</span></span>=<span><span>\"video/mp4\"</span></span> <span><span>autoplay</span></span>=<span><span>\"autoplay\"</span></span> <span><span>controls</span></span>=<span><span>\"\"</span></span> <span><span>poster</span></span>=<span><span>\"\"</span></span> <span><span>preload</span></span>=<span><span>\"none\"</span></span>&gt;</span></span><span><span>&lt;/<span><span>video</span></span>&gt;</span></span></span></pre><p>初始化&nbsp;&lt;video&gt;&nbsp;标签时主要设置的属性</p><ol><li>src：要嵌到页面的视频的URL。可选；你也可以使用video块内的&nbsp;&lt;source&gt;&nbsp;元素来指定需要嵌到页面的视频</li><li>autoplay：布尔属性；指定后，视频会马上自动开始播放，不会停下来等着数据载入结束</li><li>controls：加上这个属性，Gecko 会提供用户控制，允许用户控制视频的播放，包括音量，跨帧，暂停/恢复播放</li><li>poster：一个海报帧的URL，用于在用户播放或者跳帧之前展示。如果属性未指定，那么在第一帧可用之前什么都不会展示；之后第一帧就像海报帧一样展示</li><li>preload：该枚举属性旨在告诉浏览器作者认为达到最佳的用户体验的方式是什么。可能是下列值之一：none：提示作者认为用户不需要查看该视频，服务器也想要最小化访问流量；换句话说就是提示浏览器该视频不需要缓存metadata：提示尽管作者认为用户不需要查看该视频，不过抓取元数据（比如：长度）还是很合理的auto：用户需要这个视频优先加载；换句话说就是提示：如果需要的话，可以下载整个视频，即使用户并不一定会用它空字符串：也就代指 auto 值</li><li>buffered：这个属性可以读取到哪段时间范围内的媒体被缓存了。该属性包含了一个 TimeRanges 对象</li><li>played：一个 TimeRanges 对象，指明了视频已经播放的所有范围</li><li>loop：布尔属性；指定后，会在视频结尾的地方，自动返回视频开始的地方</li><li>muted：布尔属性，指明了视频里的音频的默认设置。设置后，音频会初始化为静音。默认值是 false ,意味着视频播放的时候音频也会播放</li><li>height：视频展示区域的高度，单位是 CSS 像素</li><li>width：视频显示区域的宽度，单位是 CSS 像素</li><li>crossorigin：该枚举属性指明抓取相关图片是否必须用到CORS（跨域资源共享）。 支持CORS的资源 可在&nbsp;&lt;canvas&gt;&nbsp;元素中被重用，而不会被污染。允许的值如下：anonymous：跨域请求会被执行，但是不发送凭证。use-credentials：跨域请求A cross-origin request会被执行，且凭证会被发送。</li></ol><p>TimeRanges 对象表示事件段，比如，视频快进的时间段，有一个 length 属性，表示时间段的个数，有两个方法 start() 和 end() ，分别返回时间段开始的时间点和结束的时间点</p><p>事件交互中主要使用的属性</p><ol><li>currentTime：播放进行到的时间点，单位为秒</li><li>duration：视频总时长，单位为秒</li></ol><h4>事件</h4><p>还有更多事件api，这里只列举了试过的</p><ol><li>playing：在媒体开始播放时触发（不论是初次播放、在暂停后恢复、或是在结束后重新开始）</li><li>ended：播放结束时触发</li><li>pause：播放暂停时触发</li><li>waiting：在一个待执行的操作（如回放）因等待另一个操作（如跳跃或下载）被延迟时触发</li><li>timeupdate：元素的 currentTime 属性表示的时间已经改变</li><li>seeking： 在跳跃操作开始时触发</li><li>seeked：在跳跃操作完成时触发</li><li>error：在发生错误时触发。元素的 error 属性会包含更多信息</li><li>loadeddata： 媒体的第一帧已经加载完毕</li></ol><h4>监控指标</h4><ol><li>播放：start：1（首次播放）2（重播）</li><li>播放：end：1</li><li>播放暂停：pause：1</li><li>播放中止：pause：1</li><li>快进/快退：Jump：1（快进）2（快退）</li><li>错误：fail： 1（取回过程）；2（当下载时发生错误）；3（当解码时发生错误）；4（不支持音频/视频）</li><li>播放等待： wait：1</li><li>播放时长：totaltime：秒（包含重播）</li></ol><p>其中1，2，3，5，6，7都很好监控，对相应事件进行监听就可以了，这里主要讲下是怎么监控播放中止和播放时长的</p><h4>播放中止</h4><p>具体场景是移动端浏览器切换tab导致的隐藏和用户按home键退出浏览器</p><p>html5 提供了 Page Visibility API 来支持监听tab切换，与之对应新增了</p><ul><li>document.hidden 属性，它显示页面是否为用户当前观看的页面，值为 ture 或 false</li><li>document.visibilityState 属性， visible 表示页面被展现， hidden 表示页面未被展现， prerender 表示页面在重新生成，用户不可见</li><li>visibilitychange 事件，监听页面在 visible 与 hidden 之间的切换</li></ul><p>visibilitychange事件的具体使用</p><pre><span><span><span>var</span></span> hidden;</span>\n<span><span><span>var</span></span> visibilityChange;</span>\n<span><span><span>if</span></span> (<span><span>typeof</span></span> <span>document</span>.hidden !== <span><span>\'undefined\'</span></span>) {</span>\n<span>    hidden = <span><span>\'hidden\'</span></span>;</span>\n<span>    visibilityChange = <span><span>\'visibilitychange\'</span></span>;</span>\n<span>} <span><span>else</span></span> <span><span>if</span></span> (<span><span>typeof</span></span> <span>document</span>.mozHidden !== <span><span>\'undefined\'</span></span>) {</span>\n<span>    hidden = <span><span>\'mozHidden\'</span></span>;</span>\n<span>    visibilityChange = <span><span>\'mozvisibilitychange\'</span></span>;</span>\n<span>} <span><span>else</span></span> <span><span>if</span></span> (<span><span>typeof</span></span> <span>document</span>.msHidden !== <span><span>\'undefined\'</span></span>) {</span>\n<span>    hidden = <span><span>\'msHidden\'</span></span>;</span>\n<span>    visibilityChange = <span><span>\'msvisibilitychange\'</span></span>;</span>\n<span>} <span><span>else</span></span> <span><span>if</span></span> (<span><span>typeof</span></span> <span>document</span>.webkitHidden !== <span><span>\'undefined\'</span></span>) {</span>\n<span>    hidden = <span><span>\'webkitHidden\'</span></span>;</span>\n<span>    visibilityChange = <span><span>\'webkitvisibilitychange\'</span></span>;</span>\n<span>}</span>\n<span></span>\n<span><span>document</span>.addEventListener(visibilityChange, <span><span><span><span>function</span></span></span><span> <span>(<span></span>)</span> </span></span><span>{</span></span>\n<span>    <span><span>if</span></span> (<span>document</span>[hidden]) {</span>\n<span>        <span><span>// do something...</span></span></span>\n<span>    }</span>\n<span>}, <span><span>false</span></span>);</span></pre><p>关于 visibilitychange 事件的兼容性，测试了两部手机，华为mt7 和 iphone6 ，兼容情况如下</p><p>华为mt7</p><ul><li>qq浏览器：tab切换触发，home键退出触发</li><li>uc浏览器：tab切换触发，home键退出触发（退出后进程继续在跑，其它浏览器进程被暂停）</li><li>手机百度：tab切换不触发，home键退出不触发</li></ul><p>iphone6</p><ul><li>uc浏览器：tab切换触发，home键不触发</li><li>百度浏览器：同上</li><li>手机百度：同上</li><li>Safari：tab切换触发，home键退出触发</li></ul><p>由于兼容问题，且各系统的各个浏览器基本在tab切换触发，home键退出触发的情况下触发pause事件，所以播放中止的日志依旧打印pause，如果后面没有继续操作则把这个pause日志当做播放中止</p><p>页面刷新和浏览器tab被关闭的时候会触发 window.onunload ，也可以做为补充场景</p><h4>播放时长</h4><p>起初的思路是获取到开始播放到停止播放的事件差，记下时间点使用了 currentTime 属性，主要实现在两方面</p><ol><li>playing 时记下时间点startT， pause 和 ended 和 seeked 时记下时间点endT，endT - startT 即播放时长</li><li>seeked 时记下时间点startT， seeking 时记下时间点endT，endT - startT 即播放时长</li></ol><p>这个思路在 ios 下是看似没有问题的，但是 android 下确实不行，主要原因是 seeking 事件的监听没理解到位，seeking 事件触发点是用户目标跳跃到的位置，比如：视频播放在 0 秒点时，用户点击到了 60 秒点处，这是取到的 currentTime 就是 60 ，本来以为会是 0 ， ios 下看似没有问题是因为它的全屏播放模式下，进度条是要拖拽的，不能直接点击到某个点</p><p>于是，使用 timeupdate 来获取 seeking 触发前的时间点，就可以获取到相对准确的播放时长了</p><h4>error事件</h4><p>监听 error 事件会返回 error.code 来标识错误类型：</p><ul><li>1 = MEDIA_ERR_ABORTED - 取回过程被用户中止</li><li>2 = MEDIA_ERR_NETWORK - 当下载时发生错误</li><li>3 = MEDIA_ERR_DECODE - 当解码时发生错误</li><li>4 = MEDIA_ERR_SRC_NOT_SUPPORTED - 不支持音频/视频</li></ul><p>官网的解释是：</p><ul><li>MEDIA_ERR_ABORTED (numeric value 1)The fetching process for the media resource was aborted by the user agent at the user’s request.在取回资源过程中，被用户的操作中止（您中止了视频播放）</li><li>MEDIA_ERR_NETWORK (numeric value 2)A network error of some description caused the user agent to stop fetching the media resource, after the resource was established to be usable.因为一些网络问题导致的用户无法取回资源，前提是资源被确定为可用（网络问题导致视频下载中断）</li><li>MEDIA_ERR_DECODE (numeric value 3)An error of some description occurred while decoding the media resource, after the resource was established to be usable.解码资源时产生的问题，前提是资源被确定为可用（『a corruption problem（翻译不过来）』 或者 所使用的视频功能的浏览器不支持）</li><li>MEDIA_ERR_SRC_NOT_SUPPORTED (numeric value 4)The media resource indicated by the src attribute was not suitable.由src属性所指定的媒体资源不适合（视频无法加载，或因为服务器或网络故障，或格式不支持）</li></ul><p>总结一下就是，1、2、3是在视频可用情况下因为外在因素导致的播放失败，4是可能因为资源本身有问题导致的播放失败（存在资源可播放也打印 error.code 为4的情况）</p><h4>遇到的一些状况</h4><ul><li>没有&nbsp;&lt;source&gt;&nbsp;元素且 src 属性为空时播放会触发 error 事件，状态码为4解决：忽略 src 属性为空时的报错</li><li>播放结束会触发暂停解决：声明状态变量，随着具体操作更新状态，播放状态下才会执行暂停操作，结束状态不执行</li><li>播放结束后重播会触发 seeking 和 seeked ，一般浏览器触发一次， android 下uc浏览器触发多次解决：同上</li><li>一些浏览器监听不到 seeking 和 seeked解决：在 timeupdate 里来分析猜测用户行为</li><li>一些浏览器存在多次连续触发 seeking + seeked 的情况解决：时间戳 + 节流 等待最后一次</li><li>seeking 和 seeked 与 timeupdate 需要保证不会同时执行解决：监听到 seeking 触发，就不再执行 timeupdate 模拟走过的坑：我曾设想在播放时直接判断出是否支持 seeking ，方式是播放时设置 currentTime 为 0.01 ，然后检测 seeking 属性，后来发现浏览器在这样设置后的 seeking 属性值不一致</li><li>个别浏览器播放状态下不触发 seeking 和 seeked ，但是在重播的时候触发解决：声明状态变量，随着具体操作更新状态，结束状态不监听 seeking 触发</li></ul><p></p><p>提示一下，遇到浏览器表现不同的情况，千万不要尝试对各个浏览器适配 hack ，没法根本上解决问题，而我的做法是声明状态变量，随着具体操作更新状态，在正确的状态下才进行操作，通过播放状态来规范事件的触发时机。</p><p><br></p>', '', '前端汇', '2017-06-28 10:14:27', '92', '0', '1', '0', '8', '', '0', '1', 'html', '1', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('21', '代码规范', '', '<h3 id=\"-\">文件路径必须小写</h3>\n<p>很多时候是在 <code>Windows</code> 或者 <code>Mac OSX</code> 系统下开发项目，但一般都部署 <code>Linux</code> 系统下。</p>\n<p>在 <code>Windows</code> 和 <code>Mac</code> 系统下，文件路径是不区分大小写的，而 <code>Linux</code> 下是区分大小写的。这样很容易出现文件大小写的问题导致开发环境下是好的，但上线后却报错了。</p>\n<p>为了避免这种情况的发生，文件路径尽量都使用小写字符。并且在服务启动时，ThinkJS 会检测项目下文件路径，如果有大写字母则会告警，如：</p>\n<pre><code class=\"lang-text\">[2015-10-13 10:36:59] [WARNING] filepath `admin/controller/apiBase.js` has uppercases.\n</code></pre>\n<h3 id=\"-2-\">缩进使用 2 个空格</h3>\n<p>在 Node.js 环境下开发，有时候逻辑比较复杂，有各种条件判断，或者有一些异步操作，这些都会增加代码的缩进。</p>\n<p>为了不至于让缩进占用了太多的列宽，建议使用 2 个空格作为缩进。</p>\n<h3 id=\"-es6-\">使用 ES6 语法开发</h3>\n<p>ES6 中有大量的语法糖可以简化我们的代码，让代码更加简洁高效。<br>Node.js 最新版本已经较好的支持了 ES6 的语法，即使有些语法不支持，也可以通过 Babel 编译来支持。 所以是时候使用 ES6 语法来开发项目了。</p>\n<h3 id=\"-constrcutor-\">不要使用 constrcutor 方法</h3>\n<p>使用 ES6 里的 class 来创建类的时候，可以使用 <code>constrcutor</code> 方法达到类实例化的时候自动调用。如：</p>\n<pre><code class=\"lang-js\">export default class think.base {\n  constructor(){\n    ...\n  }\n}\n</code></pre>\n<p>但如果不使用 ES6 里的 class，就没有 constrcutor 方法了。</p>\n<p>为了统一处理，ThinkJS 提供了 <code>init</code> 方法来代替 <code>constrcutor</code> 方法，该方法不管是在 class 下还是动态创建类的情况下都可以做到类实例化的时候自动被调用。</p>\n<pre><code class=\"lang-js\">export default class think.base {\n  /**\n   * 初始化方法，类实例化时自动被调用\n   * @return {} []\n   */\n  init(){\n    ...\n  }\n}\n</code></pre>\n<p><code>注</code>：ThinkJS 里所有的类都会继承 <code>think.base</code> 基类。</p>\n<h3 id=\"-babel-\">使用 Babel 编译</h3>\n<p>虽然现在的 Node.js 版本已经支持了很多 ES6 的特性，但这些特性现在还只是实现了，V8 里还没有对这些特性进行优化。如：<code>*/yield</code> 等功能。</p>\n<p>所以建议使用 Babel 来编译，一方面可以使用 ES6 和 ES7 几乎所有的特性，另一方面编译后的性能也比默认支持的要高。</p>\n<h3 id=\"-async-await-yield\">使用 async/await 替代 */yield</h3>\n<p><code>*/yield</code> 是 ES6 里提出一种解决异步执行的方法，它只是一个过渡的方案，ES7 里便提出了 <code>async/await</code> 来代替它。</p>\n<p>相对 <code>async/await</code>，<code>*/yield</code> 有以下的缺陷：</p>\n<p>1、<code>*/yield</code> 调用后返回一个迭代器，需要借助第三方模块来执行。如：<code>co</code></p>\n<p>2、<code>*/yield</code> 无法和 Arrow Function 一起使用。</p>\n<p>3、<code>*/yield</code> 调用另一个 <code>*/yield</code> 时，需要使用 <code>yield *</code>，带来不便。</p>\n<p>4、目前 V8 对 <code>*/yield</code> 还没有做优化，最好也通过 Babel 来编译。</p>\n<p>所以完全可以使用 ES7 里的 <code>async/await</code> 来代替 <code>*/yield</code>，然后使用 Babel 编译来运行。</p><p><br></p>', '', '前端汇', '2017-07-04 14:42:07', '75', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', 'https://thinkjs.org/', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('22', '常见问题', '', '<h3 id=\"-es6-7-\">为什么推荐 ES6/7 语法开发项目</h3>\n<p>ES6/7 里提供了大量的新特性，这些特性会带来巨大的开发便利和效率上的提升。如：ES6 里的 <code>*/yield</code> 和 ES7 里的 <code>async/await</code> 特性解决异步回调的问题；箭头函数解决 <code>this</code> 作用域的问题；<code>class</code> 语法糖解决类继承的问题。</p>\n<p>虽然现在 Node.js 环境还没有完全支持这些新的特性，但借助 Babel 编译，可以稳定运行在现在的 Node.js 环境中。所以我们尽可以享受这些新特性带来的便利。    </p>\n<h3 id=\"-\">开发时，修改文件需要重启服务么？</h3>\n<p>默认情况下，由于 Node.js 的机制，文件修改必须重启才能生效。</p>\n<p>这种方式下给开发带来了很大的不变，ThinkJS 提供了一种文件自动更新的机制，文件修改后可以立即生效，无需重启服务。</p>\n<p>自动更新的机制会消耗一定的性能，所以默认只在 <code>development</code> 项目环境下开启。线上代码更新还是建议使用 <code>pm2</code> 模块来管理。</p>\n<h3 id=\"-\">怎么修改视图文件目录结构</h3>\n<p>默认情况下，视图文件路径为 <code>view/[module]/[controller]_[action].html</code>。其中控制器和操作之间是用 <code>_</code> 来连接的，如果想将连接符修改为 <code>/</code>，可以修改配置文件 <code>src/common/config/view.js</code>：</p>\n<pre><code class=\"lang-js\">export default {\n  file_depr: \'/\', //将控制器和操作之间的连接符修改为 /\n}\n</code></pre>\n<h3 id=\"-cluster\">如何开启 cluster</h3>\n<p>线上可以开启 cluster 功能达到利用多核 CPU 来提升性能，提高并发处理能力。</p>\n<p>可以在配置文件 <code>src/common/config/env/production.js</code> 中加入如下的配置：</p>\n<pre><code class=\"lang-js\">export default {\n  cluster_on: true //开启 cluster\n}\n</code></pre>\n<p><code>注</code>：如果使用 PM2 管理服务且开启了 cluster，那么 ThinkJS 里就无需再开启 cluster 了。</p>\n<h3 id=\"-\">修改请求超时时间</h3>\n<p>默认请求的超时时间是 120s，可以通过修改配置文件 <code>src/common/config/config.js</code> 里 <code>timeout</code> 配置值。</p>\n<pre><code class=\"lang-js\">export default {\n  timeout: 30, //将超时时间修改为 30s\n}\n</code></pre>\n<h3 id=\"-\">如何捕获异常</h3>\n<p>JS 本身是无法通过 try/catch 来捕获异步异常的，但使用 async/await 后则可以通过 try/catch 来捕获异常，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  async indexAction(){\n    try{  \n      await this.getFromAPI1();\n      await this.getFromAPI2();\n      await this.getFromAPI3();\n    }catch(err){\n      //通过 err.message 拿到具体的错误信息\n      return this.fail(err.message);\n    }\n  }\n}\n</code></pre>\n<p>上面的方式虽然可以通过 try/catch 来捕获异常，但在 catch 里并不知道异常是哪个触发的。</p>\n<p>实际项目中，经常要根据不同的错误返回不同的错误信息给用户，这时用整体的 try/catch 就不太方便了。</p>\n<p>此时可以通过单个异步接口返回特定值来判断，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  async indexAction(){\n    //忽略该接口的错误（该接口的错误不重要，可以忽略）\n    await this.getFromAPI1().catch(() =&gt; {});\n    //异常时返回特定值 false 来判断\n    let result = await this.getFromAPI2().catch(() =&gt; false);\n    if(result === false){\n      return this.fail(\'API2 ERROR\');\n    }\n  }\n}\n</code></pre>\n<p>如上面代码所述，通过返回特定值判断就可以方便的知道是哪个异步接口发生了错误，这样就可以针对不同的错误返回不同的错误信息。</p>\n<h3 id=\"-\">如何忽略异常</h3>\n<p>使用 async/await 时，如果 Promise 返回了一个 rejected Promise，那么会抛出异常。如果这个异常不重要需要忽略的话，可以通过 catch 方法返回一个 resolve Promise 来完成。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  async indexAction(){\n    //通过在 catch 里返回 undefined 来忽略异常\n    await this.getAPI().catch(() =&gt; {});\n  }\n}\n</code></pre>\n<h3 id=\"prevent_next_process\">PREVENT_NEXT_PROCESS</h3>\n<p>在调用有些方法后（如：success）后会发现有个 message 为 <code>PREVENT_NEXT_PROCESS</code> 的错误。这个错误是 ThinkJS 为了阻止后续执行添加的，如果要在 <code>catch</code> 里判断是否是该错误，可以通过 <code>think.isPrevent</code> 方法来判断。如：</p>\n<pre><code class=\"lang-js\">module.exports = think.controller({\n  indexAction(self){\n    return self.getData().then(function(data){\n      return self.success(data);\n    }).catch(function(err){\n      //忽略 PREVENT_NEXT_PROCESS 错误\n      if(think.isPrevent(err)){\n        return;\n      }\n      console.log(err.stack);\n    })\n  }\n})\n</code></pre>\n<p>另一种处理方式：对于 <code>success</code> 之类的方法前面不要添加 <code>return</code>，这样 <code>catch</code> 里就不会有此类的错误了。</p>\n<h3 id=\"-\">并行处理</h3>\n<p>使用 <code>async/await</code> 来处理异步时，是串行执行的。但很多场景下我们需要并行处理，这样可以大大提高执行效率，此时可以结合 <code>Promise.all</code> 来处理。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  async indexAction(){\n    let p1 = this.getServiceData1();\n    let p2 = this.getAPIData2();\n    let [p1Data, p2Data] = await Promise.all([p1, p2]);\n  }\n}\n</code></pre>\n<p>上面的代码 <code>p1</code> 和 <code>p2</code> 是并行处理的，然后用 <code>Promise.all</code> 来获取 2 个数据。这样一方面代码是同步书写的，同时又不失并行处理的性能。</p>\n<h3 id=\"-\">如何输出图片</h3>\n<p>项目中有时候要输出图片等类型的数据，可以通过下面的方式进行：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  imageAction(){\n    //图片 buffer 数据，读取本地文件或者从远程获取\n    let imageBuffer = new Buffer();\n    this.type(\'image/png\');\n    this.end(imageBuffer);\n  }\n}\n</code></pre>\n<h3 id=\"-\">如何在不同的环境下使用不同的配置</h3>\n<p>我们经常在不同的环境下使用不同的配置，如：开发环境和线上环境使用不同的数据库配置。这时可以通过 <code>src/common/config/env/[env].js</code> 来配置，<code>[env]</code> 默认有 <code>development</code>，<code>testing</code> 和 <code>production</code> 3 个值，分别对应开发环境、测试环境和线上环境。这时可以在对应的配置文件设定配置来用在不同的环境下。</p>\n<p>如：配置线上环境下的数据库，那么可以在 <code>src/common/config/env/production.js</code> 中配置：</p>\n<pre><code class=\"lang-js\">export default {\n  db: { //这里要有一级 db\n    type: \'mysql\',\n    adapter: {\n      mysql: {\n        host: \'\',\n        port: \'\'\n      }\n    }\n  }\n}\n</code></pre>\n<p>详细的数据库配置请见<a href=\"./config.html#db\">这里</a>。</p>\n<h3 id=\"nunjucks-\">nunjucks 模板继承路径怎么写</h3>\n<p>使用 nunjucks 的模板继承时，由于设置了 root_path，所以路径需要使用相对路径。如：</p>\n<pre><code class=\"lang-html\">{% extends \"./parent.html\" %}  //表示同级别目录下的 parent.html 文件\n{% extends \"../layout.html\" %} //表示父级别下的 layout.html 文件\n</code></pre>\n<h3 id=\"-action-\">如何让 Action 只允许命令行调用</h3>\n<p>默认情况下，Action 既可以用户访问，也可以命令行调用。但有些 Action 我们希望只在命令行下调用，这时可以通过 <code>isCli</code> 来判断。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //禁止 URL 访问该 Action\n    if(!this.isCli()){\n      this.fail(\'only allow invoked in cli mode\');\n    }\n    ...\n  }\n}\n</code></pre>\n<h3 id=\"-\">如何跨模块调用</h3>\n<p>当项目比较复杂时，会有一些跨模块调用的需求。</p>\n<h4 id=\"-controller\">调用 controller</h4>\n<p>可以通过 <code>this.controller</code> 方法传递第二个参数模块名达到调用其他模块下 controller 的功能，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //获取 admin 模块下 user controller 的实例\n    let controllerInstance = this.controller(\'user\', \'admin\');\n    //获取 controller 的实例下就可以调用下面的方法了\n    let bar = controllerInstance.foo();\n  }\n  index2Action(){\n    //也可以通过这种更简洁的方式获取\n    let controllerInstance = this.controller(\'admin/user\');\n    let bar = controllerInstance.foo();\n  }\n}\n</code></pre>\n<h4 id=\"-action\">调用 action</h4>\n<p>可以通过 <code>this.action</code> 方法调用其他模块里 controller 下的 action 方法，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  async indexAction(){\n    //获取 admin 模块下 user controller 的实例\n    let controllerInstance = this.controller(\'user\', \'admin\');\n    //调用 controller 里的 test action，会自动调用 __before 和 __after 魔术方法\n    let data = await this.action(controllerInstance, \'test\')\n  }\n  async index2Action(){\n    //也可以通过字符串来指定 controller，这样会自动找对应的 controller\n    let data = await this.action(\'admin/user\', \'test\')\n  }\n}\n</code></pre>\n<p><code>注</code>：action 调用返回的始终为 Promise，调用 action 时不会调用对应的 logic。</p>\n<h4 id=\"-model\">调用 model</h4>\n<p>可以通过 <code>this.model</code> 方法获取其他模块下的 model 实例，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //获取 admin 模块下的 user model 实例\n    let modelInstance1 = this.model(\'user\', {}, \'admin\');\n    //也可以通过这种更简洁的方式\n    let modelInstance2 = this.model(\'admin/user\');\n  }\n}\n</code></pre>\n<h3 id=\"-\">如何请求其他接口数据</h3>\n<p>在项目中，经常要请求其他接口的数据。这时候可以用内置的 <code>http</code> 模块来操作，但 <code>http</code> 模块提供的接口比较基础，写起来比较麻烦。推荐大家用基于 <code>http</code> 模块封装的 <code>request</code> 模块或者 <code>superagent</code> 模块。如：</p>\n<pre><code class=\"lang-js\">import request from \'request\';\n/* 获取 API 接口数据 */\nlet getApiData = () =&gt; {\n  let deferred = think.defer();\n  request.get({\n    url: \'http://www.example.com/api/user\',\n    headers: {\n      \'User-Agent\': \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) Chrome/47.0.2526.111 Safari/537.36\'\n    }\n  }, (err, response, body) =&gt; {\n    if(err){\n      deferred.reject(err);\n    }else{\n      deferred.resolve(body);\n    }\n  });\n}\n</code></pre>\n<p>但这么写需要创建一个 deferred 对象，然后在回调函数里去根据 err 进行 resolve 或者 reject，写起来有些麻烦。ThinkJS 里提供了 <code>think.promisify</code> 方法来快速处理这一问题。</p>\n<pre><code class=\"lang-js\">import request from \'request\';\n/* 获取 API 接口数据 */\nlet getApiData = () =&gt; {\n  let fn = think.promisify(request.get);\n  return fn({\n    url: \'http://www.example.com/api/user\',\n    headers: {\n      \'User-Agent\': \'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) Chrome/47.0.2526.111 Safari/537.36\'\n    }\n  });\n}\n</code></pre>\n<h3 id=\"-502\">开发环境好的，线上部署 502</h3>\n<p>有时候开发环境下是好的，到线上使用 pm2 和 nginx 部署时，访问出现 502 的情况，这个情况一般为 node 服务没有正常启动导致的。可以通过 <code>pm2 logs</code> 看对应的错误信息来分析排查，也可以先关闭服务，手动通过 <code>node www/production.js</code> 启动服务，然后访问看具体的错误信息。</p>\n<h3 id=\"-\">设置跨域头信息</h3>\n<p>高级浏览器支持通过设置头信息达到跨域请求，ThinkJS 里可以通过下面的方式来设置：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let method = this.http.method.toLowerCase();\n    if(method === \'options\'){\n      this.setCorsHeader();\n      this.end();\n      return;\n    }\n    this.setCorsHeader();\n    this.success();\n  }\n  setCorsHeader(){\n    this.header(\'Access-Control-Allow-Origin\', this.header(\'origin\') || \'*\');\n    this.header(\'Access-Control-Allow-Headers\', \'x-requested-with\');\n    this.header(\'Access-Control-Request-Method\', \'GET,POST,PUT,DELETE\');\n    this.header(\'Access-Control-Allow-Credentials\', \'true\');\n  }\n}\n</code></pre>\n<p>更多头信息设置请见 <a href=\"https://www.w3.org/TR/cors\">https://www.w3.org/TR/cors</a>。</p>\n<p>如果是在 REST API，那么可以放在 __call 方法里判断，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  __call(){\n    let method = this.http.method.toLowerCase();\n    if(method === \'options\'){\n      this.setCorsHeader();\n      this.end();\n      return;\n    }\n    this.setCorsHeader();\n    return super.__call();\n  }\n  setCorsHeader(){\n    this.header(\'Access-Control-Allow-Origin\', this.header(\'origin\') || \'*\');\n    this.header(\'Access-Control-Allow-Headers\', \'x-requested-with\');\n    this.header(\'Access-Control-Request-Method\', \'GET,POST,PUT,DELETE\');\n    this.header(\'Access-Control-Allow-Credentials\', \'true\');\n  }\n}\n</code></pre><p><br></p>', '', '前端汇', '2017-07-04 14:44:39', '153', '0', '0', '0', '18', 'thinkjs,nodejs', '0', '1', 'https://thinkjs.org/', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('23', '模块', '', '<p>ThinkJS 创建项目时支持多种项目模式，默认创建的项目是按模块来划分的，并且自动添加了 <code>common</code> 和 <code>home</code> 2 个模块。每个模块有独立的配置、控制器、视图、模型等文件。</p>\n<p>使用模块的方式划分项目，可以让项目结构更加清晰。如：一般一个博客系统可分为前后台 2 个模块。</p>\n<h3 id=\"-\">模块列表</h3>\n<p>进去 <code>src/</code> 目录就可以看到模块列表：</p>\n<pre><code class=\"lang-text\">drwxr-xr-x   5 welefen  staff  170 Aug 18 15:55 common/\ndrwxr-xr-x   6 welefen  staff  204 Sep  8 19:14 home/\n</code></pre>\n<h3 id=\"common-\">common 模块</h3>\n<p>common 模块是个通用模块，该模块下存放一些通用的功能，如： 通用的配置，runtime 目录，启动文件，错误处理控制器等。</p>\n<p><code>注</code>：该模块下的控制器不能响应用户的请求。</p>\n<h3 id=\"-\">默认模块</h3>\n<p>默认模块为 <code>home</code> 模块。当解析用户的请求找不到模块时会自动对应到 <code>home</code> 下。</p>\n<p>可以通过配置 <code>default_module</code> 来修改默认模块，修改配置文件 <code>src/common/config/config.js</code>：</p>\n<pre><code class=\"lang-js\">//将默认模块名改为 blog\nexport default {\n    default_module: \'blog\'\n}\n</code></pre>\n<h3 id=\"-\">添加模块</h3>\n<p>添加模块直接通过 <code>thinkjs</code> 命令即可完成。</p>\n<p>在当前项目目录下，执行 <code>thinkjs module xxx</code>，即可创建名为 <code>xxx</code> 的模块。</p>\n<p>如果模块名已经存在，则无法创建。</p>\n<h3 id=\"-\">禁用模块</h3>\n<p>ThinkJS 默认会自动查找和识别项目下的模块，并认为所有的模块都是可用的。</p>\n<p>如果想禁用部分模块，可以修改配置文件 <code>src/common/config/config.js</code>，添加下面的配置：</p>\n<pre><code class=\"lang-js\">export default {\n    deny_module_list: [\'xxx\'] //禁用 xxx 模块\n}\n</code></pre><p>&nbsp;文章来源：<a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></p><p><br></p>', '', '前端汇', '2017-07-11 19:21:31', '56', '0', '0', '0', '18', 'thinkjs,nodejs', '0', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('24', '控制器', '', '<p>控制器是一类操作的集合，用来响应用户同一类的请求。 文章来源：http://www.thinkjs.org</p>\n<h3 id=\"-\">定义控制器</h3>\n<p>创建文件 <code>src/home/controller/article.js</code>，表示 <code>home</code> 模块下有名为 <code>article</code> 控制器，文件内容类似如下：</p>\n<pre><code class=\"lang-js\">\'use strict\';\n\nimport Base from \'./base.js\';\n\nexport default class extends Base {\n  /**\n   * index action\n   * @return {Promise} []\n   */\n  indexAction(){\n    //auto render template file index_index.html\n    return this.display();\n  }\n}\n</code></pre>\n<p>如果不想使用 ES6 语法，那么文件内容类似如下：</p>\n<pre><code class=\"lang-js\">\'use strict\';\n\nvar Base = require(\'./base.js\');\n\nmodule.exports = think.controller(Base, {\n  /**\n   * index action\n   * @return {Promise} []\n   */\n  indexAction: function(self){\n    //auto render template file index_index.html\n    return self.display();\n  }\n});\n</code></pre>\n<p>注：上面的 <code>Base</code> 表示定义一个基类，其他的类都继承该基类，这样就可以在基类里做一些通用的处理。</p>\n<h3 id=\"-\">多级控制器</h3>\n<p>对于很复杂的项目，一层控制器有时候不能满足需求。这个时候可以创建多级控制器，如：<code>src/home/controller/group/article.js</code>，这时解析到的控制器为二级，具体为 <code>group/article</code>，Logic 和 View 的目录与此相同。</p>\n<h3 id=\"-async-await\">使用 async/await</h3>\n<p>借助 Babel 编译，还可以在控制器里使用 ES7 里的 <code>async/await</code>。</p>\n<h5 id=\"es7-\">ES7 方式</h5>\n<pre><code class=\"lang-js\">\'use strict\';\n\nimport Base from \'./base.js\';\n\nexport default class extends Base {\n  /**\n   * index action\n   * @return {Promise} []\n   */\n  async indexAction(){\n    let model = this.model(\'user\');\n    let data = await model.select();\n    return this.success(data);\n  }\n}\n</code></pre>\n<h5 id=\"-\">动态创建类的方式</h5>\n<pre><code class=\"lang-js\">\'use strict\';\n\nvar Base = require(\'./base.js\');\n\nmodule.exports = think.controller(Base, {\n  /**\n   * index action\n   * @return {Promise} []\n   */\n  indexAction: async function(){\n    var model = this.model(\'user\');\n    var data = await model.select();\n    return this.success(data);\n  }\n});\n</code></pre>\n<h3 id=\"init-\">init 方法</h3>\n<p>ES6 里的 class 有 contructor 方法，但动态创建的类就没有该方法了，为了统一初始化执行的方法，将该方法统一定义为 <code>init</code>。</p>\n<p>该方法在类实例化的时候自动调用，无需手工调用。</p>\n<h5 id=\"es6-\">ES6 方式</h5>\n\n<pre><code class=\"lang-js\">\'use strict\';\n\nimport Base from \'./base.js\';\n\nexport default class extends Base {\n  init(http){\n    super.init(http); //调用父类的init方法  \n    ...\n  }\n}\n</code></pre>\n<h5 id=\"-\">动态创建类方式</h5>\n<pre><code class=\"lang-js\">\'use strict\';\n\nvar Base = require(\'./base.js\');\n\nmodule.exports = think.controller(Base, {\n  init: function(http){\n    this.super(\'init\', http); //调用父类的init方法\n    ...\n  }\n});\n</code></pre>\n<p><code>init</code> 方法里需要调用父类的 init 方法，并将参数 <code>http</code> 传递进去。</p>\n<h3 id=\"-__before\">前置操作 __before</h3>\n<p>ThinkJS 支持前置操作，方法名为 <code>__before</code>，该方法会在具体的 Action 调用之前自动调用。如果前置操作里阻止了后续代码继续执行，则不会调用具体的 Action，这样可以提前结束请求。</p>\n<h5 id=\"es6-\">ES6 方式</h5>\n\n<pre><code class=\"lang-js\">\'use strict\';\n\nimport Base from \'./base.js\';\n\nexport default class extends Base {\n  /**\n   * 前置方法\n   * @return {Promise} []\n   */\n  __before(){\n    ...\n  }\n}\n</code></pre>\n<h3 id=\"action\">Action</h3>\n<p>一个 Action 代表一个要执行的操作。如： url 为 <code>/home/article/detail</code>，解析后的模块为 <code>/home</code>，控制器为 <code>article</code>， Action 为 <code>detail</code>，那么执行的 Action 就是文件 <code>src/home/controller/aritcle</code> 里的 <code>detailAction</code> 方法。</p>\n<pre><code class=\"lang-js\">\'use strict\';\n\nimport Base from \'./base.js\';\n\nexport default class extends Base {\n  /**\n   * 获取详细信息\n   * @return {Promise} []\n   */\n  detailAction(self){\n    ...\n  }\n}\n</code></pre>\n<p>如果解析后的 Action 值里含有 <code>_</code>，会自动做转化，具体的转化策略见 <a href=\"./route.html\">路由 -&gt; 大小写转化</a>。</p>\n<h3 id=\"-__after\">后置操作 __after</h3>\n<p>ThinkJS 支持后置操作，方法名为 <code>__after</code>，该方法会在具体的 Action 调用之后执行。如果具体的 Action 里阻止了后续的代码继续执行，则后置操作不会调用。</p>\n<h3 id=\"-__call\">空操作 __call</h3>\n<p>当解析后的 url 对应的控制器存在，但 Action 不存在时，会试图调用控制器下的魔术方法 <code>__call</code>。这里可以对不存在的方法进行统一处理。</p>\n<pre><code class=\"lang-js\">\'use strict\';\n\nimport Base from \'./base.js\';\n\nexport default class extends Base {\n  /**\n   * @return {Promise} []\n   */\n  __call(){\n    ...\n  }\n}\n</code></pre>\n<h3 id=\"-\">错误处理</h3>\n<p>当 url 不存在或者当前用户没权限等一些异常请求时，这时候会调用错误处理。 ThinkJS 内置了一套详细的错误处理机制，具体请见 <a href=\"./error_handle.html\">扩展功能 -&gt; 错误处理</a>。</p>\n<h3 id=\"-\">数据校验</h3>\n<p>控制器里在使用用户提交的数据之前，需要对数据合法性进行校验。为了降低控制器里的逻辑复杂度，ThinkJS 提供了一层 Logic 专门用来处理数据校验和权限校验等相关操作。</p>\n<p>详细信息请见 <a href=\"./logic.html#toc-920\">扩展功能 -&gt; Logic -&gt; 数据校验</a>。</p>\n<h3 id=\"-\">变量赋值和模版渲染</h3>\n<p>控制器里可以通过 <code>assign</code> 和 <code>display</code> 方法进行变量赋值和模版渲染，具体信息请见 <a href=\"./view.html\">这里</a>。</p>\n<h3 id=\"-\">模型实例化</h3>\n<p>在控制器中可以通过 <code>this.model</code> 方法快速获得一个模型的实例。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let model = this.model(\'user\'); //实例化模型 user\n    ...\n  }\n}\n</code></pre>\n<p>model 方法更多使用方式请见 <a href=\"./api_think_http_base.html#toc-e2b\">API -&gt; think.http.base</a>。</p>\n<h3 id=\"http-\">http 对象</h3>\n<p>控制器在实例化时，会将 <code>http</code> 传递进去。该 <code>http</code> 对象是 ThinkJS 对 <code>req</code> 和 <code>res</code> 重新包装的一个对象，而非 Node.js 内置的 http 对象。</p>\n<p>Action 里如果想获取该对象，可以通过 <code>this.http</code> 来获取。</p>\n<pre><code class=\"lang-js\">\'use strict\';\n\nimport Base from \'./base.js\';\n\nexport default class extends Base {\n  indexAction(){\n    let http = this.http;\n  }\n}\n</code></pre>\n<p>关于 <code>http</code> 对象包含的属性和方法请见 <a href=\"./api_http.html\">API -&gt; http</a>。</p>\n<h3 id=\"rest-api\">REST API</h3>\n<p>有时候，项目里需要提供一些 REST 接口给第三方使用，这些接口无外乎就是增删改查等操作。</p>\n<p>如果手工去书写这些操作则比较麻烦，ThinkJS 提供了 REST Controller，该控制器会自动含有通用的增删改查等操作。如果这些操作不满足需求，也可以进行定制。具体请见 <a href=\"./rest_api.html\">这里</a>。</p>\n<h3 id=\"this-\">this 作用域的问题</h3>\n<p>Node.js 里经常有很多异步操作，而异步操作常见的处理方式是使用回调函数或者 Promise。这些处理方式都会增加一层作用域，导致在回调函数内无法直接使用 <code>this</code>，简单的处理办法是在顶部定义一个变量，将 <code>this</code> 赋值给这个变量，然后在回调函数内使用这个变量。如：</p>\n<pre><code class=\"lang-js\">module.exports = think.controller({\n  indexAction: function(){\n    var self = this; //这里将 this 赋值给变量 self，然后在后面的回调函数里都使用 self\n    this.model(\'user\').find().then(function(data){\n      return self.model(\'article\').where({user_id: data.id}).select();\n    }).then(function(data){\n      self.success(data);\n    })\n  }\n})\n</code></pre>\n<p>如果每个 Action 里都要使用者手工写一个 <code>var self = this</code>，势必比较麻烦。为了解决这个问题，ThinkJS 在 Action 里直接提供了一个参数，这个参数等同于 <code>var self = this</code>，具体如下：</p>\n<pre><code class=\"lang-js\">module.exports = think.controller({\n  //参数 self 等同于 var self = this\n  indexAction: function(self){\n    this.model(\'user\').find().then(function(data){\n      return self.model(\'article\').where({user_id: data.id}).select();\n    }).then(function(data){\n      self.success(data);\n    })\n  }\n})\n</code></pre>\n<p>当然更好的解决办法是推荐使用 ES6 里的 Generator Function 和 Arrow Function，这样就可以彻底解决 this 作用域的问题。</p>\n<h5 id=\"-generator-function\">使用 Generator Function</h5>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    let data = yield this.model(\'user\').find();\n    let result = yield this.model(\'article\').where({user_id: data.id}).select();\n    this.success(result);\n  }\n}\n</code></pre>\n<h5 id=\"-arrow-function\">使用 Arrow Function</h5>\n<pre><code class=\"lang-js\">module.exports = think.controller({\n  indexAction: function(){\n    this.model(\'user\').find().then(data =&gt; {\n      return this.model(\'article\').where({user_id: data.id}).select();\n    }).then(data =&gt; {\n      this.success(data);\n    })\n  }\n})\n</code></pre>\n<h3 id=\"json-\">JSON 输出</h3>\n<p>项目中经常要提供一些接口，这些接口一般都是直接输出 JSON 格式的数据，并且会有标识表明当前接口是否正常。如果发生异常，需要将对应的错误信息随着接口一起输出。控制器里提供了 <code>this.success</code> 和 <code>this.fail</code> 方法来输出这样的接口数据。</p>\n<h4 id=\"-json\">输出正常的 JSON</h4>\n<p>可以通过 <code>this.success</code> 方法输出正常的接口数据，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let data = {name: \"thinkjs\"};\n    this.success(data);\n  }\n}\n</code></pre>\n<p>输出结果为 <code>{errno: 0, errmsg: \"\", data: {\"name\": \"thinkjs\"}}</code>，客户端可以通过 <code>errno</code> 是否为 0 来判断当前接口是否有异常。</p>\n<h4 id=\"-json\">输出含有错误信息的 JSON</h4>\n<p>可以通过 <code>this.fail</code> 方法输出含有错误信息的接口数据，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    this.fail(1000, \'connect error\'); //指定错误号和错误信息\n  }\n}\n</code></pre>\n<p>输出结果为 <code>{errno: 1000, errmsg: \"connect error\"}</code>，客户端判断 <code>errno</code> 大于 0，就知道当前接口有异常，并且通过 <code>errmsg</code> 拿到具体的错误信息。</p>\n<h5 id=\"-\">配置错误号和错误信息</h5>\n<p>如果每个地方输出错误的时候都要指定错误号和错误信息势必比较麻烦，比较好的方式是把错误号和错误信息在一个地方配置，然后输出的时候只要指定错误号，错误信息根据错误号自动读取。</p>\n<p>错误信息支持国际化，所以配置放在 <code>src/common/config/locale/[lang].js</code> 文件中。如：</p>\n<pre><code class=\"lang-js\">export default {\n  10001: \'get data error\'\n}\n</code></pre>\n<p>通过上面的配置后，执行 <code>this.fail(10001)</code> 时会自动读取到对应的错误信息。</p>\n<h5 id=\"-\">友好的错误号</h5>\n<p>在程序里执行 <code>this.fail(10001)</code> 虽然能输出正确的错误号和错误信息，但人不能直观的看出来错误号对应的错误信息是什么。</p>\n<p>这时可以将 key 配置为大写字符串，值为错误号和错误信息。如:</p>\n<pre><code class=\"lang-js\">export default {\n  GET_DATA_ERROR: [1234, \'get data error\'] //key 必须为大写字符或者下划线才有效\n}\n</code></pre>\n<p>执行 <code>this.fail(\'GET_DATA_ERROR\')</code> 时也会自动取到对应的错误号和错误信息。</p>\n<h4 id=\"-\">格式配置</h4>\n<p>默认输出的错误号的 key 为 <code>errno</code>，错误信息的 key 为 <code>errmsg</code>。如果不满足需求的话，可以修改配置文件 <code>src/common/config/error.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  key: \'errno\', //error number\n  msg: \'errmsg\', //error message\n}\n</code></pre>\n<h4 id=\"-json\">输出不包含错误信息的 JSON</h4>\n<p>如果输出的 JSON 数据里不想包含 <code>errno</code> 和 <code>errmsg</code> 的话，可以通过 <code>this.json</code> 方法输出 JSON。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    this.json({name: \'thinkjs\'});\n  }\n}\n</code></pre>\n<h3 id=\"-\">常用功能</h3>\n<h4 id=\"-get-\">获取 GET 参数</h4>\n<p>可以通过 <code>get</code> 方法获取 GET 参数，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let name = this.get(\'name\');\n    let allParams = this.get(); //获取所有 GET 参数\n  }\n}\n</code></pre>\n<p>如果参数不存在，那么值为空字符串。</p>\n<h4 id=\"-post-\">获取 POST 参数</h4>\n<p>可以通过 <code>post</code> 方法获取 POST 参数，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let name = this.post(\'name\');\n    let allParams = this.post(); //获取所有 POST 参数\n  }\n}\n</code></pre>\n<p>如果参数不存在，那么值为空字符串。</p>\n<h4 id=\"-\">获取上传的文件</h4>\n<p>可以通过 <code>file</code> 方法获取上传的文件，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let file = this.file(\'image\');\n    let allFiles = this.file(); //获取所有上传的文件\n  }\n}\n</code></pre>\n<p>返回值是个对象，包含下面的属性：</p>\n<pre><code class=\"lang-js\">{\n  fieldName: \'file\', //表单字段名称\n  originalFilename: filename, //原始的文件名\n  path: filepath, //文件保存的临时路径，使用时需要将其移动到项目里的目录，否则请求结束时会被删除\n  size: 1000 //文件大小\n}\n</code></pre>\n<p>如果文件不存在，那么值为一个空对象 <code>{}</code>。</p>\n<h4 id=\"jsonp-\">JSONP 格式数据输出</h4>\n<p>可以通过 <code>this.jsonp</code> 方法输出 JSONP 格式的数据，callback 的请求参数名默认为 <code>callback</code>。如果需要修改请求参数名，可以通过修改配置 <code>callback_name</code> 来完成。</p>\n<h4 id=\"-\">更多方法</h4>\n<ul>\n<li><code>isGet()</code> 当前是否是 GET 请求</li>\n<li><code>isPost()</code> 当前是否是 POST 请求</li>\n<li><code>isAjax()</code> 是否是 AJAX 请求</li>\n<li><code>ip()</code> 获取请求用户的 ip</li>\n<li><code>redirect(url)</code> 跳转到一个 url</li>\n<li><code>write(data)</code> 输出数据，会自动调用 JSON.stringify</li>\n<li><code>end(data)</code> 结束当前的 http 请求</li>\n<li><code>json(data)</code> 输出 JSON 数据，自动发送 JSON 相关的 Content-Type</li>\n<li><code>jsonp(data)</code> 输出 JSONP 数据，请求参数名默认为 <code>callback</code></li>\n<li><code>success(data)</code> 输出一个正常的 JSON 数据，数据格式为 <code>{errno: 0, errmsg: \"\", data: data}</code></li>\n<li><code>fail(errno, errmsg, data)</code> 输出一个错误的 JSON 数据，数据格式为 <code>{errno: errno_value, errmsg: string, data: data}</code></li>\n<li><code>download(file)</code> 下载文件</li>\n<li><code>assign(name, value)</code> 设置模版变量</li>\n<li><code>display()</code> 输出一个模版</li>\n<li><code>fetch()</code> 渲染模版并获取内容</li>\n<li><code>cookie(name, value)</code> 获取或者设置 cookie</li>\n<li><code>session(name, value)</code> 获取或者设置 session</li>\n<li><code>header(name, value)</code> 获取或者设置 header</li>\n<li><code>action(name, data)</code> 调用其他 Controller 的方法，可以跨模块</li>\n<li><code>model(name, options)</code> 获取模型实例</li>\n</ul>\n<p>完整方法列表请见 <a href=\"./api_controller.html\">API -&gt; Controller</a>。</p><p>&nbsp;文章来源：<a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></p><p><br></p>', '', '前端汇', '2017-07-11 19:21:37', '60', '0', '0', '0', '18', 'thinkjs,nodejs', '0', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('25', '视图', '', '<p>视图即模版，默认的根目录为 <code>view/</code>。</p>\n<h3 id=\"-\">视图文件</h3>\n<p>视图文件默认的命名规则为 <code>模块/控制器_操作.html</code>。</p>\n<p>假如 URL <code>home/article/detail</code> 解析后的模块是 <code>home</code>，控制器是 <code>article</code>，操作是 <code>detail</code>，那么对应的视图文件为 <code>home/article_detail.html</code>。</p>\n<h3 id=\"-\">视图配置</h3>\n<p>视图默认配置如下，可以在配置文件 <code>src/common/config/view.js</code> 中修改：</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'ejs\', //模版引擎\n  content_type: \'text/html\', //输出模版时发送的 Content-Type\n  file_ext: \'.html\', //文件的扩展名\n  file_depr: \'_\', //控制器和操作之间的连接符\n  root_path: think.ROOT_PATH + \'/view\', //视图文件的根目录\n  adapter: { //模版引擎需要的配置项\n    ejs: {}, //使用 ejs 模板引擎时额外配置\n    nunjucks: {} //使用 nunjucks 模板引擎时额外配置\n  } \n};\n</code></pre>\n<p><code>注</code>：<code>2.0.6</code> 版本开始去除了 <code>options</code> 配置项，使用 <code>adapter</code> 代替。</p>\n<p>视图默认根目录在 <code>view/</code>。如果想每个模块有独立的视图目录，将配置 <code>root_path</code> 修改为空即可。</p>\n<h4 id=\"-\">修改连接符</h4>\n<p>默认控制器和操作之间的连接符是 <code>_</code>，文件名类似为 <code>index_index.html</code>，如果想将控制器作为一层目录的话，如：<code>index/index.html</code>，可以将连接符修改为 <code>/</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  file_depr: \'/\'\n}\n</code></pre>\n<h4 id=\"-\">修改模板引擎配置</h4>\n<p>如果想修改模板引擎的一些配置，可以修改配置 <code>adapter</code> 里对应字段。如：</p>\n<pre><code class=\"lang-js\">export default {\n  adapter: {\n    ejs: {\n      delimiter: \'&amp;\' //将定界符修改为 &lt;&amp; 和 &amp;&gt;\n    },\n    nunjucks: {\n      trimBlocks: false, //不转义\n      prerender: function(nunjucks, env){} //针对nunjucks模板的过滤器\n    }\n  }\n}\n</code></pre>\n<h3 id=\"-\">模版引擎</h3>\n<p>ThinkJS 默认支持的模版引擎有：<code>ejs</code>，<code>jade</code>，<code>swig</code> 和 <code>nunjucks</code>，默认模版引擎为 <code>ejs</code>，可以根据需要修改为其他的模版引擎。</p>\n<h4 id=\"ejs\">ejs</h4>\n<h5 id=\"-\">定界符</h5>\n<p>ejs 默认的定界符是 <code>&lt;%</code> 和 <code>%&gt;</code>。如果想修改定界符，可以通过配置 <code>adapter</code> 里的 <code>ejs</code> 来修改，如：</p>\n<pre><code class=\"lang-js\">export default {\n  adapter: {\n    ejs: {\n      delimiter: \'&amp;\' //将定界符修改为 &lt;&amp; 和 &amp;&gt;\n    }\n  }\n}\n</code></pre>\n<h5 id=\"-\">变量输出</h5>\n<ul>\n<li>转义输出 <code>&lt;%= data.name%&gt;</code></li>\n<li>不转义输出 <code>&lt;%- data.name%&gt;</code></li>\n<li>注释 <code>&lt;%# data.name%&gt;</code></li>\n</ul>\n<h5 id=\"-\">条件判断</h5>\n<pre><code class=\"lang-text\">&lt;%if(data.name === \'1\'){%&gt;\n    &lt;p&gt;...&lt;/p&gt;\n&lt;%}else if(data.name === \'2\'){%&gt;\n    &lt;p&gt;...&lt;/p&gt;\n&lt;%}else{%&gt;\n    &lt;p&gt;...&lt;/p&gt;\n&lt;%}%&gt;\n</code></pre>\n<h5 id=\"-\">循环</h5>\n<pre><code class=\"lang-text\">&lt;%list.forEach(function(item){%&gt;\n    &lt;li&gt;&lt;%=item.name%&gt;&lt;/li&gt;\n&lt;%})%&gt;\n</code></pre>\n<h5 id=\"-\">过滤器</h5>\n<p>新版的 <code>ejs</code> 已经不再支持过滤器的功能了，如果需要一些过滤功能，可以在 <code>src/common/bootstrap/</code> 里定义一些全局函数，模板里可以直接使用这些函数。</p>\n<h5 id=\"-\">引用文件</h5>\n<p>ejs 不支持模版继承。但可以将公用的模版独立成一个文件，然后通过 <code>include</code> 来引入。</p>\n<pre><code class=\"lang-text\">&lt;%include inc/header.html%&gt;\n</code></pre>\n<p><code>注</code>：ejs 模版使用的变量需要在控制器中赋值，否则会报错。</p>\n<p>更多 ejs 使用文档请见 <a href=\"https://www.npmjs.com/package/ejs\">这里</a>。</p>\n<h4 id=\"nunjucks\">nunjucks</h4>\n<p>nunjucks 是一款类似于 jinja2 的模版引擎，功能异常强大，复杂项目建议使用该模版引擎。</p>\n<h5 id=\"-\">定界符</h5>\n<p>块级定界符为 <code>{%</code> 和 <code>%}</code>，变量定界符为 <code>{{</code> 和 <code>}}</code>，注释定界符为 <code>&lt;#</code> 和 <code>#&gt;</code>。如：</p>\n<pre><code class=\"lang-html\">{{ username }}  \n\n{% block header %} \nThis is the default content\n{% endblock %}\n</code></pre>\n<h5 id=\"-\">变量输出</h5>\n<p>可以通过 <code>{{ username }}</code> 来输出变量，默认输出的变量会自动转义，如果不想被转义，可以通过 <code>{{ username | safe }}</code> 来处理。</p>\n<h5 id=\"-\">模版继承</h5>\n<p>父级模版：</p>\n<pre><code class=\"lang-html\">{% block header %}\nThis is the default content\n{% endblock %}\n\n&lt;section class=\"left\"&gt;\n  {% block left %}{% endblock %}\n&lt;/section&gt;\n\n&lt;section class=\"right\"&gt;\n  {% block right %}\n  This is more content\n  {% endblock %}\n&lt;/section&gt;\n</code></pre>\n<p>子级模版：</p>\n<pre><code class=\"lang-html\">{% extends \"./parent.html\" %}\n\n{% block left %}\nThis is the left side!\n{% endblock %}\n\n{% block right %}\nThis is the right side!\n{% endblock %}\n</code></pre>\n<p><code>注</code>：nunjucks 默认设置了 root_path，所以模板继承时需要使用相对路径。</p>\n<h5 id=\"-\">条件判断</h5>\n<pre><code class=\"lang-html\">{% if hungry %}\n  I am hungry\n{% elif tired %}\n  I am tired\n{% else %}\n  I am good!\n{% endif %}\n</code></pre>\n<h5 id=\"-\">循环</h5>\n<pre><code class=\"lang-html\">&lt;h1&gt;Posts&lt;/h1&gt;\n&lt;ul&gt;\n{% for item in items %}\n  &lt;li&gt;{{ item.title }}&lt;/li&gt;\n{% else %}\n  &lt;li&gt;This would display if the \'item\' collection were empty&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>具体使用文档请见 <a href=\"http://mozilla.github.io/nunjucks/\">这里</a>。</p>\n<h4 id=\"jade\">jade</h4>\n<p>jade 模版使用方式请见 <a href=\"https://github.com/jadejs/jade\">这里</a>。</p>\n<h4 id=\"swig\">swig</h4>\n<p>swig 模版使用方式请见 <a href=\"http://paularmstrong.github.io/swig/\">这里</a>。</p>\n<h4 id=\"-\">添加过滤器等功能</h4>\n<p><code>swig</code>，<code>nunjucks</code> 等很多模板引擎都支持添加过滤器等功能，可以在模板配置文件 <code>src/common/config/view.js</code> 中对应的 <code>adapter</code> 添加 <code>prerender</code> 配置来完成。如：</p>\n<pre><code class=\"lang-js\">export default {\n  adapter:{\n    nunjucks: {\n      prerender: function(nunjucks, env){\n        //添加一个过滤器，这样可以在模板里使用了\n        env.addFilter(\'filter_foo\', function(){\n\n        });\n      }\n    }\n  }\n}\n</code></pre>\n<p><code>注</code>： 该功能是在版本 <code>2.0.5</code> 中新增的。</p>\n<h4 id=\"-\">扩展模版引擎</h4>\n<p>模版引擎使用 Adapter 实现。如果项目里需要使用其他模版引擎，可以通过 Adapter 进行扩展，具体请见 <a href=\"./adapter_template.html\">这里</a>。</p>\n<h3 id=\"-\">变量赋值</h3>\n<p>控制器中可以通过 <code>assign</code> 方法进行变量赋值。</p>\n<h5 id=\"-\">赋值单个变量</h5>\n<pre><code class=\"lang-js\">export default class extends think.controlle.base {\n  indexAction(){\n    this.assign(\'title\', \'ThinkJS 官网\');\n  }\n}\n</code></pre>\n<h5 id=\"-\">赋值多个变量</h5>\n<pre><code class=\"lang-js\">export default class extends think.controlle.base {\n  indexAction(){\n    this.assign({\n      title: \'ThinkJS 官网\',\n      author: \'thinkjs\'\n    });\n  }\n}\n</code></pre>\n<h5 id=\"-\">获取赋值</h5>\n<p>变量赋值后也可以通过 <code>assign</code> 来获取赋过的值。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controlle.base {\n  indexAction(){\n    this.assign(\'title\', \'ThinkJS 官网\');\n    let title = this.assign(\'title\');\n  }\n}\n</code></pre>\n<h3 id=\"-\">模版渲染</h3>\n<p>可以通过 <code>display</code> 方法进行模版渲染。如果不传具体的模版文件路径，会自动查找。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    this.display();// render home/index_index.html\n  }\n}\n</code></pre>\n<p>也可以指定具体的模版文件进行渲染，关于 <code>display</code> 方法的详细使用请见 <a href=\"./api_controller.html#toc-6b2\">这里</a>。</p>\n<h3 id=\"-\">获取渲染后的内容</h3>\n<p>如果有时候不想支持输出模版，而是想获取渲染后的模版内容，那么可以通过 <code>fetch</code> 方法来获取。</p>\n<h5 id=\"es6-\">ES6 方式</h5>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    let content = yield this.fetch();\n    ...\n  }\n}\n</code></pre>\n<h5 id=\"-\">动态创建类的方式</h5>\n<pre><code class=\"lang-js\">module.exports = think.controller({\n  indexAction: function(){\n    this.fetch().then(function(content){\n      ...\n    })\n  }\n})\n</code></pre>\n<p>关于 <code>fetch</code> 方法的详细使用方式请见 <a href=\"api_controller.html#controllerfetchtemplatefile\">这里</a>。</p>\n<h3 id=\"-\">国际化</h3>\n<p>启动国际化后，视图路径会多一层国际化的目录。如：具体的视图路径变为 <code>view/zh-cn/home/index_index.html</code>，其中 <code>zh-cn</code> 为语言名。</p>\n<p>关于如果使用国际化请见 <a href=\"./i18n.html\">扩展功能 -&gt; 国际化</a>。 </p>\n<h3 id=\"-\">多主题</h3>\n<p>设置多主题后，视图路径会多一层多主题的目录。如：具体的视图路径变为 <code>view/default/home/index_index.html</code>，其中 <code>default</code> 为主题名称。</p>\n<p>可以通过 <code>http.theme</code> 方法来设置当前的主题，设置主题一般是通过 middleware 来实现。</p>\n<p>关于 middleware 更多信息请见 <a href=\"./middleware.html\">扩展功能 - Middleware</a>。</p>\n<h3 id=\"-\">默认模版变量</h3>\n<p>为了可以在模版里很方便的获取一些通用的变量，框架自动向模版里注册了 <code>http</code>, <code>controller</code>, <code>config</code> 等变量，这些变量可以在模版里直接使用。</p>\n<p>下面的代码示例都是基于 <code>ejs</code> 模版引擎的，其他的模版引擎下需要根据相应的语法进行修改。</p>\n<h4 id=\"http\">http</h4>\n<p>模版里可以直接使用 <code>http</code> 对象下的属性和方法。</p>\n<h4 id=\"controller\">controller</h4>\n<p>模版里可以直接使用 <code>controller</code> 对象下的属性和方法。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    this.navType = \'home\';\n  }\n}\n</code></pre>\n<p>Action 里给当前控制器添加了属性 <code>navType</code>，那么模版里就可以直接通过 <code>controller.navType</code> 来使用。</p>\n<pre><code class=\"lang-text\">&lt;%if(controller.navType === \'home\')%&gt;\n  &lt;li className=\"action\"&gt;home&lt;/li&gt;\n&lt;%}else{%&gt;\n  &lt;li&gt;home&lt;/li&gt;\n&lt;%}%&gt;\n</code></pre>\n<h4 id=\"config\">config</h4>\n<p>通过 <code>config</code> 对象可以在模版中直接对应的配置，如：</p>\n<pre><code class=\"lang-text\">&lt;%if(config.name === \'text\'){%&gt;\n\n&lt;%}%&gt;\n</code></pre>\n<h4 id=\"-_\">国际化方法 _</h4>\n<p>在模版中可以直接通过 <code>_</code> 方法获取对应本地化的值，这些值在 <code>src/common/config/locales/[lang].js</code> 中定义。</p>\n<pre><code class=\"lang-text\">&lt;%= _(\'title\')%&gt;\n</code></pre>\n<p>更多国际化相关的信息请见 <a href=\"./i18n.html\">这里</a>。</p><p>&nbsp;文章来源：<a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></p><p><br></p>', '', '前端汇', '2017-07-11 19:21:42', '60', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('26', '配置', '', '<p>ThinkJS 提供了灵活的配置，可以在不同的模块和不同的项目环境下使用不同的配置，且这些配置在服务启动时就已经生效。</p>\n<p><code>注意：不可将一个 http 请求中的私有值设置到配置中，这将会被下一个 http 设置的值给冲掉。</code></p>\n<h3 id=\"-\">项目模块</h3>\n<p>ThinkJS 默认创建的项目是按模块来划分的，可以在每个模块下定义不同的配置。其中 <code>common</code> 模块下定义一些通用的配置，其他模块下配置会继承 <code>common</code> 下的配置。如：<code>home</code> 模块下的最终配置是将 <code>common</code> 和 <code>home</code> 模块下配置合并的结果。</p>\n<h3 id=\"-\">项目环境</h3>\n<p>ThinkJS 默认支持 3 种项目环境，可以根据不同的环境进行配置，以满足不同情况下的配置需要。</p>\n<ul>\n<li><code>development</code> 开发环境</li>\n<li><code>testing</code> 测试环境</li>\n<li><code>production</code> 线上环境</li>\n</ul>\n<p>项目里也可以扩展其他的环境，当前使用哪种环境可以在 <a href=\"./app_structure.html#toc-f0b\">入口文件</a> 中设置，设置 <code>env</code> 值即可。</p>\n<h3 id=\"-\">定义配置文件</h3>\n<h5 id=\"config-config-js\">config/config.js</h5>\n<p>存放一些基本的配置，如：</p>\n<pre><code class=\"lang-js\">export default {\n  port: 8360, \n  host: \'\',\n  encoding: \'utf-8\',\n  ...\n}\n</code></pre>\n<h5 id=\"config-name-js\">config/[name].js</h5>\n<p>存放具体某个独立功能的配置，如：<code>db.js</code> 为数据库配置，<code>redis</code> 为 redis 配置。</p>\n<pre><code class=\"lang-js\">// db.js\nexport default {\n  type: \'mysql\',\n  ...\n};\n</code></pre>\n<h5 id=\"config-env-mode-js\">config/env/[mode].js</h5>\n<p>不同项目环境的差异化配置，如：<code>env/development.js</code>，<code>env/testing.js</code>，<code>env/production.js</code></p>\n<pre><code class=\"lang-js\">// config/env/development.js\nexport default {\n  port: 7777,\n  db: { //开发模式下数据库配置\n    type: \'mysql\',\n    adapter: {\n      mysql: {\n        host: \'127.0.0.1\',\n        port: \'\',\n      }\n    }\n    ...\n  }\n}\n</code></pre>\n<p><code>注</code>：不同项目环境差异化配置一般不是很多，所以放在一个文件中定义。这时候如果要修改一个独立功能的配置，就需要将独立功能对应的 key 带上。如：上述代码里的修改数据库配置需要将数据库对应的名称 <code>db</code> 带上。</p>\n<h5 id=\"config-locale-lang-js\">config/locale/[lang].js</h5>\n<p>国际化语言包配置，如： <code>locale/en.js</code>，<code>locale/zh-cn.js</code>。</p>\n<hr>\n<p>配置格式采用 <code>key: value</code> 的形式，并且 <code>key</code> 不区分大小写。</p>\n<h3 id=\"-\">加载配置文件</h3>\n<p>框架支持多种级别的配置文件，会按以下顺序进行读取：</p>\n<p><code>框架默认的配置 -&gt; 项目模式下框架配置 -&gt; 项目公共配置 -&gt; 项目模式下的公共配置 -&gt; 模块下的配置</code></p>\n<h3 id=\"-\">配置读取</h3>\n<h4 id=\"-config-\">通过 config 方法获取</h4>\n<p>在 Controller，Logic，Middleware 等地方可以通过 <code>this.config</code> 来获取。如：</p>\n<pre><code class=\"lang-js\">let db = this.config(\'db\'); //读取数据库的所有配置\nlet host = this.config(\'db.host\'); //读取数据库的 host 配置，等同于 db.host\n</code></pre>\n<h4 id=\"-http-config-\">通过 http 对象上的 config 方法获取</h4>\n<p>http 对象也有 config 方法用来获取相关的配置，如：</p>\n<pre><code class=\"lang-js\">let db = http.config(\'db\');\n</code></pre>\n<h4 id=\"-\">其他地方配置读取</h4>\n<p>其他地方可以通过 <code>think.config</code> 来读取相关的配置：</p>\n<pre><code class=\"lang-js\">let db = think.config(\'db\'); //读取通用模块下的数据库配置\nlet db1 = think.config(\'db\', undefined, \'home\'); //获取 home 模块下数据库配置\n</code></pre>\n<p><code>注</code>：路由解析前，无法通过 <code>config</code> 方法或者 http 对象上的 <code>config</code> 方法来获取非通用模块下的配置，所以路由解析前就使用的配置需要定义在通用模块里。</p>\n<h3 id=\"-\">系统默认配置</h3>\n<h4 id=\"env\">env</h4>\n<p>项目模式下的配置，<code>config/env/development.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  auto_reload: true,\n  log_request: true,\n  gc: {\n    on: false\n  },\n  error: {\n    detail: true\n  }\n}\n</code></pre>\n<p><code>config/env/testing.js</code> 和 <code>config/env/produciton.js</code> 无默认配置。</p>\n<h4 id=\"locale\">locale</h4>\n<p>国际化语言包配置，默认的配置如下：</p>\n<pre><code class=\"lang-js\">// config/locale/en.js\nexport default {\n  CONTROLLER_NOT_FOUND: \'controller `%s` not found. url is `%s`.\',\n  CONTROLLER_INVALID: \'controller `%s` is not valid. url is `%s`\',\n  ACTION_NOT_FOUND: \'action `%s` not found. url is `%s`\',\n  ACTION_INVALID: \'action `%s` is not valid. url is `%s`\',\n  WORKER_DIED: \'worker `%d` died, it will auto restart.\',\n  MIDDLEWARE_NOT_FOUND: \'middleware `%s` not found\',\n  ADAPTER_NOT_FOUND: \'adapter `%s` not found\',\n  GCTYPE_MUST_SET: \'instance must have gcType property\',\n  CONFIG_NOT_FUNCTION: \'config `%s` is not a function\',\n  CONFIG_NOT_VALID: \'config `%s` is not valid\',\n  PATH_EMPTY: \'`%s` path muse be set\',\n  PATH_NOT_EXIST: \'`%s` is not exist\',\n  TEMPLATE_NOT_EXIST: \'can\\\'t find template file `%s`\',\n  PARAMS_EMPTY: \'params `%s` value can\\\'t empty\',\n  PARAMS_NOT_VALID: \'params `{name}` value not valid\',\n  FIELD_KEY_NOT_VALID: \'field `%s` in where condition is not valid\',\n  DATA_EMPTY: \'data can not be empty\',\n  MISS_WHERE_CONDITION: \'miss where condition\',\n  INVALID_WHERE_CONDITION_KEY: \'where condition key is not valid\',\n  WHERE_CONDITION_INVALID: \'where condition `%s`:`%s` is not valid\',\n  TABLE_NO_COLUMNS: \'table `%s` has no columns\',\n  NOT_SUPPORT_TRANSACTION: \'table engine is not support transaction\',\n  DATA_MUST_BE_ARRAY: \'data is not an array list\',\n  PARAMS_TYPE_INVALID: \'params `{name}` type invalid\',\n  DISALLOW_PORT: \'proxy on, cannot visit with port\',\n  SERVICE_UNAVAILABLE: \'Service Unavailable\',\n\n  validate_required: \'{name} can not be blank\',\n  validate_contains: \'{name} need contains {args}\',\n  validate_equals: \'{name} need match {args}\',\n  validate_different: \'{name} nedd not match {args}\',\n  validate_after: \'{name} need a date that\\\'s after the {args} (defaults to now)\',\n  validate_alpha: \'{name} need contains only letters (a-zA-Z)\',\n  validate_alphaDash: \'{name} need contains only letters and dashes(a-zA-Z_)\',\n  validate_alphaNumeric: \'{name} need contains only letters and numeric(a-zA-Z0-9)\',\n  validate_alphaNumericDash: \'{name} need contains only letters, numeric and dash(a-zA-Z0-9_)\',\n  validate_ascii: \'{name} need contains ASCII chars only\',\n  validate_base64: \'{name} need a valid base64 encoded\',\n  validate_before: \'{name} need a date that\\\'s before the {args} (defaults to now)\',\n  validate_byteLength: \'{name} need length (in bytes) falls in {args}\',\n  validate_creditcard: \'{name} need a valid credit card\',\n  validate_currency: \'{name} need a valid currency amount\',\n  validate_date: \'{name} need a date\',\n  validate_decimal: \'{name} need a decimal number\',\n  validate_divisibleBy: \'{name} need a number that\\\'s divisible by {args}\',\n  validate_email: \'{name} need an email\',\n  validate_fqdn: \'{name} need a fully qualified domain name\',\n  validate_float: \'{name} need a float in {args}\',\n  validate_fullWidth: \'{name} need contains any full-width chars\',\n  validate_halfWidth: \'{name} need contains any half-width chars\',\n  validate_hexColor: \'{name} need a hexadecimal color\',\n  validate_hex: \'{name} need a hexadecimal number\',\n  validate_ip: \'{name} need an IP (version 4 or 6)\',\n  validate_ip4: \'{name} need an IP (version 4)\',\n  validate_ip6: \'{name} need an IP (version 6)\',\n  validate_isbn: \'{name} need an ISBN (version 10 or 13)\',\n  validate_isin: \'{name} need an ISIN (stock/security identifier)\',\n  validate_iso8601: \'{name} need a valid ISO 8601 date\',\n  validate_in: \'{name} need in an array of {args}\',\n  validate_notIn: \'{name} need not in an array of {args}\',\n  validate_int: \'{name} need an integer\',\n  validate_min: \'{name} need an integer greater than {args}\',\n  validate_max: \'{name} need an integer less than {args}\',\n  validate_length: \'{name} need length falls in {args}\',\n  validate_minLength: \'{name} need length is max than {args}\',\n  validate_maxLength: \'{name} need length is min than {args}\',\n  validate_lowercase: \'{name} need is lowercase\',\n  validate_mobile: \'{name} need is a mobile phone number\',\n  validate_mongoId: \'{name} need is a valid hex-encoded representation of a MongoDB ObjectId\',\n  validate_multibyte: \'{name} need contains one or more multibyte chars\',\n  validate_url: \'{name} need an URL\',\n  validate_uppercase: \'{name} need uppercase\',\n  validate_variableWidth: \'{name} need contains a mixture of full and half-width chars\',\n  validate_order: \'{name} need a valid sql order string\',\n  validate_field: \'{name} need a valid sql field string\',\n  validate_image: \'{name} need a valid image file\',\n  validate_startWith: \'{name} need start with {args}\',\n  validate_endWidth: \'{name} need end with {args}\',\n  validate_string: \'{name} need a string\',\n  validate_array: \'{name} need an array\',\n  validate_boolean: \'{name} need a boolean\',\n  validate_object: \'{name} need an object\'\n}\n</code></pre>\n<h4 id=\"config\">config</h4>\n<p>基本配置，<code>config/config.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  port: 8360, //服务监听的端口\n  host: \'\', //服务监听的 host\n  encoding: \'utf-8\', //项目编码\n  pathname_prefix: \'\',  //pathname 去除的前缀，路由解析中使用\n  pathname_suffix: \'.html\', //pathname 去除的后缀，路由解析中使用\n  hook_on: true,  //是否开启 hook\n  cluster_on: false, //是否开启 cluster\n\n  timeout: 120, //120 seconds\n  auto_reload: false, //自动重新加载修改的文件，development 模式下使用\n\n  resource_on: true, // 是否处理静态资源请求， porxy_on 开启下可以关闭该配置\n  resource_reg: /^(static\\/|[^\\/]+\\.(?!js|html)\\w+$)/, //静态资源的正则\n\n  route_on: true, //是否开启自定义路由\n\n  log_error: true, //是否打印错误日志\n  log_request: false, //是否打印请求的日志\n\n  create_server: undefined, //自定义启动服务\n  output_content: undefined, //自定义输出内容处理方式，可以进行 gzip 处理等\n  deny_module_list: [], //禁用的模块列表\n  default_module: \'home\', //默认模块\n  default_controller: \'index\',  //默认的控制器\n  default_action: \'index\', //默认的 Action\n  callback_name: \'callback\', //jsonp 请求的 callback 名称\n  json_content_type: \'application/json\', //json 输出时设置的 Content-Type\n}\n</code></pre>\n<h4 id=\"cache\">cache</h4>\n<p>缓存配置，<code>config/cache.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'file\', //缓存方式\n  adapter: {\n    file: {\n      timeout: 6 * 3600, //6 hours\n      path: think.RUNTIME_PATH + \'/cache\', //文件缓存模式下缓存内容存放的目录\n      path_depth: 2, //子目录深度\n      file_ext: \'.json\' //缓存文件的扩展名\n    },\n    redis: {\n      prefix: \'thinkjs_\', //缓存名称前缀\n    }\n  }\n};\n</code></pre>\n<h4 id=\"cookie\">cookie</h4>\n<p>cookie 配置，<code>config/cookie.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  domain: \'\', // cookie domain\n  path: \'/\', // cookie path\n  httponly: false, //是否 httponly\n  secure: false, //是否在 https 下使用\n  timeout: 0 //cookie 有效时间\n};\n</code></pre>\n<h4 id=\"db\">db</h4>\n<p>数据库配置，<code>config/db.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'mysql\', //数据库类型\n  log_sql: true, //是否记录 sql 语句\n  log_connect: true, // 是否记录连接数据库的信息\n  adapter: {\n    mysql: {\n      host: \'127.0.0.1\', //数据库 host\n      port: \'\', //端口\n      database: \'\', //数据库名称\n      user: \'\', //账号\n      password: \'\', //密码\n      prefix: \'think_\', //数据表前缀\n      encoding: \'utf8\', //数据库编码\n      nums_per_page: 10, //一页默认条数\n    }\n  }\n};\n</code></pre>\n<h4 id=\"error\">error</h4>\n<p>错误信息配置，<code>config/error.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  key: \'errno\', //error number\n  msg: \'errmsg\', //error message\n  value: 1000 //default errno\n};\n</code></pre>\n<h4 id=\"gc\">gc</h4>\n<p>缓存、Session等垃圾处理配置，<code>config/gc.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  on: true, //是否开启垃圾回收处理\n  interval: 3600, // 处理时间间隔，默认为一个小时\n  filter: function(){ //如果返回 true，则进行垃圾回收处理\n    let hour = (new Date()).getHours();\n    if(hour === 4){\n      return true;\n    }\n  }\n};\n</code></pre>\n<h4 id=\"hook\">hook</h4>\n<p>hook 配置，<code>config/hook.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  request_begin: [],\n  payload_parse: [\'parse_form_payload\', \'parse_single_file_payload\', \'parse_json_payload\', \'parse_querystring_payload\'],\n  payload_validate: [\'validate_payload\'],\n  resource: [\'check_resource\', \'output_resource\'],\n  route_parse: [\'rewrite_pathname\', \'parse_route\'],\n  logic_before: [],\n  logic_after: [],\n  controller_before: [],\n  controller_after: [],\n  view_before: [],\n  view_template: [\'locate_template\'],\n  view_parse: [\'parse_template\'],\n  view_filter: [],\n  view_after: [],\n  response_end: []\n};\n</code></pre>\n<h4 id=\"post\">post</h4>\n<p>post 请求时的配置，<code>config/post.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  json_content_type: [\'application/json\'],\n  max_file_size: 1024 * 1024 * 1024, //1G\n  max_fields: 100, \n  max_fields_size: 2 * 1024 * 1024, //2M,\n  ajax_filename_header: \'x-filename\',\n  file_upload_path: think.RUNTIME_PATH + \'/upload\',\n  file_auto_remove: true\n};\n</code></pre>\n<h4 id=\"redis\">redis</h4>\n<p>redis 配置，<code>config/redis.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  host: \'127.0.0.1\',\n  port: 6379,\n  password: \'\',\n  timeout: 0,\n  log_connect: true\n};\n</code></pre>\n<h4 id=\"memcache\">memcache</h4>\n<p>memcache 配置，<code>config/memcache.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  host: \'127.0.0.1\', //memcache host\n  port: 11211,\n  username: \'\', //\n  password: \'\',\n  timeout: 0, //缓存失效时间\n  log_connect: true\n};\n</code></pre>\n<h4 id=\"session\">session</h4>\n<p>session 配置，<code>config/session.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  name: \'thinkjs\',\n  type: \'file\',\n  path: think.RUNTIME_PATH + \'/session\',\n  secret: \'\',\n  timeout: 24 * 3600,\n  cookie: { // cookie options\n    length: 32\n  }\n};\n</code></pre>\n<h4 id=\"view\">view</h4>\n<p>视图配置，<code>config/view.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  content_type: \'text/html\',\n  file_ext: \'.html\',\n  file_depr: \'_\',\n  root_path: \'\',\n  type: \'ejs\',\n  adapter: {\n    ejs: {\n\n    }\n  }\n};\n</code></pre>\n<h4 id=\"websocket\">websocket</h4>\n<p>websocket 配置，<code>config/websocket.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  on: false, //是否开启 websocket\n  type: \'think\', //websocket 使用的库\n  allow_origin: \'\',\n  sub_protocal: \'\',\n  adapter: undefined,\n  path: \'\', //url path for websocket\n  messages: {\n    // open: \'home/websocket/open\',\n  }\n};\n</code></pre>\n<h3 id=\"-\">扩展配置</h3>\n<p>项目里可以根据需要扩展配置，扩展配置只需在 <code>src/common/config/</code> 建立对应的文件即可，如：</p>\n<pre><code class=\"lang-js\">// src/common/config/foo.js\nexport default {\n  name: \'bar\'\n}\n</code></pre>\n<p>这样就可以通过 <code>think.config(\'foo\')</code> 来获取对应的配置了。 </p><p>&nbsp;文章来源：<a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></p><p><br></p>', '', '前端汇', '2017-07-11 19:21:47', '57', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('27', '路由', '', '<p>当用户访问一个 URL 时，最终执行哪个模块下哪个控制器的哪个操作，这是由路由来解析后决定的。</p>\n<p>ThinkJS 提供了一套灵活的路由机制，除了默认的解析外，还可以支持多种形式的自定义路由，让 URL 更加简单友好。</p>\n<h3 id=\"url-pathname\">URL 解析为 pathname</h3>\n<p>当用户访问服务时，服务端首先拿到的是一个完整的 URL，如：访问本页面，得到的 URL 为 <code>http://www.thinkjs.org/zh-cn/doc/2.0/route.html</code>。</p>\n<p>将 URL 进行解析得到的 pathname 为 <code>/zh-cn/doc/2.0/route.html</code>。</p>\n<h3 id=\"pathname-\">pathname 过滤</h3>\n<p>有时候为了搜索引擎优化或者一些其他的原因， URL 上会多加一些东西。比如：当前页面是一个动态页面，但 URL 最后加了 <code>.html</code>，这样对搜索引擎更加友好。但这些在后续的路由解析中是无用的，需要去除。</p>\n<p>ThinkJS 里提供了下面的配置可以去除 <code>pathname</code> 的前缀和后缀内容：</p>\n<pre><code class=\"lang-js\">export default {\n  pathname_prefix: \'\', \n  pathname_suffix: \'.html\',\n}\n</code></pre>\n<p>上面配置可以在 <code>src/common/config/config.js</code> 中进行修改。</p>\n<p>pathname 过滤时会自动去除左右的 <code>/</code>，该逻辑不受上面的配置影响。对 pathname 进行过滤后，拿到干净的 pathname 为 <code>zh-cn/doc/2.0/route</code>。</p>\n<p><code>注</code>：如果访问的 URL 是 <code>http://www.thinkjs.org/</code>，那么最后拿到干净的 pathname 则为空字符串。</p>\n<h3 id=\"-\">子域名部署</h3>\n<p>子域名部署请见<a href=\"./subdomain.html\">Middleware -&gt; 子域名部署</a>。 </p>\n<h3 id=\"-\">路由识别</h3>\n<h4 id=\"-\">路由解析</h4>\n<p>路由识别默认根据 <code>模块/控制器/操作/参数1/参数1值/参数2/参数2值</code> 来识别过滤后的 pathname，如：pathname 为 <code>admin/group/detail</code>，那么识别后的结果为：</p>\n<ul>\n<li>module 为 <code>admin</code></li>\n<li>controller 为 <code>group</code></li>\n<li>action 为 <code>detail</code>，对应的方法名为 <code>detailAction</code></li>\n</ul>\n<p>如果项目里并没有 <code>admin</code> 这个模块或者这个模块被禁用了，那么识别后的结果为：</p>\n<ul>\n<li>module 为默认模块 <code>home</code></li>\n<li>controller 为 <code>admin</code></li>\n<li>action 为 <code>group</code>，对应的方法名为 <code>groupAction</code></li>\n<li>参数为 <code>{detail: \'\'}</code></li>\n</ul>\n<p>如果有多级控制器，那么会进行多级控制器的识别，然后才是 action 的识别。</p>\n<h4 id=\"-\">大小写转化</h4>\n<p>路由识别后，<code>module</code>、<code>controller</code> 和 <code>Action</code> 值都会自动转为小写。如果 Action 值里有 <code>_</code>，会作一些转化，如：假设识别后的 Controller 值为 <code>index</code>，Action 值为 <code>user_add</code>，那么对应的 Action 方法名为 <code>userAddAction</code>，但模版名还是 <code>index_user_add.html</code>。</p>\n<h3 id=\"-\">路由默认值</h3>\n<p>当解析 pathname 没有对应的值时，此时便使用对应的默认值。其中 module 默认值为 <code>home</code>，controller 默认值为 <code>index</code>，action 默认值为 <code>index</code>。</p>\n<p>这些值可以通过下面的配置进行修改，配置文件 <code>src/common/config/config.js</code>：</p>\n<pre><code class=\"lang-js\">export default {\n  default_module: \'home\',\n  default_controller: \'index\', \n  default_action: \'index\',\n}\n</code></pre>\n<h3 id=\"-\">自定义路由</h3>\n<p>默认的路由虽然看起来清晰明了，解析起来也很简单，但看起来不够简洁。</p>\n<p>有时候需要更加简洁的路由，这时候就需要使用自定义路由解析了。如：文章的详细页面，默认路由可能是：<code>article/detail/id/10</code>，但我们想要的 URL 是 <code>article/10</code> 这种更简洁的方式。</p>\n<h5 id=\"-\">开启配置</h5>\n<p>开启自定义路由，需要在 <code>src/common/config/config.js</code> 开启如下的配置：</p>\n<pre><code class=\"lang-js\">export default {\n  route_on: true\n}\n</code></pre>\n<h5 id=\"-\">路由规则</h5>\n<p>开启自定义路由后，就可以通过路由规则来定义具体的路由了，路由配置文件为： <code>src/common/config/route.js</code>，格式如下：</p>\n<pre><code class=\"lang-js\">export default [\n  [\"规则1\", \"需要识别成的pathname\"],\n  [\"规则2\", {\n    get: \"get请求下需要识别成的pathname\",\n    post: \"post请求下需要识别成的pathname\"\n  }]\n];\n</code></pre>\n<p><code>注</code>：自定义路由每一条规则都是一个数组。（至于为什么不用对象，是因为正则路由下，正则不能作为对象的 key 直接使用）</p>\n<h5 id=\"-\">识别方式</h5>\n<p>自定义路由的匹配规则为：从前向后逐一匹配，如果命中到了该项规则，则不在向后匹配。</p>\n<hr>\n<p>ThinkJS 支持 3 种类型的自定义路由，即：正则路由，规则路由和静态路由。 </p>\n<h4 id=\"-\">正则路由</h4>\n<p>正则路由是采用正则表示式来定义路由的一种方式，依靠强大的正则表达式，能够定义非常灵活的路由规则。</p>\n<pre><code class=\"lang-js\">export default [\n  [/^article\\/(\\d+)$/, \"home/article/detail?id=:1\"]\n];\n</code></pre>\n<p>上面的正则会匹配类似 <code>article/10</code> 这样的 pathname，识别后新的 pathname 为 <code>home/article/detail</code>，并且将捕获到的值赋值给参数 id ，这样在控制器里就可以通过 <code>this.get</code> 方法 来获取该值。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  detailAction(){\n    let id = this.get(\'id\');\n  }\n}\n</code></pre>\n<p>如果正则里含有多个子分组，那么可以通过 <code>:1</code>，<code>:2</code>，<code>:3</code> 来获取对应的值。</p>\n<pre><code class=\"lang-js\">export default [\n  [/^article\\/(\\d+)$/, {\n    get: \"home/article/detail?id=:1\",\n    delete: \"home/article/delete?id=:1\",\n    post: \"home/article/save?id=:1\"\n  }]\n];\n</code></pre>\n<h4 id=\"-\">规则路由</h4>\n<p>规则路由是一种字符串匹配方式，但支持含有一些动态的值。如：</p>\n<pre><code class=\"lang-js\">export default [\n  [\'group/:year/:month\', \"home/group/list\"]\n]\n</code></pre>\n<p>假如访问的 URL 为 <code>http://www.example.com/group/2015/10</code>，那么会命中该项规则，得到的 pathname 为 <code>home/group/list</code>，同时会添加 2 个参数 <code>year</code> 和 <code>month</code>，这2个参数可以在控制器里通过 <code>this.get</code> 方法来获取。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  listAction(){\n    let year = this.get(\'year\');\n    let month = this.get(\'month\');\n  }\n}\n</code></pre>\n<h4 id=\"-\">静态路由</h4>\n<p>静态路由是一种纯字符串的完全匹配方式，写法和识别都很简单，功能也相对要弱很多。</p>\n<pre><code class=\"lang-js\">export default [\n  [\"list\", \"home/article/list\"]\n]\n</code></pre>\n<p>假如访问的 URL 为 <code>http://www.example.com/list</code>，那么替换后的 pathname 为 <code>home/article/list</code>。</p>\n<h4 id=\"-\">优化路由性能</h4>\n<p>上面已经说到，自定义路由是个数组，数组每一项是个具体的路由规则，匹配时是从前向后逐一进行匹配。如果这个路由表比较大的话，可能会有性能问题。</p>\n<p>为了避免有性能问题，ThinkJS 提供了一种更加高效的自定义路由方式，按模块来配置路由。使用这种方式，路由配置格式跟上面稍微有所不同。</p>\n<h5 id=\"common-config-route-js\">common/config/route.js</h5>\n<p>使用这种方式后，通用模块里的路由配置不再配置具体的路由规则，而是配置哪些规则命中到哪个模块。如：</p>\n<pre><code class=\"lang-js\">export default {\n  admin: { \n    reg: /^admin/ //命中 admin 模块的正则\n  },\n  home: { //默认走 home 模块\n\n  }\n}\n</code></pre>\n<h5 id=\"admin-config-route-js\">admin/config/route.js</h5>\n<p>admin 模块配置 admin 下的具体路由规则。</p>\n<pre><code class=\"lang-js\">export default [\n  [/^admin\\/(?!api).*$/, \'admin/index\'],\n  [/^admin\\/api\\/(\\w+?)(?:\\/([\\d,]*))?$/, \'admin/:1?id=:2&amp;resource=:1\'],\n];\n</code></pre>\n<hr>\n<p>假设访问的 URL 为 <code>http://www.example.com/admin/api</code>，那么解析后的 pathname 为 <code>admin/api</code>，匹配 <code>common</code> 里的规则时会命中 <code>admin</code> 模块，然后再对 <code>admin</code> 模块下的路由规则进行逐一匹配。通过这种方式后就可以大大减少路由规则匹配的数量，提供匹配效率。</p>\n<h3 id=\"-\">自定义首页路由</h3>\n<p>首页默认执行的是 index controller 里的 indexAction。有些项目里希望对首页路由自定义，但配置 <code>[\'\', \'index/list\']</code> 并不管用。</p>\n<p>ThinkJS 为了性能上的考虑不支持对首页进行自定义路由，因为更多情况下首页是不用自定义的，并且访问的量比较大。如果支持自定义，每次都要把自定义路由过一遍，比较费性能。</p><p>文章来源：<span style=\"line-height: 1.8;\"><a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></span></p><p><br></p>', '', '前端汇', '2017-07-11 19:21:25', '68', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('28', '数据库配置', '', '<h3 id=\"-\">数据库配置</h3>\n<p>数据库默认配置如下，可以在 <code>src/common/config/db.js</code> 中进行修改：</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'mysql\',\n  log_sql: true,\n  log_connect: true,\n  adapter: {\n    mysql: {\n      host: \'127.0.0.1\',\n      port: \'\',\n      database: \'\', //数据库名称\n      user: \'\', //数据库帐号\n      password: \'\', //数据库密码\n      prefix: \'think_\',\n      encoding: \'utf8\'\n    },\n    mongo: {\n\n    }\n  }\n};\n</code></pre>\n<p>也可以在其他模块下配置，这样请求该模块时就会使用对应的配置。</p>\n<h3 id=\"-\">数据表定义</h3>\n<p>默认情况下，模型名和数据表名都是一一对应的。假设数据表前缀是 <code>think_</code>，那么 <code>user</code> 模型对应的数据表为 <code>think_user</code>，<code>user_group</code> 模型对应的数据表为 <code>think_user_group</code>。</p>\n<p>如果需要修改，可以通过下面 2 个属性进行：</p>\n<ul>\n<li><code>tablePrefix</code> 表前缀</li>\n<li><code>tableName</code> 表名，不包含前缀</li>\n</ul>\n<h4 id=\"es6-\">ES6 方式</h4>\n<pre><code class=\"lang-js\">export default class extends think.model.base {\n  init(...args){\n    super.init(...args);\n    this.tablePrefix = \'\'; //将数据表前缀设置为空\n    this.tableName = \'user2\'; //将对应的数据表名设置为 user2\n  }\n}\n</code></pre>\n<h4 id=\"-\">动态创建类方式</h4>\n<pre><code class=\"lang-js\">module.exports = think.model({\n  tablePrefix: \'\', //直接通过属性来设置表前缀和表名\n  tableName: \'user2\',\n  init: function(){\n    this.super(\'init\', arguments);\n  }\n})\n</code></pre>\n<h3 id=\"-\">修改主键</h3>\n<p>模型默认的主键为 <code>id</code>，如果数据表里的 Primary Key 设置不是 id，那么需要在模型中设置主键。</p>\n<pre><code class=\"lang-js\">export default class extends think.model.base {\n  init(...args){\n    super.init(...args);\n    this.pk = \'user_id\'; //将主键字段设置为 user_id\n  }\n}\n</code></pre>\n<p><code>count</code>，<code>sum</code>，<code>min</code>，<code>max</code> 等很多查询操作都会用到主键，用到这些操作时需要修改主键。</p>\n<h3 id=\"-\">分布式数据库</h3>\n<p>大的系统中，经常有多个数据库用来做读写分离，从而提高数据库的操作性能。ThinkJS 里可以通过 <code>parser</code> 来自定义解析，可以在文件 <code>src/common/config/db.js</code> 中修改：</p>\n<pre><code class=\"lang-js\">//读配置\nconst MYSQL_READ = {\n  host: \'10.0.10.1\',\n}\n//写配置\nconst MYSQL_WRITE = {\n  host: \'10.0.10.2\'\n}\nexport default {\n  host: \'127.0.0.l\',\n  adapter: {\n    mysql: { \n      parser: function(options){ //mysql 的配置解析方法\n        let sql = options.sql; //接下来要执行的 SQL 语句\n        if(sql.indexOf(\'SELECT\') === 0){ //SELECT 查询\n          return MYSQL_READ;\n        }\n        return MYSQL_WRITE;\n      }\n    }\n  }\n}\n</code></pre>\n<p>parser 解析的参数 <code>options</code> 里会包含接下来要执行的 SQL 语句，这样就很方便的在 parser 里返回对应的数据库配置。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '前端汇', '2017-07-14 10:02:04', '42', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('29', 'CRUD 操作', '', '<h3 id=\"-\">添加数据</h3>\n<h4 id=\"-\">添加一条数据</h4>\n<p>使用 <code>add</code> 方法可以添加一条数据，返回值为插入数据的 id。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * addAction(){\n    let model = this.model(\'user\');\n    let insertId = yield model.add({name: \'xxx\', pwd: \'yyy\'});\n  }\n}\n</code></pre>\n<h4 id=\"-\">添加多条数据</h4>\n<p>使用 <code>addMany</code> 方法可以添加多条数据，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * addAction(){\n    let model = this.model(\'user\');\n    let insertId = yield model.addMany([\n      {name: \'xxx\', pwd: \'yyy\'},\n      {name: \'xxx1\', pwd: \'yyy1\'}\n    ]);\n  }\n}\n</code></pre>\n<h4 id=\"thenadd\">thenAdd</h4>\n<p>数据库设计时，我们经常需要把某个字段设为唯一，表示这个字段值不能重复。这样添加数据的时候只能先去查询下这个数据值是否存在，如果不存在才进行插入操作。</p>\n<p>模型中提供了 <code>thenAdd</code> 方法简化这一操作。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * addAction(){\n    let model = this.model(\'user\');\n    //第一个参数为要添加的数据，第二个参数为添加的条件，根据第二个参数的条件查询无相关记录时才会添加\n    let result = yield model.thenAdd({name: \'xxx\', pwd: \'yyy\'}, {name: \'xxx\'});\n    // result returns {id: 1000, type: \'add\'} or {id: 1000, type: \'exist\'}\n  }\n}\n</code></pre>\n<h3 id=\"-\">更新数据</h3>\n<h4 id=\"update\">update</h4>\n<p>更新数据使用 <code>update</code> 方法，返回值为影响的行数。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controlle.base {\n  * updateAction(){\n    let model = this.model(\'user\');\n    let affectedRows = yield model.where({name: \'thinkjs\'}).update({email: \'admin@thinkjs.org\'});\n  }\n}\n</code></pre>\n<p>默认情况下更新数据必须添加 where 条件，以防止误操作导致所有数据被错误的更新。如果确认是更新所有数据的需求，可以添加 <code>1=1</code> 的 where 条件进行，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controlle.base {\n  * updateAction(){\n    let model = this.model(\'user\');\n    let affectedRows = yield model.where(\'1=1\').update({email: \'admin@thinkjs.org\'});\n  }\n}\n</code></pre>\n<h4 id=\"increment\">increment</h4>\n<p>可以通过 <code>increment</code> 方法给符合条件的字段增加特定的值，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.base {\n  updateViewNums(id){\n    return this.where({id: id}).increment(\'view_nums\', 1); //将阅读数加 1\n  }\n}\n</code></pre>\n<h4 id=\"decrement\">decrement</h4>\n<p>可以通过 <code>decrement</code> 方法给符合条件的字段减少特定的值，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.base {\n  updateViewNums(id){\n    return this.where({id: id}).decrement(\'coins\', 10); //将金币减 10 \n  }\n}\n</code></pre>\n<h3 id=\"-\">查询数据</h3>\n<p>模型中提供了多种方式来查询数据，如：查询单条数据，查询多条数据，读取字段值，读取最大值，读取总条数等。</p>\n<h4 id=\"-\">查询单条数据</h4>\n<p>可以使用 <code>find</code> 方法查询单条数据，返回值为对象。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * listAction(){\n    let model = this.model(\'user\');\n    let data = yield model.where({name: \'thinkjs\'}).find();\n    //data returns {name: \'thinkjs\', email: \'admin@thinkjs.org\', ...}\n  }\n}\n</code></pre>\n<p>如果数据表没有对应的数据，那么返回值为空对象 <code>{}</code>，可以通过 <code>think.isEmpty</code> 方法来判断返回值是否为空。</p>\n<h4 id=\"-\">查询多条数据</h4>\n<p>可以使用 <code>select</code> 方法查询多条数据，返回值为数据。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * listAction(){\n    let model = this.model(\'user\');\n    let data = yield model.limit(2).select();\n    //data returns [{name: \'thinkjs\', email: \'admin@thinkjs.org\'}, ...]\n  }\n}\n</code></pre>\n<p>如果数据表中没有对应的数据，那么返回值为空数组 <code>[]</code>，可以通过 <code>think.isEmpty</code> 方法来判断返回值是否为空。</p>\n<h4 id=\"-\">分页查询数据</h4>\n<p>页面中经常遇到按分页来展现某些数据，这种情况下就需要先查询总的条数，然后在查询当前分页下的数据。查询完数据后还要计算有多少页。模型中提供了 <code>countSelect</code> 方法来方便这一操作，会自动进行总条数的查询。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * listAction(){\n    let model = this.model(\'user\');\n    let data = yield model.page(this.get(\'page\'), 10).countSelect();\n  }\n}\n</code></pre>\n<p>返回值格式如下：</p>\n<pre><code class=\"lang-js\"> {\n  numsPerPage: 10, //每页显示的条数\n  currentPage: 1, //当前页\n  count: 100, //总条数\n  totalPages: 10, //总页数\n  data: [{ //当前页下的数据列表\n    name: \'thinkjs\',\n    email: \'admin@thinkjs.org\'\n  }, ...]\n  }\n</code></pre>\n<p>如果传递的当前页数超过了页数范围，可以通过传递参数进行修正。<code>true</code> 为修正到第一页， <code>false</code> 为修正到最后一页，即： <code>countSelect(true)</code> 或 <code>countSelect(false)</code>。</p>\n<p>如果总条数无法直接查询，可以将总条数作为参数传递进去，如： <code>countSelect(1000)</code>，表示总条数有1000条。</p>\n<h4 id=\"count\">count</h4>\n<p>可以通过 <code>count</code> 方法查询符合条件的总条数，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.base {\n  getMin(){\n    //查询 status 为 publish 的总条数\n    return this.where({status: \'publish\'}).count();\n  }\n}\n</code></pre>\n<h4 id=\"sum\">sum</h4>\n<p>可以通过 <code>sum</code> 方法查询符合条件的字段总和，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.base {\n  getMin(){\n    //查询 status 为 publish 字段 view_nums 的总和\n    return this.where({status: \'publish\'}).sum(\'view_nums\');\n  }\n}\n</code></pre>\n<h4 id=\"max\">max</h4>\n<p>可以通过 <code>max</code> 方法查询符合条件的最大值，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.base {\n  getMin(){\n    //查询 status 为 publish，字段 comments 的最大值\n    return this.where({status: \'publish\'}).max(\'comments\');\n  }\n}\n</code></pre>\n<h4 id=\"min\">min</h4>\n<p>可以通过 <code>min</code> 方法查询符合条件的最小值，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.base {\n  getMin(){\n    //查询 status 为 publish，字段 comments 的最小值\n    return this.where({status: \'publish\'}).min(\'comments\');\n  }\n}\n</code></pre>\n<h4 id=\"-\">查询缓存</h4>\n<p>为了性能优化，项目中经常要对一些从数据库中查询的数据进行缓存。如果手工将查询的数据进行缓存，势必比较麻烦，模型中直接提供了 <code>cache</code> 方法来设置查询缓存。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.base {\n  getList(){\n    //设定缓存 key 和缓存时间\n    return this.cache(\'get_list\', 3600).where({id: {\'&gt;\': 100}}).select();\n  }\n}\n</code></pre>\n<p>上面的代码为对查询结果进行缓存，如果已经有了缓存，直接从缓存里读取，没有的话才从数据库里查询。缓存保存的 key 为 <code>get_list</code>，缓存时间为一个小时。</p>\n<p>也可以不指定缓存 key，这样会自动根据 SQL 语句生成一个缓存 key。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.base {\n  getList(){\n    //只设定缓存时间\n    return this.cache(3600).where({id: {\'&gt;\': 100}}).select();\n  }\n}\n</code></pre>\n<h5 id=\"-\">缓存配置</h5>\n<p>缓存配置为模型配置中的 <code>cache</code> 字段，如：</p>\n<pre><code class=\"lang-js\">export default {\n  cache: {\n    on: true,\n    type: \'\', \n    timeout: 3600\n  }\n}\n</code></pre>\n<ul>\n<li><code>on</code> 数据库缓存配置的总开关，关闭后即使程序中调用 <code>cache</code> 方法也无效。</li>\n<li><code>type</code> 缓存配置类型，默认为内存，支持的缓存类型请见 <a href=\"./adapter_cache.html\">Adapter -&gt; Cache</a>。</li>\n<li><code>timeout</code> 默认缓存时间。</li>\n</ul>\n<h3 id=\"-\">删除数据</h3>\n<p>可以使用 <code>delete</code> 方法来删除数据，返回值为影响的行数。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * deleteAction(){\n    let model = this.model(\'user\');\n    let affectedRows = yield model.where({id: [\'&gt;\', 100]}).delete();\n  }\n}\n</code></pre>\n<hr>\n<p>模型中更多的操作方式请见相关的 <a href=\"./api_model.html\">API -&gt; model</a>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '前端汇', '2017-07-14 10:02:10', '42', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('30', '事务', '', '<p>模型中提供了对事务操作的支持，但前提需要数据库支持事务。</p>\n<p><code>Mysql</code> 中的 <code>InnoDB</code> 和 <code>BDB</code> 存储引擎支持事务，如果在 Mysql 下使用事务的话，需要将数据库的存储引擎设置为 InnoDB 或 BDB。</p>\n<p><code>SQLite</code> 直接支持事务。</p>\n<h3 id=\"-\">使用事务</h3>\n<p>模型中提供了 <code>startTrans</code>，<code>commit</code> 和 <code>rollback</code> 3 种方法来操作事务。</p>\n<ul>\n<li><code>startTrans</code> 开启事务</li>\n<li><code>commit</code> 正常操作后，提交事务</li>\n<li><code>rollback</code> 操作异常后进行回滚</li>\n</ul>\n<h4 id=\"es6-\">ES6 方式</h4>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    let model = this.model(\'user\');\n    try{\n      yield model.startTrans();\n      let userId = yield model.add({name: \'xxx\'});\n      let insertId = yield this.model(\'user_group\').add({user_id: userId, group_id: 1000});\n      yield model.commit();\n    }catch(e){\n      yield model.rollback();\n    }\n  }\n}\n</code></pre>\n<h4 id=\"-\">动态创建类的方式</h4>\n<pre><code class=\"lang-js\">module.exports = think.controller({\n  indexAction: function(self){\n    var model = this.model(\'user\');\n    return model.startTrans().then(function(){\n      return model.add({name: \'xxx\'});\n    }).then(function(userId){\n      return self.model(\'user_group\').add({user_id: userId, group_id: 1000})\n    }).then(function(){\n      return self.commit();\n    }).catch(function(err){\n      return self.rollback();\n    });\n  }\n})\n</code></pre>\n<h3 id=\"transaction-\">transaction 方法</h3>\n<p>使用事务时，要一直使用 <code>startTrans</code>，<code>commit</code> 和 <code>rollback</code> 这 3 个方法进行操作，使用起来有一些不便。为了简化这一操作，模型中提供了 <code>transaction</code> 方法来更加方便的处理事务。</p>\n<h4 id=\"es6-\">ES6 方式</h4>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(self){\n    let model = this.model(\'user\');\n    let insertId = yield model.transaction( function * (){\n      let userId = yield model.add({name: \'xxx\'});\n      return yield self.model(\'user_group\').add({user_id: userId, group_id: 1000});\n    })\n  }\n}\n</code></pre>\n<p>注：Arrow Function 无法和 <code>*/yield</code> 一起写，所以上面为 <code>function *</code>。如果想使用 Arrow Function，可以使用 async，如： <code>async () =&gt; {}</code>。</p>\n<h4 id=\"-\">使用动态创建类的方式</h4>\n<pre><code class=\"lang-js\">module.exports = think.controller({\n  indexAction: function(self){\n    var model = this.model(\'user\');\n    return model.transaction(function(){\n      return model.add({name: \'xxx\'}).then(function(userId){\n        return self.model(\'user_group\').add({user_id: userId, group_id: 1000});\n      });\n    }).then(function(insertId){\n\n    }).catch(function(err){\n\n    })\n  }\n})\n</code></pre>\n<hr>\n<p>transaction 接收一个回调函数，这个回调函数中处理真正的逻辑，并需要返回。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '前端汇', '2017-07-14 10:02:15', '39', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('31', '关联模型', '', '<p>数据库中表经常会跟其他数据表有关联，数据操作时需要连同关联的表一起操作。如：一个博客文章会有分类、标签、评论，以及属于哪个用户。</p>\n<p>ThinkJS 中支持关联模型，让处理这类操作非常简单。</p>\n<h3 id=\"-\">支持的类型</h3>\n<p>关联模型中支持常见的 4 类关联关系。如：</p>\n<ul>\n<li><code>think.model.HAS_ONE</code> 一对一模型</li>\n<li><code>think.model.BELONG_TO</code> 一对一属于</li>\n<li><code>think.model.HAS_MANY</code> 一对多</li>\n<li><code>think.model.MANY_TO_MANY</code> 多对多</li>\n</ul>\n<h3 id=\"-\">创建关联模型</h3>\n<p>可以通过命令 <code>thinkjs model [name] --relation</code> 来创建关联模型。如：</p>\n<pre><code class=\"lang-sh\">thinkjs model home/post --relation\n</code></pre>\n<p>会创建模型文件 <code>src/home/model/post.js</code>。</p>\n<h3 id=\"-\">指定关联关系</h3>\n<p>可以通过 <code>relation</code> 属性来指定关联关系。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n  init(...args){\n    super.init(...args);\n    //通过 relation 属性指定关联关系，可以指定多个关联关系\n    this.relation = {\n      cate: {},\n      comment: {} \n    };\n  }\n}\n</code></pre>\n<p>也可以直接使用 ES7 里的语法直接定义 <code>relation</code> 属性。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n\n  //直接定义 relation 属性\n  relation = {\n    cate: {},\n    comment: {} \n  };\n\n  init(...args){\n    super.init(...args);\n  }\n}\n</code></pre>\n<h4 id=\"-\">单个关系模型的数据格式</h4>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n  init(...args){\n    super.init(...args);\n    this.relation = {\n      cate: {\n        type: think.model.MANY_TO_MANY, //relation type\n        model: \'\', //model name\n        name: \'profile\', //data name\n        key: \'id\', \n        fKey: \'user_id\', //forign key\n        field: \'id,name\',\n        where: \'name=xx\',\n        order: \'\',\n        limit: \'\',\n        rModel: \'\',\n        rfKey: \'\'\n      },\n    };\n  }\n}\n</code></pre>\n<p>各个字段含义如下：</p>\n<ul>\n<li><code>type</code> 关联关系类型</li>\n<li><code>model</code> 关联表的模型名，默认为配置的 key，这里为 <code>cate</code></li>\n<li><code>name</code> 对应的数据字段名，默认为配置的 key，这里为 <code>cate</code></li>\n<li><code>key</code> 当前模型的关联 key</li>\n<li><code>fKey</code> 关联表与只对应的 key</li>\n<li><code>field</code> 关联表查询时设置的 field，如果需要设置，必须包含 <code>fKey</code> 对应的值</li>\n<li><code>where</code> 关联表查询时设置的 where 条件</li>\n<li><code>order</code> 关联表查询时设置的 order</li>\n<li><code>limit</code> 关联表查询时设置的 limit</li>\n<li><code>page</code> 关联表查询时设置的 page</li>\n<li><code>rModel</code> 多对多下，对应的关联关系模型名</li>\n<li><code>rfKey</code> 多对多下，对应里的关系关系表对应的 key</li>\n</ul>\n<p>如果只用设置关联类型，不用设置其他字段信息，可以通过下面简单的方式：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n  init(...args){\n    super.init(...args);\n    this.relation = {\n      cate: think.model.MANY_TO_MANY\n    };\n  }\n}\n</code></pre>\n<h4 id=\"has_one\">HAS_ONE</h4>\n<p>一对一关联，表示当前表含有一个附属表。</p>\n<p>假设当前表的模型名为 <code>user</code>，关联表的模型名为 <code>info</code>，那么配置中字段 <code>key</code> 的默认值为 <code>id</code>，字段 <code>fKey</code> 的默认值为 <code>user_id</code>。</p>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n  init(..args){\n    super.init(...args);\n    this.relation = {\n      info: think.model.HAS_ONE\n    };\n  }\n}\n</code></pre>\n<p>执行查询操作时，可以得到类似如下的数据：</p>\n<pre><code class=\"lang-js\">[\n  {\n    id: 1,\n    name: \'111\',\n    info: { //关联表里的数据信息\n      user_id: 1,\n      desc: \'info\'\n    }\n  }, ...]\n</code></pre>\n<h4 id=\"belong_to\">BELONG_TO</h4>\n<p>一对一关联，属于某个关联表，和 HAS_ONE 是相反的关系。</p>\n<p>假设当前模型名为 <code>info</code>，关联表的模型名为 <code>user</code>，那么配置字段 <code>key</code> 的默认值为 <code>user_id</code>，配置字段 <code>fKey</code> 的默认值为 <code>id</code>。</p>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n  init(..args){\n    super.init(...args);\n    this.relation = {\n      user: think.model.BELONG_TO\n    };\n  }\n}\n</code></pre>\n<p>执行查询操作时，可以得到类似下面的数据：</p>\n<pre><code class=\"lang-js\">[\n  {\n    id: 1,\n    user_id: 1,\n    desc: \'info\',\n    user: {\n      name: \'thinkjs\'\n    }\n  }, ...\n]\n</code></pre>\n<h4 id=\"has_many\">HAS_MANY</h4>\n<p>一对多的关系。</p>\n<p>加入当前模型名为 <code>post</code>，关联表的模型名为 <code>comment</code>，那么配置字段 <code>key</code> 默认值为 <code>id</code>，配置字段 <code>fKey</code> 默认值为 <code>post_id</code>。</p>\n<pre><code class=\"lang-js\">\'use strict\';\n/**\n * relation model\n */\nexport default class extends think.model.relation {\n  init(...args){\n    super.init(...args);\n\n    this.relation = {\n      comment: {\n        type: think.model.HAS_MANY\n      }\n    };\n  }\n}\n</code></pre>\n<p>执行查询数据时，可以得到类似下面的数据：</p>\n<pre><code class=\"lang-js\">[{\n  id: 1,\n  title: \'first post\',\n  content: \'content\',\n  comment: [{\n    id: 1,\n    post_id: 1,\n    name: \'welefen\',\n    content: \'first comment\'\n  }, ...]\n}, ...]\n</code></pre>\n<p>如果关联表的数据需要分页查询，可以通过 <code>page</code> 参数进行，如：</p>\n<pre><code class=\"lang-js\">\'use strict\';\n/**\n * relation model\n */\nexport default class extends think.model.relation {\n  init(...args){\n    super.init(...args);\n\n    this.relation = {\n      comment: {\n        type: think.model.HAS_MANY\n      }\n    };\n  }\n  getList(page){\n    return this.setRelation(\'comment\', {page: page}).select();\n  }\n}\n</code></pre>\n<p>除了用 <code>setRelation</code> 来合并参数外，可以将参数设置为函数，合并参数时会自动执行该函数。</p>\n<h4 id=\"many_to_many\">MANY_TO_MANY</h4>\n<p>多对多关系。</p>\n<p>假设当前模型名为 <code>post</code>，关联模型名为 <code>cate</code>，那么需要一个对应的关联关系表。配置字段 <code>rModel</code> 默认值为 <code>post_cate</code>，配置字段 <code>rfKey</code> 默认值为 <code>cate_id</code>。</p>\n<pre><code class=\"lang-js\">\'use strict\';\n/**\n * relation model\n */\nexport default class extends think.model.relation {\n  init(...args){\n    super.init(...args);\n\n    this.relation = {\n      cate: {\n        type: think.model.MANY_TO_MANY,\n        rModel: \'post_cate\',\n        rfKey: \'cate_id\'\n      }\n    };\n  }\n}\n</code></pre>\n<p>查询出来的数据结构为：</p>\n<pre><code class=\"lang-js\">[{\n  id: 1,\n  title: \'first post\',\n  cate: [{\n    id: 1,\n    name: \'cate1\',\n    post_id: 1\n  }, ...]\n}, ...]\n</code></pre>\n<h4 id=\"-\">关联死循环</h4>\n<p>如果 2 个关联表，一个设置对方为 HAS_ONE，另一个设置对方为 BELONG_TO，这样在查询关联表的数据时会将当前表又查询了一遍，并且会再次查询关联表，最终导致死循环。</p>\n<p>可以在配置里设置 <code>relation</code> 字段关闭关联表的关联查询功能，从而避免死循环。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n  init(..args){\n    super.init(...args);\n    this.relation = {\n      user: {\n        type: think.model.BELONG_TO,\n        relation: false //关联表 user 查询时关闭关联查询\n      }\n    };\n  }\n}\n</code></pre>\n<p>也可以设置只关闭当前模型的关联关系，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n  init(..args){\n    super.init(...args);\n    this.relation = {\n      user: {\n        type: think.model.BELONG_TO,\n        relation: \'info\' //关联表 user 查询时关闭对 info 模型的关联关系\n      }\n    };\n  }\n}\n</code></pre>\n<h3 id=\"-\">临时关闭关联关系</h3>\n<p>设置关联关系后，查询等操作都会自动查询关联表的数据。如果某些情况下不需要查询关联表的数据，可以通过 <code>setRelation</code> 方法临时关闭关联关系查询。</p>\n<h4 id=\"-\">全部关闭</h4>\n<p>通过 <code>setRelation(false)</code> 关闭所有的关联关系查询。</p>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n  init(...args){\n    super.init(...args);\n    this.relation = {\n      comment: think.model.HAS_MANY,\n      cate: think.model.MANY_TO_MANY\n    };\n  }\n  getList(){\n    return this.setRelation(false).select();\n  }\n}\n</code></pre>\n<h4 id=\"-\">部分启用</h4>\n<p>通过 <code>setRelation(\'comment\')</code> 只查询 <code>comment</code> 的关联数据，不查询其他的关联关系数据。</p>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n  init(...args){\n    super.init(...args);\n    this.relation = {\n      comment: think.model.HAS_MANY,\n      cate: think.model.MANY_TO_MANY\n    };\n  }\n  getList2(){\n    return this.setRelation(\'comment\').select();\n  }\n}\n</code></pre>\n<h4 id=\"-\">部分关闭</h4>\n<p>通过 <code>setRelation(\'comment\', false)</code> 关闭 <code>comment</code> 的关联关系数据查询。</p>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n  init(...args){\n    super.init(...args);\n    this.relation = {\n      comment: think.model.HAS_MANY,\n      cate: think.model.MANY_TO_MANY\n    };\n  }\n  getList2(){\n    return this.setRelation(\'comment\', false).select();\n  }\n}\n</code></pre>\n<h4 id=\"-\">重新全部启用</h4>\n<p>通过 <code>setRelation(true)</code> 重新启用所有的关联关系数据查询。</p>\n<pre><code class=\"lang-js\">export default class extends think.model.relation {\n  init(...args){\n    super.init(...args);\n    this.relation = {\n      comment: think.model.HAS_MANY,\n      cate: think.model.MANY_TO_MANY\n    };\n  }\n  getList2(){\n    return this.setRelation(true).select();\n  }\n}\n</code></pre>\n<h3 id=\"mongo-\">mongo 关联模型</h3>\n<p>该关联模型的操作不适合 mongo 模型，mongo 的关联模型请见 <a href=\"https://docs.mongodb.org/manual/tutorial/model-embedded-one-to-one-relationships-between-documents/\">https://docs.mongodb.org/manual/tutorial/model-embedded-one-to-one-relationships-between-documents/</a>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>\n<p><br></p>', '', '前端汇', '2017-07-14 10:02:26', '37', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('32', 'Mysql', '', '<p>ThinkJS 对 Mysql 操作有很好的支持，底层使用的库为 <a href=\"https://www.npmjs.com/package/mysql\">https://www.npmjs.com/package/mysql</a>。</p>\n<h3 id=\"-\">连接池</h3>\n<p>默认连接 Mysql 始终只有一个连接，如果想要多个连接，可以使用连接池的功能。修改配置 <code>sr/common/config/db.js</code>，如：</p>\n<pre><code class=\"lang-js\">export default {\n  connectionLimit: 10 //建立 10 个连接\n}\n</code></pre>\n<h3 id=\"socketpath\">socketPath</h3>\n<p>默认情况下是通过 host 和 port 来连接 Mysql 的，如果想通过 unix domain socket 来连接 Mysql，可以设置下面的配置：</p>\n<pre><code class=\"lang-js\">export default {\n  socketPath: \'/tmp/mysql.socket\'\n}\n</code></pre>\n<h3 id=\"ssl-options\">SSL options</h3>\n<p>可以通过下面的配置来指定通过 SSL 来连接：</p>\n<pre><code class=\"lang-js\">export default {\n  ssl: {\n    ca: fs.readFileSync(__dirname + \'/mysql-ca.crt\')\n  }\n}\n</code></pre>\n<h3 id=\"-emoji-\">数据库支持 emoji 表情</h3>\n<p>数据库的编码一般会设置为 <code>utf8</code>，但 utf8 并不支持 emoji 表情，如果需要数据库支持 emoji 表情，需要将数据库编码设置为 <code>utf8mb4</code>。</p>\n<p>同时需要将 <code>src/common/config/db.js</code> 里的 <code>encoding</code> 配置值修改为 <code>utf8mb4</code>。如：</p>\n<pre><code class=\"lang-js\">export default {\n  encoding: \'utf8mb4\'\n}\n</code></pre>\n<h3 id=\"error-handshake-inactivity-timeout\">Error: Handshake inactivity timeout</h3>\n<p>在某些 Node.js 版本下（如：4.2.0）连接 Mysql 时会出现下面的错误：</p>\n<pre><code class=\"lang-text\">Error: Handshake inactivity timeout\nat Handshake.sequence.on.on.on.on.on.self._connection._startTLS.err.code (/home/***/node_modules/mysql/lib/protocol/Protocol.js:154:17)\nat Handshake.emit (events.js:92:17)\nat Handshake._onTimeout (/home/***/node_modules/mysql/lib/protocol/sequences/Sequence.js:116:8)\nat Timer.listOnTimeout [as ontimeout] (timers.js:112:15)\n    --------------------\n    at Protocol._enqueue (/home/***/node_modules/mysql/lib/protocol/Protocol.js:135:48)\n    at Protocol.handshake (/home/***/node_modules/mysql/lib/protocol/Protocol.js:52:41)\n    at PoolConnection.connect (/home/***/node_modules/mysql/lib/Connection.js:119:18)\n    at Pool.getConnection (/home/***/node_modules/mysql/lib/Pool.js:45:23)\n    at Object.exports.register (/home/***/node_modules/hapi-plugin-mysql/lib/index.js:40:27)\n    at /home/***/node_modules/hapi/lib/plugin.js:242:14\n    at iterate (/home/***/node_modules/hapi/node_modules/items/lib/index.js:35:13)\n    at done (/home/***/node_modules/hapi/node_modules/items/lib/index.js:27:25)\n    at Object.exports.register (/home/***/node_modules/lout/lib/index.js:95:5)\n    at /home/***/node_modules/hapi/lib/plugin.js:242:14\n</code></pre>\n<p><code>解决方案：</code> 将 Node.js 升级到最新版本即可解决。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '前端汇', '2017-07-14 10:02:31', '47', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('33', 'MongoDB', '', '<p>ThinkJS 支持使用 MongoDB 数据库，底层使用 <a href=\"https://www.npmjs.com/package/mongodb\">mongodb</a> 模块。</p>\n<p>如果想在项目中使用 Mongoose 来代替默认的 Mongo 模型，可以参见： <a href=\"http://welefen.com/post/use-mongoose-in-thinkjs.html\">http://welefen.com/post/use-mongoose-in-thinkjs.html</a></p>\n<h3 id=\"-\">配置</h3>\n<p>使用 MongoDB 数据库，需要将模型中的配置 <code>type</code> 改为 <code>mongo</code>，修改配置文件 <code>src/common/config/db.js</code>：</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'mongo\'\n}\n</code></pre>\n<h4 id=\"-host\">多 HOST</h4>\n<p>可以将配置里的 <code>host</code> 字段设置为数据支持多 host 的功能，如：</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'mongo\',\n  adapter: {\n    mongo: {\n      host: [\'10.0.0.1\', \'10.0.0.2\'],\n      port: [\'1234\', \'5678\']\n    }\n  }\n}\n</code></pre>\n<p><code>注</code>：此配置项在 <code>2.0.14</code> 版本中支持。</p>\n<h4 id=\"-\">配置选项</h4>\n<p>如果要在连接 MongoDB 服务的时候添加额外的参数，可以通过在 <code>options</code> 里追加，如：</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'mongo\',\n  adapter: {\n    mongo: {\n      options: {\n        authSource: \'admin\',\n        replicaSet: \'xxx\'\n      }\n    }\n  }\n}\n</code></pre>\n<p>上面的配置后，连接 MongoDB 的 URL 变成类似于 <code>mongodb://127.0.0.1:27017/?authSource=admin&amp;replicaSet=xxx</code>。</p>\n<p>更多额外的配置请见 <a href=\"http://mongodb.github.io/node-mongodb-native/2.0/reference/connecting/connection-settings/\">http://mongodb.github.io/node-mongodb-native/2.0/reference/connecting/connection-settings/</a>。</p>\n<h3 id=\"-\">创建模型</h3>\n<p>可以通过命令 <code>thinkjs model [name] --mongo</code> 来创建模型，如：</p>\n<pre><code class=\"lang-js\">thinkjs model user --mongo\n</code></pre>\n<p>执行完成后，会创建文件 <code>src/common/model/user.js</code>。如果想创建在其他模块下，需要带上具体的模块名。如：</p>\n<pre><code class=\"lang-js\">thinkjs model home/user --mongo\n</code></pre>\n<p>会在 <code>home</code> 模块下创建模型文件，文件为 <code>src/home/model/user.js</code>。</p>\n<h3 id=\"-\">模型继承</h3>\n<p>模型需要继承 <code>think.model.mongo</code> 类，如果当前类不是继承该类，需要手动修改。</p>\n<h4 id=\"es6-\">ES6 语法</h4>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n\n}\n</code></pre>\n<h4 id=\"-\">动态创建类的方式</h4>\n<pre><code class=\"lang-js\">module.exports = think.model(\'mongo\', {\n\n})\n</code></pre>\n<h3 id=\"crud-\">CRUD 操作</h3>\n<p>CRUD 操作和 Mysql 中接口相同，具体请见 <a href=\"./model_intro.html#toc-d84\">模型 -&gt; 介绍</a>。</p>\n<h3 id=\"-\">创建索引</h3>\n<p>mongo 模型可以配置索引，在增删改查操作之前模型会自动去创建索引，配置放在 <code>indexes</code> 属性里。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  init(...args){\n    super.init(...args);\n    //配置索引\n    this.indexes = { \n\n    }\n  }\n}\n</code></pre>\n<h4 id=\"-\">单字段索引</h4>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  init(...args){\n    super.init(...args);\n    //配置索引\n    this.indexes = { \n      name: 1\n    }\n  }\n}\n</code></pre>\n<h4 id=\"-\">唯一索引</h4>\n<p>通过 <code>$unique</code> 来指定为唯一索引，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  init(...args){\n    super.init(...args);\n    //配置索引\n    this.indexes = { \n      name: {$unique: 1}\n    }\n  }\n}\n</code></pre>\n<h4 id=\"-\">多字段索引</h4>\n<p>可以将多个字段联合索引，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  init(...args){\n    super.init(...args);\n    //配置索引\n    this.indexes = { \n      email: 1\n      test: {\n        name: 1,\n        title: 1,\n        $unique: 1\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"-\">获取索引</h3>\n<p>可以通过方法 <code>getIndexes</code> 获取创建的索引。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  async indexAction(){\n    let model = this.model(\'user\');\n    let indexes = await model.getIndexes();\n  }\n}\n</code></pre>\n<h3 id=\"aggregate\">aggregate</h3>\n<p>可以通过 <code>aggregate</code> 方法进行混合操作。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  match(){\n    return this.aggregate([\n      {$match: {status: \'A\'}},\n      {$group: {_id: \"$cust_id\", total: {$sum: \"$amount\"}}}\n    ]);\n  }\n}\n</code></pre>\n<p>具体请见 <a href=\"https://docs.mongodb.org/manual/core/aggregation-introduction/\">https://docs.mongodb.org/manual/core/aggregation-introduction/</a>。</p>\n<h3 id=\"mapreduce\">MapReduce</h3>\n<p>可以通过 <code>mapReduce</code> 方法进行 MapReduce 操作。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  execMapReduce(){\n    let map = () =&gt; {\n      emit(this.cust_id, this.amount);\n    }\n    let reduce = (key, values) =&gt; {\n      return Array.sum(values);\n    }\n    return this.mapReduce(map, reduce, {\n      query: {status: \"A\"},\n      out: \"order_totals\"\n    })\n  }\n}\n</code></pre>\n<p>具体请见 <a href=\"https://docs.mongodb.org/manual/core/aggregation-introduction/#map-reduce\">https://docs.mongodb.org/manual/core/aggregation-introduction/#map-reduce</a>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>\n<p><br></p>', '', '前端汇', '2017-07-14 10:02:35', '47', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('34', 'SQLite', '', '<p>ThinkJS 中支持使用 SQLite 数据库，底层使用 <a href=\"https://www.npmjs.com/package/sqlite3\">sqlite3</a> 模块。</p>\n<h3 id=\"-\">配置</h3>\n<p>使用 SQLite，需要将模型中的配置 <code>type</code> 改为 <code>sqlite</code>，修改配置文件 <code>src/common/config/db.js</code>：</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'sqlite\'\n}\n</code></pre>\n<h3 id=\"-\">存储方式</h3>\n<p>SQLite 支持使用内存或者文件 2 种方式来存放数据，需要设置配置 <code>path</code>。</p>\n<h4 id=\"-\">内存方式</h4>\n<pre><code class=\"lang-js\">export default {\n  type: \'sqlite\',\n  adapter: {\n    sqlite: {\n      path: true, //使用内存来存储数据\n    }\n  }\n}\n</code></pre>\n<h4 id=\"-\">文件方式</h4>\n<p>文件方式需要设置存储 SQLite 数据的目录，默认为 <code>src/common/runtime/sqlite</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'sqlite\',\n  adatper: {\n    sqlite: {\n      path: \'/path/to/store/sqlite\' //设置存储数据文件的目录\n    }\n  }\n}\n</code></pre>\n<p>对应的数据表文件路径为 <code>path</code> + <code>/[name].sqlite</code>，默认情况下数据库 <code>demo</code> 对应的文件路径为 <code>src/common/runtime/sqlite/demo.sqlite</code>。</p>\n<h3 id=\"crud-\">CRUD 操作</h3>\n<p>CRUD 操作和 Mysql 相同，具体请见 <a href=\"./model_intro.html#toc-d84\">模型 -&gt; 介绍</a>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '前端汇', '2017-07-14 10:02:40', '47', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('35', 'PostgreSQL', '', '<p>ThinkJS 支持 <code>PostgreSQL</code>，底层使用 <a href=\"https://www.npmjs.com/package/pg\">pg</a> 模块。</p>\n<h3 id=\"-\">配置</h3>\n<p>使用 PostgreSQL，需要将模型中的配置 <code>type</code> 改为 <code>postgresql</code>，修改配置文件 <code>src/common/config/db.js</code>：</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'postgresql\',\n  adapter: {\n    postgresql: {\n\n    }\n  }\n}\n</code></pre>\n<h3 id=\"crud-\">CRUD 操作</h3>\n<p>CRUD 操作和 Mysql 相同，具体请见 <a href=\"./model_intro.html#toc-d84\">模型 -&gt; 介绍</a>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>\n<p><br></p>', '', '前端汇', '2017-07-14 10:02:44', '41', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('36', 'Adapter_Cache', '', '<p>在项目中，合理使用缓存对性能有很大的帮助。ThinkJS 提供了多种的缓存方式，包括：内存缓存、文件缓存、Memcache 缓存、Redis 缓存等。</p>\n<h3 id=\"-\">缓存类型</h3>\n<p>系统默认支持的缓存类型如下：</p>\n<ul>\n<li><code>memory</code> 内存缓存</li>\n<li><code>file</code> 文件缓存</li>\n<li><code>memcache</code> Memcache 缓存</li>\n<li><code>redis</code> Redis 缓存</li>\n</ul>\n<p>如果使用 <code>memcache</code> 缓存，需要设置 Memcache 配置信息，见 <a href=\"./config.html#memcache\">配置</a>。</p>\n<p>如果使用 <code>redis</code> 缓存，需要设置 Redis 配置信息，见 <a href=\"./config.html#redis\">配置</a>。</p>\n<h3 id=\"-\">缓存配置</h3>\n<p>默认缓存配置如下，可以在配置文件 <code>src/common/config/cache.js</code> 中进行修改：</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'file\', //缓存类型\n  timeout: 6 * 3600, //失效时间，单位：秒\n  adapter: { //不同 adapter 下的配置\n    file: {\n      path: think.RUNTIME_PATH + \'/cache\', //缓存文件的根目录\n      path_depth: 2, //缓存文件生成子目录的深度\n      file_ext: \'.json\' //缓存文件的扩展名\n    },\n    redis: {\n      prefix: \'thinkjs_\'\n    },\n    memcache: {\n      prefix: \'thinkjs_\'\n    }\n  }\n};\n</code></pre>\n<p><code>注</code>：<code>2.0.6</code> 版本开始添加了 adapter 配置。</p>\n<p>其中 <code>prefix</code> 在 <code>memcache</code> 和 <code>redis</code> 类型中使用，存储时会将缓存 key + prefix 作为新的 key 来存储，用于防止跟其他地方使用的缓存 key 冲突。如果不想设置 prefix，可以将 prefix 设置为空字符串，如：</p>\n<pre><code class=\"lang-js\">export default {\n  prefix: \'\' //将缓存 key 前缀设置为空\n}\n</code></pre>\n<h3 id=\"-\">使用缓存</h3>\n<p>可以通过 <code>think.cache</code> 方法对缓存进行增删改查操作，具体请见 <a href=\"./api_think.html#toc-7d7\">API -&gt; think</a>。</p>\n<p>如果当前使用场景在继承自 think.http.base 的类下，可以通过 <code>this.cache</code> 方法来操作缓存，具体请见 <a href=\".//api_think_http_base.html#cache-name-value-options\">API -&gt; think.http.base</a>。</p>\n<h3 id=\"-\">扩展缓存</h3>\n<p>可以通过下面的命令创建一个名为 <code>foo</code> 缓存类：</p>\n<pre><code class=\"lang-sh\">thinkjs adapter cache/foo\n</code></pre>\n<p>执行完成后，会创建文件 <code>src/common/adapter/cache/foo.js</code>。扩展缓存类需要实现如下的方法：</p>\n<pre><code class=\"lang-js\">export default class extends think.cache.base {\n  /**\n   * 初始化方法\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  init(options){\n    //set gc type &amp; start gc\n    this.gcType = \'cache_foo\';\n    think.gc(this);\n  }\n  /**\n   * 获取缓存\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n\n  }\n  /**\n   * 设置缓存\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   * @return {Promise}\n   */\n  set(name, value, timeout){\n\n  }\n  /**\n   * 删除缓存\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n\n  }\n  /**\n   * 缓存垃圾回收\n   * @return {Promise} []\n   */\n  gc(){\n\n  }\n}\n</code></pre>\n<p>框架里的 Cache 实现请见 <a href=\"https://github.com/75team/thinkjs/tree/master/src/adapter/cache\">https://github.com/75team/thinkjs/tree/master/src/adapter/cache</a>。</p>\n<h3 id=\"-adapter\">使用第三方缓存 Adapter</h3>\n<p>如何使用第三方的缓存 Adapter 请参见 <a href=\"./adapter_intro.html#toc-e7c\">Adapter -&gt; 介绍</a>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-14 12:22:40', '36', '0', '0', '0', '18', 'thinkjs,nodejs', '0', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('37', 'Adapter介绍', '', '<p>Adapter 是用来解决一类功能的多种实现，如：支持多种数据库，支持多种模版引擎等。系统默认支持的 Adapter 有：<code>Cache</code>，<code>Session</code>，<code>WebSocket</code>，<code>Db</code>，<code>Store</code>，<code>Template</code> 和 <code>Socket</code>。</p>\n<h3 id=\"-adapter\">创建 Adapter</h3>\n<p>可以通过命令 <code>thinkjs adapter [type]/[name]</code> 来创建 Adapter，如：</p>\n<pre><code class=\"lang-sh\">thinkjs adapter template/dot\n</code></pre>\n<p>创建一个名为 <code>dot</code> 的 Template Adapter，创建的文件路径为 <code>src/common/adapter/template/dot.js</code>。文件内容类似如下：</p>\n<pre><code class=\"lang-js\">export default class extends think.adapter.template {\n  /**\n   * init\n   * @return {[]}         []\n   */\n  init(...args){\n    super.init(...args);\n  }\n}\n</code></pre>\n<p>如果创建的类型之前不存在，会自动创建一个 Base 类，其他类会继承该类。</p>\n<h3 id=\"-adapter\">加载 Adapter</h3>\n<p>可以通过 <code>think.adapter</code> 方法加载对应的 Adapter，如：</p>\n<pre><code class=\"lang-js\">let Template = think.adapter(\'template\', \'dot\'); //加载名为 dot 的 Template Adapter\nlet instance = new Template(...args); //实例化 Adapter\n</code></pre>\n<h3 id=\"-adapter\">使用第三方 Adapter</h3>\n<p>加载 Adapter 时，系统会自动从 <code>src/common/adapter</code> 目录和系统目录查找对应的 Adapter，如果引入第三方的 Adapter，需要将 Adapter 注册进去，否则系统无法找到该 Adapter。</p>\n<p>可以通过 <code>think.adapter</code> 方法注册第三方的 Adapter，如：</p>\n<pre><code class=\"lang-js\">let DotTemplate = require(\'think-template-dot\');\nthink.adapter(\'template\', \'dot\', DotTemplate);\n</code></pre>\n<p>将文件存放在 <code>src/common/bootstrap/</code> 目录下，这样服务启动时就会自动加载。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-14 12:20:57', '40', '0', '0', '0', '18', 'thinkjs,nodejs', '0', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('38', 'adapter_Session', '', '<p>需要用户登录的网站基本上都离不开 Session，ThinkJS 里默认支持多种类型的 Session，如：<code>file</code>，<code>db</code>，<code>redis</code> 等。</p>\n<h3 id=\"-session-\">支持的 Session 类型</h3>\n<ul>\n<li><code>memory</code> 内存方式</li>\n<li><code>file</code> 文件类型</li>\n<li><code>db</code> 数据库类型</li>\n<li><code>redis</code> Redis 类型</li>\n</ul>\n<h5 id=\"db-session\">db Session</h5>\n<p>使用 <code>db</code> 类型的 Session 需要创建对应的数据表（如果是 MongoDB 则无需创建），可以用下面的 SQL 语句创建：</p>\n<pre><code class=\"lang-sql\">  DROP TABLE IF EXISTS `think_session`;\n  CREATE TABLE `think_session` (\n    `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n    `cookie` varchar(255) NOT NULL DEFAULT \'\',\n    `data` text,\n    `expire` bigint(11) NOT NULL,\n    PRIMARY KEY (`id`),\n    UNIQUE KEY `cookie` (`cookie`),\n    KEY `expire` (`expire`)\n  ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n</code></pre>\n<p>需要将 <code>think_</code> 改为 db 配置中的数据表前缀。</p>\n<h5 id=\"redis-session\">redis Session</h5>\n<p>使用 <code>redis</code> 类型的 Session 需要配置 Redis，具体见 <a href=\"./config.html#redis\">配置</a>。</p>\n<h3 id=\"session-\">Session 配置</h3>\n<p>Session 默认配置如下，可以在 <code>src/common/config/session.js</code> 中进行修改：</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'file\',\n  name: \'thinkjs\', //对应 cookie 的名称\n  secret: \'\', //Session 对应的 cookie 是否需要加密\n  timeout: 24 * 3600, //过期时间，默认为一天\n  cookie: { // cookie options\n    length: 32\n  },\n  adapter: {\n    file: {\n      path: think.RUNTIME_PATH + \'/session\'\n    }\n  }\n};\n</code></pre>\n<p><code>注</code>：<code>2.0.6</code> 版本开始添加了 adapter 配置。</p>\n<p>关于 Cookie 的配置请见 <a href=\"./config.html#cookie\">配置</a>。</p>\n<h3 id=\"session-\">Session 读写</h3>\n<p>Controller 或 Logic 里可以通过下面的方式读写 Session：</p>\n<h5 id=\"-session\">读取 Session</h5>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    //获取session\n    let value = yield this.session(\'userInfo\');\n  }\n}\n</code></pre>\n<h5 id=\"-session\">设置 Session</h5>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    //设置 session\n    yield this.session(\'userInfo\', data);\n  }\n}\n</code></pre>\n<h5 id=\"-session\">清除 Session</h5>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    //清除当前用户的 session\n    yield this.session();\n  }\n}\n</code></pre>\n<hr>\n<p>http 对象上可以通过 <code>http.session</code> 方法读写 Session，具体请见 <a href=\"./api_http.html#toc-b20\">API -&gt; http</a>。</p>\n<h3 id=\"-session\">扩展 Session</h3>\n<p>可以通过下面的命令创建 Session Adapter：</p>\n<pre><code class=\"lang-js\">thinkjs adapter session/foo\n</code></pre>\n<p>会创建文件 <code>src/common/adapter/session/foo.js</code>，需要实现下面的方法：</p>\n<pre><code class=\"lang-js\">export default class extends think.adapter.session {\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  init(options){\n\n  }\n  /**\n   * 获取 Session \n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n\n  }\n  /**\n   * 设置 Session\n   * @param {String} name  []\n   * @param {Mixed} value []\n   */\n  set(name, value){\n\n  }\n  /**\n   * 删除 Session\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n\n  }\n  /**\n   * 更新 Session\n   * @return {Promise} []\n   */\n  flush(){\n\n  }\n  /**\n   * 清除过期的 Session\n   * @return {Promise} []\n   */\n  gc(){\n\n  }\n}\n</code></pre>\n<p>框架里的 Session 实现请见 <a href=\"https://github.com/75team/thinkjs/tree/master/src/adapter/session\">https://github.com/75team/thinkjs/tree/master/src/adapter/session</a>。</p>\n<h3 id=\"-session-adapter\">使用第三方 Session Adapter</h3>\n<p>如何使用第三方的缓存 Adapter 请参见 <a href=\"./adapter_intro.html#toc-e7c\">Adapter -&gt; 介绍</a>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>', '', '', '2017-07-14 12:24:56', '50', '0', '0', '0', '18', 'thinkjs,nodejs', '0', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('39', 'WebSocket', '', '<p>项目里经常要要使用 WebSocket 来实现聊天等功能，ThinkJS 支持多种 WebSocket 库，如：<code>socket.io</code>，<code>sockjs</code> 等，并对这些库进行了一些简单的包装，让使用的接口一致。</p>\n<h3 id=\"-websocket\">开启 WebSocket</h3>\n<p>WebSocket 功能默认是关闭的，项目如果需要开启，可以修改配置文件 <code>src/common/config/websocket.js</code>：</p>\n<pre><code class=\"lang-js\">export default {\n  on: false, //是否开启 WebSocket\n  type: \'socket.io\', //使用的 WebSocket 库类型，默认为 socket.io\n  allow_origin: \'\', //允许的 origin\n  adapter: undefined, // socket 存储的 adapter，socket.io 下使用\n  path: \'\', //url path for websocket\n  messages: {\n    // open: \'home/websocket/open\',\n  }\n};\n</code></pre>\n<p>需要将配置 <code>on</code> 的值修改为 true，并重启 Node.js 服务。</p>\n<h3 id=\"-action-\">事件到 Action 的映射</h3>\n<p>ThinkJS 里对 WebSocket 的包装遵循了 <code>socket.io</code> 的机制，服务端和客户端之间通过事件来交互，这样服务端需要将事件名映射到对应的 Action，才能响应具体的事件。配置在 <code>messages</code> 字段，具体如下：</p>\n<pre><code class=\"lang-js\">export default {\n  messages: {\n    open: \'home/socketio/open\', // WebSocket 建立连接时处理的 Action\n    close: \'home/socketio/close\', // WebSocket 关闭时处理的 Action\n    adduser: \'home/socketio/adduser\', //adduser 事件处理的 Action\n  }\n}\n</code></pre>\n<p>其中 <code>open</code> 和 <code>close</code> 事件名固定，表示建立连接和断开连接的事件，其他事件均为自定义，项目里可以根据需要添加。</p>\n<h3 id=\"action-\">Action 处理</h3>\n<p>通过上面配置事件到 Action 的映射后，就可以在对应的 Action 作相应的处理。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  /**\n   * WebSocket 建立连接时处理\n   * @param  {} self []\n   * @return {}      []\n   */\n  openAction(self){\n    var socket = self.http.socket;\n    this.broadcast(\'new message\', {\n      username: socket.username,\n      message: self.http.data\n    });\n  }\n}\n</code></pre>\n<h4 id=\"emit\">emit</h4>\n<p>Action 里可以通过 <code>this.emit</code> 方法给当前 socket 发送事件，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  /**\n   * WebSocket 建立连接时处理\n   * @param  {} self []\n   * @return {}      []\n   */\n  openAction(self){\n    var socket = self.http.socket;\n    this.emit(\'new message\', \'connected\');\n  }\n}\n</code></pre>\n<h4 id=\"broadcast\">broadcast</h4>\n<p>Action 里可以通过 <code>this.broadcast</code> 方法给所有的 socket 广播事件，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  chatAction(self){\n    var socket = self.http.socket;\n    //广播给除当前 socket 之外的所有 sockets\n    this.broadcast(\'new message\', {msg: \'message\', username: \'xxx\'});\n  }\n}\n</code></pre>\n<p><code>注</code>：broadcast 方法默认是給除去当前 socket 的所有 sockets 发送事件，如果想包含当前的 socket，可以设置第三个参数值为 <code>true</code>。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  chatAction(self){\n    var socket = self.http.socket;\n    //广播给所有的 sockets，包含当前的 socket\n    this.broadcast(\'new message\', {msg: \'message\', username: \'xxx\'}, true);\n  }\n}\n</code></pre>\n<h4 id=\"socket-\">socket 对象</h4>\n<p>Action 里可以通过 <code>this.http.socket</code> 拿到当前的 socket 对象。</p>\n<h4 id=\"-\">事件数据</h4>\n<p>Action 里可以通过 <code>this.http.data</code> 拿到发送过来事件的数据。</p>\n<h3 id=\"socket-io\">socket.io</h3>\n<p><code>socket.io</code> 对 WebSocket 前后端都有封装，使用起来非常方便。</p>\n<h4 id=\"io-\">io 对象</h4>\n<p>在 Action 里可以通过 <code>this.http.io</code> 来获取 <code>io</code> 对象，该对象为 socket.io 的一个实例。</p>\n<p>io 对象包含的方法请见 <a href=\"http://socket.io/docs/server-api/#server()\">http://socket.io/docs/server-api/#server()</a>。</p>\n<h4 id=\"-path\">设置 path</h4>\n<p>设置被 socket.io 处理的路径，默认为 <code>/socket.io</code>。如果需要修改，可以修改下面的配置：</p>\n<pre><code class=\"lang-js\">export default {\n  path: \'/other_path\'\n}\n</code></pre>\n<p><code>注</code>：服务端修改了处理的路径后，客户端也要作对应的修改。</p>\n<h4 id=\"-adapter\">设置 adapter</h4>\n<p>使用多节点来部署 WebSocket 时，多节点之间可以借助 Redis 进行通信，这时可以设置 adapter 来实现。</p>\n<pre><code class=\"lang-js\">import redis from \'socket.io-redis\';\n\nexport default {\n  adapter: function(){\n    return redis({ host: \'localhost\', port: 6379 });\n  }\n}\n</code></pre>\n<p>具体请见 <a href=\"http://socket.io/docs/using-multiple-nodes/\">http://socket.io/docs/using-multiple-nodes/</a>。</p>\n<h4 id=\"socket-io-client\">socket.io client</h4>\n<p>浏览器端需要引入 socket.io client，下载地址为：<a href=\"http://socket.io/download/\">http://socket.io/download/</a>。</p>\n<pre><code class=\"lang-js\">var socket = io(\'http://localhost:8360\');\n//发送事件\nsocket.emit(\'name\', \'data\');\n//监听事件\nsocket.on(\'name\', function(data){\n\n})\n</code></pre>\n<p>也可以直接引入一个 CDN 地址：<a href=\"http://s4.qhimg.com/static/535dde855bc726e2/socket.io-1.2.0.js\">http://s4.qhimg.com/static/535dde855bc726e2/socket.io-1.2.0.js</a>。</p>\n<h4 id=\"-\">校验用户登录</h4>\n<p>WebSocket 建立连接时可以拿到 cookie，所以可以在 <code>open</code> 对应的 Action 里校验用户是否登录。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * openAction(){\n    let userInfo = yield this.session(\'userInfo\');\n    if(think.isEmpty(userInfo)){\n\n    }\n  }\n}\n</code></pre>\n<h4 id=\"-\">聊天代码示例</h4>\n<p>聊天示例代码请见：<a href=\"https://github.com/75team/thinkjs2-demos/tree/master/websocket-socket.io\">https://github.com/75team/thinkjs2-demos/tree/master/websocket-socket.io</a>。</p>\n<h3 id=\"sockjs\">SockJS</h3>\n<h4 id=\"-\">配置</h4>\n<p>使用 SockJS 库，需要将配置里的 type 修改为 <code>sockjs</code>，如：</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'sockjs\'\n}\n</code></pre>\n<h4 id=\"sockjs-\">sockjs 对象</h4>\n<p>Action 里可以通过 <code>this.http.sockjs</code> 拿到 sockjs 对象，该对象为 SockJS 类的一个实例。</p>\n<h4 id=\"-path\">设置 path</h4>\n<p>设置被 SockJS 处理的路径，默认为 <code>/sockjs</code>，可以通过下面的配置修改：</p>\n<pre><code class=\"lang-js\">export default {\n  path: \'/websocket\'\n}\n</code></pre>\n<h4 id=\"sockjs-client\">SockJS client</h4>\n<p>浏览器端需要引入 SockJS client，下载地址为：<a href=\"https://github.com/sockjs/sockjs-client\">https://github.com/sockjs/sockjs-client</a>。</p>\n<p>SockJS client 并没有做什么封装，所以需要额外做一层包装，变成事件的方式，以便跟包装后的服务端对应。包装方式参考如下：</p>\n<pre><code class=\"lang-js\">SockJS.prototype.emit = function(event, data){\n    this.send(JSON.stringify({event: event, data: data}));\n  }\nSockJS.prototype.events = {};\nSockJS.prototype.on = function(event, callback){\n  if(!(event in this.events)){\n    this.events[event] = [];\n  }\n  this.events[event].push(callback);\n}\nSockJS.prototype.onmessage = function(e) {\n  var data = JSON.parse(e.data);\n  var callbacks = this.events[data.event] || [];\n  callbacks.forEach(function(callback){\n    callback &amp;&amp; callback(data.data);\n  })\n};\nSockJS.prototype.onopen    = function()  {\n  this.onmessage(JSON.stringify({data: {event: \'open\'}}));\n};\nSockJS.prototype.onclose   = function()  {\n  this.onmessage(JSON.stringify({data: {event: \'close\'}}));\n};\n</code></pre>\n<p>通过上面的包装后就可以通过事件的方式来接收和发送消息了，如：</p>\n<pre><code class=\"lang-js\">var socket = new SockJS(\'/sockjs\'); //这里的路径必须和配置里相同，如果没有配置则为 /sockjs\n//监听事件\nsocket.on(\'add user\', function(data){\n\n});\n//发送事件\nsocket.emit(\'new message\', \'xxx\');\n</code></pre>\n<h4 id=\"-\">校验用户登录</h4>\n<p>SockJS 为了安全，在建立连接时不提供相关的 cookie，所以无法通过 cookie 来校验用户是否登录。可以先在页面里输出一个 token，建立连接时将该 token 发送用来校验是否已经登录。具体请见：<a href=\"https://github.com/sockjs/sockjs-node#authorisation\">https://github.com/sockjs/sockjs-node#authorisation</a>。</p>\n<h4 id=\"-\">聊天代码示例</h4>\n<p>聊天示例代码请见：<a href=\"https://github.com/75team/thinkjs2-demos/tree/master/websocket-sockjs\">https://github.com/75team/thinkjs2-demos/tree/master/websocket-sockjs</a>。</p>\n<h3 id=\"nginx-\">nginx 反向代理</h3>\n<p>nginx 从 <code>1.3.13</code> 版本开始支持反向代理 WebSocket 请求，如果在项目中使用，需要在 nginx 配置文件中添加如下的配置：</p>\n<pre><code class=\"lang-nginx\">proxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection \"upgrade\";\n</code></pre>\n<p><code>注</code>： 使用 <code>thinkjs</code> 命令创建项目时，会自动创建 nginx 配置文件，并且配置文件已经包含了上面 2 个配置，可以直接使用。</p>\n<p>nginx 代理 WebSocket 请求的文档请见 <a href=\"http://nginx.org/en/docs/http/websocket.html\">http://nginx.org/en/docs/http/websocket.html</a>。</p>\n<h3 id=\"-websocket-\">获取当前所有的 WebSocket 连接对象</h3>\n<p>可以通过 <code>thinkCache(thinkCache.WEBSOCKET)</code> 来获取所有的 WebSocket 连接对象，数组格式。</p>\n<h3 id=\"-\">如何实现私聊</h3>\n<p>ThinkJS 目前还没有私聊的机制，项目里可以通过获取所有的 WebSocket 连接然后找到对应的连接进行。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-14 12:26:21', '41', '0', '0', '0', '18', 'thinkjs,nodejs', '0', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('40', 'Template', '', '<p>Template Adapter 用来实现支持多种类型的模版引擎，如：<code>ejs</code>，<code>swig</code> 等。</p>\n<h3 id=\"-\">支持模版引擎类型</h3>\n<ul>\n<li><code>base</code></li>\n<li><code>ejs</code> ejs 模版引擎</li>\n<li><code>jade</code> jade 模板引擎</li>\n<li><code>swig</code> 一种支持模版继承的模版引擎</li>\n<li><code>nunjucks</code> 一种类似 jinja2 的模版引擎，功能非常强大</li>\n</ul>\n<h3 id=\"-\">模版引擎配置</h3>\n<p>模版引擎配置如下，可以在 <code>src/common/config/view.js</code> 中修改：</p>\n<pre><code class=\"lang-js\">export default {\n  type: \'ejs\',\n  adapter: { \n    ejs: { //额外的配置\n\n    }\n  }\n};\n</code></pre>\n<h3 id=\"-\">使用模版引擎</h3>\n<p>模版引擎会在视图里自动调用，默认情况不需要手工调用使用。如果在有些场景非要使用的话，可以通过下面的方式加载对应的模版引擎：</p>\n<pre><code class=\"lang-js\">let EjsTemplate = think.adapter(\'template\', \'ejs\');\nlet instance = new EjsTemplate(...args);\n</code></pre>\n<h3 id=\"-\">扩展模版引擎类型</h3>\n<p>可以通过下面的命令创建一个名为 <code>foo</code> Template 类：</p>\n<pre><code class=\"lang-js\">thinkjs adapter template/foo\n</code></pre>\n<p>执行完成后，会创建文件 <code>src/common/adapter/template/foo.js</code>。扩展缓存类需要实现如下的方法：</p>\n<pre><code class=\"lang-js\">export default class extends think.adapter.base {\n  /**\n   * get compiled content\n   * @params {String} templateFile 模版文件目录\n   * @params {Object} tVar 模版变量\n   * @params {Object} config 模版引擎配置\n   * @return {Promise} []\n   */\n  run(templateFile, tVar, config){\n\n  }\n}\n</code></pre>\n<p>框架里的 Template 实现请见 <a href=\"https://github.com/75team/thinkjs/tree/master/src/adapter/template\">https://github.com/75team/thinkjs/tree/master/src/adapter/template</a>。</p>\n<h3 id=\"-adapter\">使用第三方模版 Adapter</h3>\n<p>如何使用第三方的模版 Adapter 请参见 <a href=\"./adapter_intro.html#toc-e7c\">Adapter -&gt; 介绍</a>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>\n<p><br></p>', '', '', '2017-07-14 12:27:27', '45', '0', '0', '0', '18', 'thinkjs,nodejs', '0', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('41', 'Middleware', '', '<p>当处理用户的请求时，需要经过很多处理，如：解析参数，判断是否静态资源访问，路由解析，页面静态化判断，执行操作，查找模版，渲染模版等。项目里根据需要可能还会增加其他的一些处理，如：判断 IP 是否在黑名单中，CSRF 检测等。</p>\n<p>ThinkJS 里通过 middleware 来处理这些逻辑，每个逻辑都是一个独立的 middleware。在请求处理中埋很多 hook，每个 hook 串行执行一系列的 middleware，最终完成一个请求的逻辑处理。</p>\n<h3 id=\"hook-\">hook 列表</h3>\n<p>框架里包含的 hook 列表如下：</p>\n<ul>\n<li><code>request_begin</code> 请求开始</li>\n<li><code>payload_parse</code> 解析提交上来的数据</li>\n<li><code>payload_validate</code> 验证提交的数据</li>\n<li><code>resource</code> 静态资源请求处理</li>\n<li><code>route_parse</code> 路由解析</li>\n<li><code>logic_before</code> logic 处理之前</li>\n<li><code>logic_after</code> logic 处理之后</li>\n<li><code>controller_before</code> controller 处理之前</li>\n<li><code>controller_after</code> controller 处理之后</li>\n<li><code>view_before</code> 视图处理之前</li>\n<li><code>view_template</code> 视图文件处理</li>\n<li><code>view_parse</code> 视图解析</li>\n<li><code>view_filter</code> 视图内容过滤</li>\n<li><code>view_after</code> 视图处理之后</li>\n<li><code>response_end</code> 请求响应结束</li>\n</ul>\n<p>每个 hook 里调用多个 middleware 来完成处理，具体包含的 middleware 如下：</p>\n<pre><code class=\"lang-js\">export default {\n  request_begin: [],\n  payload_parse: [\'parse_form_payload\', \'parse_single_file_payload\', \'parse_json_payload\', \'parse_querystring_payload\'],\n  payload_validate: [\'validate_payload\'],\n  resource: [\'check_resource\', \'output_resource\'],\n  route_parse: [\'rewrite_pathname\', \'parse_route\'],\n  logic_before: [],\n  logic_after: [],\n  controller_before: [],\n  controller_after: [],\n  view_before: [],\n  view_template: [\'locate_template\'],\n  view_parse: [\'parse_template\'],\n  view_filter: [],\n  view_after: [],\n  response_end: []\n};\n</code></pre>\n<h3 id=\"-hook\">配置 hook</h3>\n<p>hook 默认执行的 middleware 往往不能满足项目的需求，可以通过配置修改 hook 对应要执行的 middleware 来完成，hook 的配置文件为 <code>src/common/config/hook.js</code>。</p>\n<pre><code class=\"lang-js\">export default {\n  payload_parse: [\'parse_xml\'], //解析 xml\n}\n</code></pre>\n<p>上面的配置会覆盖掉默认的配置值。如果在原有配置上增加的话，可以通过下面的方式：</p>\n<h4 id=\"-\">在前面追加</h4>\n<p>可以通过配置 <code>prepend</code> 让 middleware 作为前置追加：</p>\n<pre><code class=\"lang-js\">export default {\n  payload_parse: [\'prepend\', \'parse_xml\'], //在前面追加解析 xml\n}\n</code></pre>\n<h4 id=\"-\">在后面追加</h4>\n<p>可以通过配置 <code>append</code> 让 middleware 作为后置追加：</p>\n<pre><code class=\"lang-js\">export default {\n  payload_parse: [\'append\', \'parse_xml\'], //在后面追加解析 xml\n}\n</code></pre>\n<p><code>注</code>：建议使用追加的方式配置 middleware，系统的 middleware 名称可能在后续的版本中有所修改。</p>\n<h3 id=\"-hook\">执行 hook</h3>\n<p>可以通过 <code>think.hook</code> 方法执行一个对应的 hook，如：</p>\n<pre><code class=\"lang-js\">await think.hook(\'payload_parse\', http, data); //返回的是一个 Promise\n</code></pre>\n<p>在含有 <code>http</code> 对象的类中可以直接使用 <code>this.hook</code> 来执行 hook，如：</p>\n<pre><code class=\"lang-js\">await this.hook(\'payload_parse\', data);\n</code></pre>\n<h3 id=\"-middleware\">创建 middleware</h3>\n<p>ThinkJS 支持 2 种方式的 middleware，即：class 方式和 function 方式。可以根据 middleware 复杂度决定使用哪种方式。</p>\n<h4 id=\"class-\">class 方式</h4>\n<p>如果 middleware 需要执行的逻辑比较复杂，需要定义为 class 的方式。可以通过 <code>thinkjs</code> 命令来创建 middleware，在项目目录下执行如下的命令：</p>\n<pre><code class=\"lang-sh\">thinkjs middleware xxx\n</code></pre>\n<p>执行完成后，会看到对应的文件 <code>src/common/middleware/xxx.js</code>。</p>\n<h5 id=\"es6-\">ES6 方式</h5>\n<pre><code class=\"lang-js\">\'use strict\';\n/**\n * middleware\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n\n  }\n}\n</code></pre>\n<h5 id=\"-\">动态创建类的方式</h5>\n<pre><code class=\"lang-js\">\'use strict\';\n\n/**\n * middleware\n */\nmodule.exports = think.middleware({\n  /**\n   * run\n   * @return {} []\n   */\n  run: function(){\n\n  }\n})\n</code></pre>\n<p>middleware 里会将 <code>http</code> 传递进去，可以通过 <code>this.http</code> 属性来获取。逻辑代码放在 <code>run</code> 方法执行，如果含有异步操作，需要返回一个 <code>Promise</code> 或者使用 <code>*/yield</code>。</p>\n<h4 id=\"function-\">function 方式</h4>\n<p>如果 middleware 要处理的逻辑比较简单，可以直接创建为函数的形式。这种 middleware 不建议创建成一个独立的文件，而是放在一起统一处理。</p>\n<p>可以建立文件 <code>src/common/bootstrap/middleware.js</code>，该文件在服务启动时会自动被加载。可以在这个文件添加多个函数式的 middleware。如：</p>\n<pre><code class=\"lang-js\">think.middleware(\'parse_xml\', async http =&gt; {\n  let payload = await http.getPayload();\n  if (!payload) {\n    return;\n  }\n  ...\n});\n</code></pre>\n<p>函数式的 middleware 会将 <code>http</code> 对象作为一个参数传递进去，如果 middleware 里含有异步操作，需要返回一个 <code>Promise</code> 或者使用 Generator Function。</p>\n<p>以下是框架里解析 json payload 的实现：</p>\n<pre><code class=\"lang-js\">think.middleware(\'parse_json_payload\', http =&gt; {\n  let types = http.config(\'post.json_content_type\');\n  if (types.indexOf(http.type()) === -1) {\n    return;\n  }\n  return http.getPayload().then(payload =&gt; {\n    try{\n      http._post = JSON.parse(payload);\n    }catch(e){}\n  });\n});\n</code></pre>\n<h3 id=\"-\">解析后赋值</h3>\n<p>有些 middleware 可能会解析相关的数据，然后希望重新赋值到 <code>http</code> 对象上，如：解析传递过来的 xml 数据，但后续希望可以通过 <code>http.get</code> 方法来获取。</p>\n<ul>\n<li><code>http._get</code> 用来存放 GET 参数值，http.get(xxx) 从该对象获取数据</li>\n<li><code>http._post</code> 用来存放 POST 参数值，http.post(xxx) 从该对象获取数据</li>\n<li><code>http._file</code> 用来存放上传的文件值，http.file(xxx) 从该对象获取数据</li>\n</ul>\n<pre><code class=\"lang-js\">think.middleware(\'parse_xml\', async http =&gt; {\n  let payload = await http.getPayload();\n  if (!payload) {\n    return;\n  }\n  return parseXML(payload).then(data =&gt; {\n    http._post = data; //将解析后的数据赋值给 http._post，后续可以通过 http.post 方法来获取\n  });\n});\n</code></pre>\n<p>关于 <code>http</code> 对象更多信息请见 <a href=\"./api_http.html\">API -&gt; http</a>。</p>\n<h3 id=\"-\">阻止后续执行</h3>\n<p>有些 middleware 执行到一定条件时，可能希望阻止后面的逻辑继续执行。如：IP 黑名单判断，如果命中了黑名单，那么直接拒绝当前请求，不再执行后续的逻辑。</p>\n<p>ThinkJS 提供了 <code>think.prevent</code> 方法用来阻止后续的逻辑执行执行，该方法是通过返回一个特定类型的 Reject Promise 来实现的。</p>\n<pre><code class=\"lang-js\">think.middleware(\'parse_xml\', async http =&gt; {\n  let payload = await http.getPayload();\n  if (!payload) {\n    return;\n  }\n  var ip = http.ip();\n  var blackIPs = [\'123.456.789.100\', ...];\n  if(blackIPs.indexOf(ip) &gt; -1){\n    http.end();//直接结束当前请求\n    return think.prevent(); //阻止后续的代码继续执行\n  }\n});\n</code></pre>\n<p>除了使用 <code>think.prevent</code> 方法来阻止后续逻辑继续执行，也可以通过 <code>think.defer().promise</code> 返回一个 Pending Promise 来实现。</p>\n<p>如果不想直接结束当前请求，而是返回一个错误页面，ThinkJS 提供了 <code>think.statusAction</code> 方法来实现，具体使用方式请见 <a href=\"./error_handle.html\">扩展功能 -&gt; 错误处理</a>。</p>\n<h3 id=\"-middleware\">使用第三方 middleware</h3>\n<p>在项目里使用第三方 middleware 可以通过 <code>think.middleware</code> 方法来实现，相关代码存放在 <code>src/common/bootstrap/middleware.js</code> 里。如：</p>\n<pre><code class=\"lang-js\">var parseXML = require(\'think-parsexml\');\n\nthink.middleware(\'parseXML\', parseXML);\n</code></pre>\n<p>然后将 <code>parseXML</code> 配置到 hook 里即可。</p>\n<hr>\n<p>项目里的一些通用 middleware 也推荐发布到 npm 仓库中，middleware 名称推荐使用 <code>think-xxx</code>。</p>\n<h3 id=\"-middleware-\">第三方 middleware 列表</h3>\n<p>第三方 middleware 列表请见 <a href=\"/plugin.html#middleware\">插件 -&gt; middleware</a>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-14 12:29:07', '48', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('42', '子域名部署', '', '<p>当项目比较复杂时，可能希望将不同的功能部署在不同的域名下，但代码还是在一个项目下。如：域名 <code>admin.example.com</code> 部署后台管理的功能，希望映射到 <code>admin</code> 模块下。ThinkJS 提供子域名的 middleware 来处理这个需求。</p>\n<h3 id=\"-\">配置</h3>\n<p>可以修改 <code>src/common/config/hook.js</code> 来开启：</p>\n<pre><code class=\"lang-js\">export default {\n  route_parse: [\'prepend\', \'subdomain\']\n}\n</code></pre>\n<p>然后设定子域名部署的相关配置，该配置可以在 <code>config/config.js</code> 里设置：</p>\n<pre><code class=\"lang-js\">export default {\n  subdomain: {\n    admin: \'admin\', //表示将 admin.example.com 映射到 admin 模块下\n    ...\n  }\n}\n</code></pre>\n<p>假如原来的 pathname 为 <code>group/detail</code>，命中了 admin.example.com 这个子域名后，pathname 变为 <code>admin/group/detail</code>，后续路由解析就会根据新的 pathname 进行。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-14 12:31:54', '44', '0', '0', '0', '18', 'thinkjs,nodejs', '0', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('43', '禁止端口访问', '', '<h3 id=\"-\">介绍</h3>\n<p>代码上线后一般会用 nginx 做一层反向代理，这时用户的请求会落到 nginx 上，然后通过 nginx 转发到 Node.js 服务上，这样可以很方便的做负载均衡。</p>\n<p>通过 nginx 代理后就不希望用户直接访问到 Node.js 服务了，一种方案时让 Node.js 启动的端口只允许内部访问，外部无法直接访问到。另一种方案是在应用层判断。</p>\n<p>ThinkJS 提供禁止端口访问的 Middleware，这样如果不方便直接在机器上配置禁止端口访问的话，就可以使用该 Middleware 来禁止。</p>\n<h3 id=\"middleware-\">middleware 配置</h3>\n<p>修改 hook 配置文件 <code>src/common/config/hook.js</code>，添加如下的配置：</p>\n<pre><code class=\"lang-js\">export default {\n  request_begin: [\'prepend\', \'force_proxy\']\n}\n</code></pre>\n<p>然后在配置文件 <code>src/common/config/env/producition.js</code> 里配置：</p>\n<pre><code class=\"lang-js\">export default {\n  proxy_on: true\n}\n</code></pre>\n<p>这样只在线上环境开启了禁止端口访问的功能，开发环境不受影响。</p>\n<h3 id=\"-host\">只监听内网 host</h3>\n<p>Node.js 启动服务时默认监听的端口是 <code>0.0.0.0</code>，这样服务既可以内网访问，也可以外网访问。可以将 host 设置为 <code>127.0.0.1</code> 限制为内网访问。</p>\n<p>可以通过修改配置为 <code>src/common/config/config.js</code> 来完成，如：</p>\n<pre><code class=\"lang-js\">export default {\n  host: \'127.0.0.1\'\n}\n</code></pre><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-14 12:33:01', '50', '0', '0', '0', '18', 'thinkjs,nodejs', '0', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('44', '《AngularJS权威教程》PDF下载', 'AngularJS权威教程是学习AngularJS的公认经典，内容全面，讲解通俗，适合各层次的学习者。作者拥有丰富的AngularJS开发和教学经验，也是一位全栈工程师。全书35章，由浅入深地讲解了AngularJS的基本概念和基本功能，包括模块、作用域、控制器、表达式、指令、路由、依赖注入等，重要的是书中对每一个概念的讲解都配合了恰如其分的示例和代码，让读者通过动手实践，切身体会到这些概念的含义', '<h4><img src=\"/static/upload/pics/7/15/2016D_rAHtx6Nb_jxcR-gx-9kPGs.jpg\" alt=\"下载\" style=\"max-width:100%;\"><br></h4><h4>资源简介</h4><p>AngularJS权威教程是学习AngularJS的公认经典，内容全面，讲解通俗，适合各层次的学习者。作者拥有丰富的AngularJS开发和教学经验，也是一位全栈工程师。全书35章，由浅入深地讲解了AngularJS的基本概念和基本功能，包括模块、作用域、控制器、表达式、指令、路由、依赖注入等，重要的是书中对每一个概念的讲解都配合了恰如其分的示例和代码，让读者通过动手实践，切身体会到这些概念的含义和价值。《AngularJS权威教程》后半部分深入到AngularJS应用开发，系统地讨论了服务器通信、事件、架构、动画、本地化、安全、缓存、移动应用等主题。</p><p>&nbsp;</p><p>《AngularJS权威教程》适合各个层次的AngularJS开发人员学习，无论是出于工作需要，还是好奇心的驱使，只要你想彻底理解AngularJS，《AngularJS权威教程》都会让你满载而归。</p><h4>下载链接</h4><p><a href=\"http://pan.baidu.com/s/1qYgVPA8\" target=\"_blank\">http://pan.baidu.com/s/1qYgVPA8</a></p><p>提取密码：<span style=\"line-height: 1.8;\">nb82</span></p><p><br></p>', '', '前端汇', '2017-07-15 11:33:37', '109', '0', '1', '0', '13', 'AngularJS权威', '1', '1', '', '4', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('45', '《MongoDB大数据处理权威指南第2版》pdf下载', '本书根据MongoDB的最新版本做了相应更新，其中包含MongoDB n最新的所有特性，包括版本2.2中引入的聚集框架和版本2.4中引入的哈希索引。MongoDB是最流行的“大数据”NoSQL数据库技术，并且正处于发展中。来自10gen的David Hows以及具有丰富MongoDB开发经验的Peter Membrey和Eelco Plugge，组成了本书的专家团队，他们在本书中分享了自己的专业知', '<p><img src=\"/static/upload/pics/7/15/2016yxL4l3rzdaVPtH3bW-yiIJ36.jpg\" alt=\"u=3219637453,3484046181&fm=15&amp;gp=0\" style=\"max-width:100%;\"><font size=\"4\"><br></font></p><p><font size=\"4\">资源简介</font></p><p>本书根据MongoDB的最新版本做了相应更新，其中包含MongoDB n最新的所有特性，包括版本2.2中引入的聚集框架和版本2.4中引入的哈希索引。MongoDB是最流行的“大数据”NoSQL数据库技术，并且正处于发展中。来自10gen的David Hows以及具有丰富MongoDB开发经验的Peter Membrey和Eelco Plugge，组成了本书的专家团队，他们在本书中分享了自己的专业知识和经验，帮助你了解成为MongoDB专家所需的所有知识。</p><p>书名:&nbsp;《MongoDB大数据处理权威指南第2版》</p><p>类型：pdf&nbsp;</p><p>大小：56.99M</p><p>作者: (美) 豪斯(Hows, D.) 等著&nbsp;</p><p>出版社: 清华大学出版社</p><p>原作名: (美) 豪斯(Hows, D.) 等著</p><p>译者: 王肖峰 译&nbsp;</p><p>出版年: 2015-1-1</p><p>页数: 284</p><h4>下载链接</h4><p><a href=\"http://pan.baidu.com/s/1slkX3HV\" target=\"_blank\">http://pan.baidu.com/s/1slkX3HV</a></p><p>提取密码：<span style=\"line-height: 1.8;\">fmva</span></p><p><br></p>', 'static/upload/pics/7/15/2016PKAbgOquebGveGvd-kwcHR7_.jpg', '前端汇', '2017-07-15 12:33:08', '261', '0', '1', '1', '13', 'MongoDB', '1', '1', '', '4', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('46', 'TypeScript', '', '<p><a href=\"http://www.typescriptlang.org/\">TypeScript</a> 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，向这个语言添加了可选的静态类型，在大型项目里非常有用。</p>\n<p>ThinkJS 2.1 开始支持了创建 TypeScript 类型的项目，并且开发时会自动编译、自动更新，无需手工编译等复杂的操作。</p>\n<h3 id=\"-typescript-\">创建 TypeScript 项目</h3>\n<p>可以通过指定 <code>--ts</code> 参数来创建 TypeScript 项目：</p>\n<pre><code class=\"lang-sh\">thinkjs new thinkjs_demo --ts\n</code></pre>\n<p>TypeScript 项目的文件后缀是 <code>.ts</code>。如果手工建立一些文件，后缀名也要是 <code>.ts</code>，否则调用 <code>tsc</code> 编译时会报错。</p>\n<h3 id=\"-d-ts-\">.d.ts 文件</h3>\n<p><code>.d.ts</code> 文件为第三方类库的描述文件。创建项目时，会创建文件 <code>typings/thinkjs/think.d.ts</code>，该文件为 ThinkJS 的描述文件。项目里的文件可以通过下面的方式引入这个描述文件：</p>\n<pre><code class=\"lang-js\">/// &lt;reference path=\"../../../typings/thinkjs/think.d.ts\" /&gt;\n</code></pre>\n<p>该代码必须放在文件的最前面，同时保持相对路径正确。如果文件有 <code>use strict</code> 也要放在这个后面，否则不会识别。</p>\n<p>如果项目里还引入了其他第三方库，那么就需要安装对应的描述文件。可以通过 <a href=\"http://definitelytyped.org/tsd/\">tsd</a> 工具来安装。</p>\n<p>第三方类库的描述文件列表可以从 <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">https://github.com/DefinitelyTyped/DefinitelyTyped</a> 找到，基本覆盖了一些比较热门的类库。</p>\n<h3 id=\"typescript-\">TypeScript 编译</h3>\n<p>由于 TypeScript 的编译功能有很多缺陷，所以现在的方案是通过 TypeScript 将 <code>.ts</code> 代码编译为 ES6 代码，然后使用 Babel 6 编译为 ES5 代码。</p>\n<p>如果发现 TypeScript 有问题，可以给 TypeScript 提 issue，帮助完善，地址为：<a href=\"https://github.com/Microsoft/TypeScript\">https://github.com/Microsoft/TypeScript</a>。</p>\n<h3 id=\"-typescript-\">已有项目升级为 TypeScript 项目</h3>\n<p>对于已有用 ES6/7 特性开发的项目可以很方便的升级为 TypeScript 项目，具体如下：</p>\n<h4 id=\"-\">修改入口文件</h4>\n<p>修改入口文件 <code>www/development.js</code>，将之前 <code>compile</code> 相关的代码改为：</p>\n<pre><code class=\"lang-js\">//compile src/ to app/\ninstance.compile({\n  log: true,\n  type: \'ts\' //TypeScript\n});\n</code></pre>\n<h4 id=\"-package-json\">修改 package.json</h4>\n<p>修改配置文件 <code>package.json</code>，删除之前 <code>Babel</code> 和 <code>ThinkJS</code> 相关模块的依赖，添加如下的依赖：</p>\n<pre><code>{\n  \"dependencies\": {\n    \"thinkjs\": \"2.1.x\",\n    \"babel-runtime\": \"6.x.x\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"next\",\n    \"babel-cli\": \"6.x.x\",\n    \"babel-preset-es2015-loose\": \"6.x.x\",\n    \"babel-preset-stage-1\": \"6.x.x\",\n    \"babel-plugin-transform-runtime\": \"6.x.x\",\n    \"babel-core\": \"6.x.x\"\n  }\n}\n</code></pre><p>如果 <code>dependencies</code> 和 <code>devDependencies</code> 里已经有一些项目里要用的模块依赖，需要合并在一起。</p>\n<p>修改完成后，执行 <code>npm install</code> 安装对应的依赖。</p>\n<h4 id=\"-thinkjsrc\">修改 .thinkjsrc</h4>\n<p>修改项目配置文件 <code>.thinkjsrc</code>，修改为类似如下的配置：</p>\n<pre><code class=\"lang-json\">{\n  \"createAt\": \"2017-01-13 17:27:19\",\n  \"mode\": \"module\",\n  \"ts\": true\n}\n</code></pre>\n<h4 id=\"-think-d-ts-\">下载 think.d.ts 描述文件</h4>\n<p>下载文件 <a href=\"https://github.com/75team/thinkjs/blob/master/template/think.d.ts\">https://github.com/75team/thinkjs/blob/master/template/think.d.ts</a>，保存为 <code>typings/thinkjs/think.d.ts</code>。</p>\n<h4 id=\"-\">修改文件后缀</h4>\n<p>将 <code>src/</code> 目录下所有的 <code>.js</code> 文件修改为 <code>.ts</code> 文件。</p>\n<h4 id=\"-bin-compile-js-\">添加 bin/compile.js 文件</h4>\n<p>下载文件 <a href=\"https://github.com/75team/thinkjs/blob/master/template/bin/compile.ts\">https://github.com/75team/thinkjs/blob/master/template/bin/compile.ts</a>，保存为 <code>bin/compile.js</code>。</p>\n<h4 id=\"-compile-\">修改 compile 命令</h4>\n<p>将 <code>package.json</code> 里原有的 compile 命令修改为 <code>node bin/compile.js</code>。</p>\n<h4 id=\"-\">项目文件里添加描述文件</h4>\n<p>在 <code>src/</code> 目录下所有文件内容顶部加上如下的代码，要注意相对路径是否正确：</p>\n<pre><code class=\"lang-js\">/// &lt;reference path=\"../../../typings/thinkjs/think.d.ts\" /&gt;\n</code></pre>\n<p>全部修改后，执行 <code>npm start</code> 就可以启动服务了。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:02:06', '47', '0', '0', '0', '18', 'thinkjs,nodejs', '0', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('47', 'Logic', '', '<p>当在 Action 里处理用户的请求时，经常要先获取用户提交过来的数据，然后对其校验，如果校验没问题后才能进行后续的操作。当参数校验完成后，有时候还要进行权限判断，等这些都判断无误后才能进行真正的逻辑处理。如果将这些代码都放在一个 Action 里，势必让 Action 的代码非常复杂且冗长。</p>\n<p>为了解决这个问题， ThinkJS 在控制器前面增加了一层 <code>Logic</code>，Logic 里的 Action 和控制器里的 Action 一一对应，系统在调用控制器里的 Action 之前会自动调用 Logic 里的 Action。</p>\n<h3 id=\"logic-\">Logic 层</h3>\n<p>Logic 目录在 <code>src/[module]/logic</code>，在通过命令 <code>thinkjs controller [name]</code> 创建 Controller 时会自动创建对应的 Logic。Logic 代码类似如下：</p>\n<pre><code class=\"lang-js\">\'use strict\';\n/**\n * logic\n * @param  {} []\n * @return {}     []\n */\nexport default class extends think.logic.base {\n  /**\n   * index action logic\n   * @return {} []\n   */\n  indexAction(){\n\n  }\n}\n</code></pre>\n<p>其中，Logic 里的 Action 和 Controller 里的 Action 一一对应。Logic 里也支持 <code>__before</code> 和 <code>__after</code> 等魔术方法。</p>\n<h3 id=\"-\">请求类型校验配置</h3>\n<p>对应一个特定的 Action，有时候只需要一种或者二三种请求类型，需要将其他类型的请求给拒绝掉。可以通过配置特定的请求类型来完成校验。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    this.allowMethods = \'post\'; //只允许 POST 请求类型\n  }\n  testAction(){\n    this.allowMethods = \'get,post\'; //只允许 GET 和 POST 请求类型\n  }\n}\n</code></pre>\n<h3 id=\"-\">数据校验配置</h3>\n<p>数据校验的配置如下：</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      doc: \"string|default:index\",\n      version: \"string|in:1.2,2.0|default:2.0\"\n    }\n  }\n}\n</code></pre>\n<h4 id=\"-\">配置格式</h4>\n<p>配置格式为 <code>字段名</code> -&gt; <code>配置</code>，每个字段的配置支持多个校验类型，校验类型之间用 <code>|</code> 隔开，校验类型和参数之间用 <code>:</code> 隔开，参数之间用 <code>,</code> 隔开来支持多个参数。</p>\n<h4 id=\"-\">参数格式</h4>\n<p>校验类型后面可以接参数，除了支持用逗号隔开的简单参数外，还可以支持 JSON 格式的复杂参数。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      field1: \"array|default:[1,2]\", //参数为数组\n      field2: \'object|default:{\\\"name\\\":\\\"thinkjs\\\"}\' //参数为对象\n    }\n  }\n}\n</code></pre>\n<p>除了配置为字符串，也可以配置对象的方式，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      field1: {required: true, array: true, default: [1, 2]}, //参数为数组\n      field2: {object: true, default: {name: \"thinkjs\"}} //参数为对象\n    }\n  }\n}\n</code></pre>\n<h4 id=\"-\">支持的数据类型</h4>\n<p>支持的数据类型有：<code>boolean</code>、<code>string</code>、<code>int</code>、<code>float</code>、<code>array</code>、<code>object</code>，默认为 <code>string</code>。</p>\n<h4 id=\"-\">默认值</h4>\n<p>使用 <code>default:value</code> 来定义字段的默认值，如果当前字段值为空，会将默认值覆盖过去，后续获取到的值为该默认值。</p>\n<h4 id=\"-\">获取数据的方式</h4>\n<p>默认根据当前请求的类型来获取字段对应的值，如果当前请求类型是 GET，那么会通过 <code>this.get(\'version\')</code> 来获取 <code>version</code> 字段的值。如果请求类型是 POST，那么会通过 <code>this.post</code> 来获取字段的值。</p>\n<p>但有时候在 POST 类型下，可能会获取上传的文件或者获取 URL 上的参数，这时候就需要指定获取数据的方式了。支持的获取数据方式为 <code>get</code>，<code>post</code> 和 <code>file</code>。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  /**\n   * 保存数据，POST 请求\n   * @return {} []\n   */\n  saveAction(){\n    let rules = {\n      name: \"required\",\n      image: \"object|file|required\",\n      version: \"string|get|in:1.2,2.0|default:2.0\"\n    }\n  }\n}\n</code></pre>\n<p>上面示例指定了字段 <code>name</code> 通过 <code>post</code> 方法来获取值，字段 <code>image</code> 通过 <code>file</code> 方式来获取值，字段 <code>version</code> 通过 <code>get</code> 方式来获取值。</p>\n<h4 id=\"-\">错误信息</h4>\n<p>上面的配置只是指定了具体的校验规则，并没有指定校验出错后给出的错误信息。错误信息支持国际化，需要在配置文件 <code>src/common/config/locale/[lang].js</code> 中定义。如：</p>\n<pre><code class=\"lang-js\">// src/common/config/locale/en.js\nexport default {\n  validate_required: \'{name} can not be blank\',\n  validate_contains: \'{name} need contains {args}\',\n}\n</code></pre>\n<p>其中 key 为 <code>validate_</code> + <code>校验类型名称</code>，值里面支持 <code>{name}</code> 和 <code>{args}</code>  2个参数，分别代表字段名称和传递的参数。</p>\n<p>如果想定义个特定字段某个错误类型的具体信息，可以通过在后面加上字段名。如：</p>\n<pre><code class=\"lang-js\">// src/common/config/locale/en.js\nexport default {\n  validate_required: \'{name} can not be blank\',\n  validate_required_email: \'email can not be blank\', //指定字段 email 的 required 错误信息\n}\n</code></pre>\n<h3 id=\"-\">数据校验方法</h3>\n<p>配置好校验规则后，可以通过 <code>this.validate</code> 方法进行校验。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      doc: \"string|default:index\",\n      version: \"string|in:1.2,2.0|default:2.0\"\n    }\n    let flag = this.validate(rules);\n    if(!flag){\n      return this.fail(\'validate error\', this.errors());\n    }\n  }\n}\n</code></pre>\n<p>如果返回值为 <code>false</code>，那么可以通过 <code>this.errors</code> 方法获取详细的错误信息。拿到错误信息后，可以通过 <code>this.fail</code> 方法把错误信息以 JSON 格式输出，也可以通过 <code>this.display</code> 方法输出一个页面。</p>\n<p>错误信息通过 <code>errors</code> 字段赋值到模版里，模版里通过下面的方式显示错误信息（以 ejs 模版为例）：</p>\n<pre><code class=\"lang-html\">&lt;%for(var field in errors){%&gt;\n  &lt;%-field%&gt;:&lt;%errors[field]%&gt;\n&lt;%}%&gt;\n</code></pre>\n<h5 id=\"-\">自动校验</h5>\n<p>一般情况下，都是校验有问题后，输出一个 JSON 信息。如果每次都要在 Logic 的 Action 手动调用 <code>this.validate</code> 进行校验，势必比较麻烦。可以通过将校验规则赋值给 <code>this.rules</code> 属性进行自动校验。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    this.rules = {\n      doc: \"string|default:index\",\n      version: \"string|in:1.2,2.0|default:2.0\"\n    }\n  }\n}\n</code></pre>\n<p>将校验规则赋值给 <code>this.rules</code> 属性后，会在这个 Action 执行完成后自动校验，如果有错误则直接输出 JSON 格式的错误信息。自动校验是通过魔术方法 <code>__after</code> 来完成的。</p>\n<h3 id=\"-\">支持的校验类型</h3>\n<h4 id=\"required\">required</h4>\n<p>必填项。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'required\' //name 的值必填\n    }\n  }\n}\n</code></pre>\n<h4 id=\"requiredif\">requiredIf</h4>\n<p>当另一个项的值为某些值其中一项时，该项必填。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'requiredIf:email,admin@example.com,admin1@example.com\'\n    }\n  }\n}\n</code></pre>\n<p>当 <code>email</code> 的值为 <code>admin@example.com</code>，<code>admin1@example.com</code> 等其中一项时， <code>name</code> 的值必填。</p>\n<h4 id=\"requirednotif\">requiredNotIf</h4>\n<p>当另一个项的值不在某些值中时，该项必填。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'requiredNotIf:email,admin@example.com,admin1@example.com\'\n    }\n  }\n}\n</code></pre>\n<p>当 <code>email</code> 的值不为 <code>admin@example.com</code>，<code>admin1@example.com</code> 等其中一项时， <code>name</code> 的值必填。</p>\n<h4 id=\"requiredwith\">requiredWith</h4>\n<p>当其他几项有一项值存在时，该项必填。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'requiredWith:email,title\'\n    }\n  }\n}\n</code></pre>\n<p>当 <code>email</code>, <code>title</code> 等项有一项值存在时，<code>name</code> 的值必填。</p>\n<h4 id=\"requiredwithall\">requiredWithAll</h4>\n<p>当其他几项值都存在时，该项必填。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'requiredWithAll:email,title\'\n    }\n  }\n}\n</code></pre>\n<p>当 <code>email</code>, <code>title</code> 等项值都存在时，<code>name</code> 的值必填。</p>\n<h4 id=\"requiredwithout\">requiredWithout</h4>\n<p>当其他几项有一项值不存在时，该项必填。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'requiredWithout:email,title\'\n    }\n  }\n}\n</code></pre>\n<p>当 <code>email</code>, <code>title</code> 等项其中有一项值不存在时，<code>name</code> 的值必填。</p>\n<h4 id=\"requiredwithoutall\">requiredWithoutAll</h4>\n<p>当其他几项值都不存在时，该项必填。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'requiredWithoutAll:email,title\'\n    }\n  }\n}\n</code></pre>\n<p>当 <code>email</code>, <code>title</code> 等项值都不存在时，<code>name</code> 的值必填。</p>\n<h4 id=\"contains\">contains</h4>\n<p>值需要包含某个特定的值。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'contains:thinkjs\' //需要包含字符串 thinkjs。\n    }\n  }\n}\n</code></pre>\n<h4 id=\"equals\">equals</h4>\n<p>和另一项的值相等。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'equals:firstname\' \n    }\n  }\n}\n</code></pre>\n<p><code>name</code> 的值需要和 <code>firstname</code> 的值相等。</p>\n<h4 id=\"different\">different</h4>\n<p>和另一项的值不等。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'different:firstname\'\n    }\n  }\n}\n</code></pre>\n<p><code>name</code> 的值不能和 <code>firstname</code> 的值相等。</p>\n<h4 id=\"before\">before</h4>\n<p>值需要在一个日期之前，默认为需要在当前日期之前。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      start_time: \'before\', //需要在当前日期之前。\n      start_time1: \'before:2015/10/12 10:10:10\' //需要在 2015/10/12 10:10:10 之前。\n    }\n  }\n}\n</code></pre>\n<h4 id=\"after\">after</h4>\n<p>值需要在一个日期之后，默认为需要在当前日期之后。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      end_time: \'after\', //需要在当前日期之后。\n      end_time1: \'after:2015/10/10\' //需要在 2015/10/10 之后。\n    }\n  }\n}\n</code></pre>\n<h4 id=\"alpha\">alpha</h4>\n<p>值只能是 [a-zA-Z] 组成。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      en_name: \'alpha\'\n    }\n  }\n}\n</code></pre>\n<p><code>en_name</code> 的值只能是 [a-zA-Z] 组成。</p>\n<h4 id=\"alphadash\">alphaDash</h4>\n<p>值只能是 [a-zA-Z_] 组成。</p>\n<h4 id=\"alphanumeric\">alphaNumeric</h4>\n<p>值只能是 [a-zA-Z0-9] 组成。</p>\n<h4 id=\"alphanumericdash\">alphaNumericDash</h4>\n<p>值只能是 [a-zA-Z0-9_] 组成。</p>\n<h4 id=\"ascii\">ascii</h4>\n<p>值只能是 ascii 字符组成。</p>\n<h4 id=\"base64\">base64</h4>\n<p>值必须是 base64 编码。</p>\n<h4 id=\"bytelength\">byteLength</h4>\n<p>字节长度需要在一个区间内。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'byteLength:10\' //字节长度不能小于 10\n      name1: \'byteLength:10,100\' //字节长度需要在 10 - 100 之间\n    }\n  }\n}\n</code></pre>\n<h4 id=\"creditcard\">creditcard</h4>\n<p>需要是信用卡数字。</p>\n<h4 id=\"currency\">currency</h4>\n<p>需要是货币。</p>\n<h4 id=\"date\">date</h4>\n<p>需要是个日期。</p>\n<h4 id=\"decimal\">decimal</h4>\n<p>需要是个小数。</p>\n<h4 id=\"divisibleby\">divisibleBy</h4>\n<p>需要被一个数整除。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      count: \'divisibleBy:3\' //可以被 3 整除\n    }\n  }\n}\n</code></pre>\n<h4 id=\"email\">email</h4>\n<p>需要是个 email 格式。</p>\n<h4 id=\"fqdn\">fqdn</h4>\n<p>需要是个合格的域名。</p>\n<h4 id=\"float\">float</h4>\n<p>需要是个浮点数。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      money: \'float\' //需要是个浮点数\n      money1: \'float:3.2\' //需要是个浮点数，且最小值为 3.2\n      money2: \'float:3.2,10.5\' //需要是个浮点数，且最小值为 3.2，最大值为 10.5\n    }\n  }\n}\n</code></pre>\n<h4 id=\"fullwidth\">fullWidth</h4>\n<p>包含宽字节字符。</p>\n<h4 id=\"halfwidth\">halfWidth</h4>\n<p>包含半字节字符。</p>\n<h4 id=\"hexcolor\">hexColor</h4>\n<p>需要是个十六进制颜色值。</p>\n<h4 id=\"hex\">hex</h4>\n<p>需要是十六进制。</p>\n<h4 id=\"ip\">ip</h4>\n<p>需要是 ip 格式。</p>\n<h4 id=\"ip4\">ip4</h4>\n<p>需要是 ip4 格式。</p>\n<h4 id=\"ip6\">ip6</h4>\n<p>需要是 ip6 格式。</p>\n<h4 id=\"isbn\">isbn</h4>\n<p>需要是图书编码。</p>\n<h4 id=\"isin\">isin</h4>\n<p>需要是证券识别编码。</p>\n<h4 id=\"iso8601\">iso8601</h4>\n<p>需要是 iso8601 日期格式。</p>\n<h4 id=\"in\">in</h4>\n<p>在某些值中。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      version: \'in:1.2,2.0\' //需要是 1.2，2.0 其中一个\n    }\n  }\n}\n</code></pre>\n<h4 id=\"noin\">noin</h4>\n<p>不能在某些值中。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      version: \'noin:1.2,2.0\' //不能是 1.2，2.0 其中一个\n    }\n  }\n}\n</code></pre>\n<h4 id=\"int\">int</h4>\n<p>需要是 int 型。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      value: \'int\' //需要是 int 型\n      value1: \'int:1\' //不能小于1\n      value2: \'int:10,100\' //需要在 10 - 100 之间\n    }\n  }\n}\n</code></pre>\n<h4 id=\"min\">min</h4>\n<p>不能小于某个值。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      value: \'min:10\' //不能小于10\n    }\n  }\n}\n</code></pre>\n<h4 id=\"max\">max</h4>\n<p>不能大于某个值。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      value: \'max:10\' //不能大于10\n    }\n  }\n}\n</code></pre>\n<h4 id=\"length\">length</h4>\n<p>长度需要在某个范围。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'length:10\' //长度不能小于10\n      name1: \'length:10,100\' //长度需要在 10 - 100 之间\n    }\n  }\n}\n</code></pre>\n<h4 id=\"minlength\">minLength</h4>\n<p>长度不能小于最小长度。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'minLength:10\' //长度不能小于10\n    }\n  }\n}\n</code></pre>\n<h4 id=\"maxlength\">maxLength</h4>\n<p>长度不能大于最大长度。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      name: \'maxLength:10\' //长度不能大于10\n    }\n  }\n}\n</code></pre>\n<h4 id=\"lowercase\">lowercase</h4>\n<p>需要都是小写字母。</p>\n<h4 id=\"uppercase\">uppercase</h4>\n<p>需要都是大写字母。</p>\n<h4 id=\"mobile\">mobile</h4>\n<p>需要手机号。</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    let rules = {\n      mobile: \'mobile:zh-cn\' //必须为中国的手机号\n    }\n  }\n}\n</code></pre>\n<h4 id=\"mongoid\">mongoId</h4>\n<p>是 MongoDB 的 ObjectID。</p>\n<h4 id=\"multibyte\">multibyte</h4>\n<p>包含多字节字符。</p>\n<h4 id=\"url\">url</h4>\n<p>是个 url。</p>\n<h4 id=\"order\">order</h4>\n<p>数据库查询 order，如：name DESC。</p>\n<h4 id=\"field\">field</h4>\n<p>数据库查询的字段，如：name,title。</p>\n<h4 id=\"image\">image</h4>\n<p>上传的文件是否是个图片。</p>\n<h4 id=\"startwith\">startWith</h4>\n<p>以某些字符打头。</p>\n<h4 id=\"endwith\">endWith</h4>\n<p>以某些字符结束。</p>\n<h4 id=\"string\">string</h4>\n<p>值为字符串。</p>\n<h4 id=\"array\">array</h4>\n<p>值为数组。</p>\n<h4 id=\"boolean\">boolean</h4>\n<p>值为布尔类型。对于字符串 <code>yes</code>, <code>on</code>, <code>1</code>, <code>true</code> 会自动转为布尔 true。</p>\n<h4 id=\"object\">object</h4>\n<p>值为对象。</p>\n<h4 id=\"regexp\">regexp</h4>\n<p>正则，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.logic.base {\n  indexAction(){\n    this.rules = {\n      number: {\n        required: true,\n        regexp: /^\\d{6}$/\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"-\">扩展校验类型</h3>\n<p>如果默认支持的校验类型不能满足需求，可以通过 <code>think.validate</code> 方法对校验类型进行扩展。如：</p>\n<pre><code class=\"lang-js\">// src/common/bootstrap/validate.js\nthink.validate(\'validate_name\', (value, ...args) =&gt; {\n  //需要返回 true 或者 false\n  //true 表示校验成功，false 表示校验失败\n})\n</code></pre>\n<p>上面注册了一个名为 <code>validate_name</code> 的校验类型，这样在 Logic 里就可以直接使用该校验类型了。</p>\n<h5 id=\"-\">参数解析</h5>\n<p>如果要解析后面的 <code>args</code>，如：该字段值跟其他字段值进行比较，这时拿到的参数是其他字段名称，但比较的时候肯定需要拿到这个字段值，所以需要将字段名称解析为对应的字段值。</p>\n<p>可以通过注册一个解析参数函数来完成。如：上面的校验类型名称为 <code>validate_name</code>，那么对应的解析参数的名称必须为 <code>_validate_name</code>，即：<code>_</code> + <code>校验类型</code>。</p>\n<pre><code class=\"lang-js\">think.validate(\'_validate_name\', (args, data) =&gt; {\n  let arg0 = args[0];\n  args[0] = data[arg0].value; //将第一个参数字段名称解析为对应的参数值\n  return args;\n})\n</code></pre><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:05:46', '38', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('48', 'Service', '', '<p>有时候项目里需要调用一些第三方的服务，如：调用 Github 相关接口。如果直接在 controller 里直接调用这些接口，一方面导致 controller 代码比较复杂，另一方面也不能更多进行代码复用。</p>\n<p>对于这些情况，可以包装成 service 供 controller 里调用。</p>\n<h3 id=\"-service\">创建 service</h3>\n<p>可以通过命令 <code>thinkjs service [name]</code> 来创建命令，具体使用请见 <a href=\"./thinkjs_command.html#添加-service\">扩展功能 -&gt; ThinkJS 命令 -&gt; 添加 service</a>。</p>\n<p>默认生成的 service 是一个 class，但有些 service 直接提供一些静态方法即可，这时候可以把 class 改为对象即可。</p>\n<h3 id=\"-service\">加载 service</h3>\n<p>可以通过 <code>think.service</code> 加载一个 service，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let GithubService = think.service(\'github\');\n    let instance = new GithubService();\n  }\n}\n</code></pre>\n<p>如果想跨模块加载 service，可以通过下面的方式：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let GithubService = think.service(\'github\', \'admin\'); //加载 admin 模块下的 github service\n    let instance = new GithubService();\n  }\n}\n</code></pre>\n<p><code>注</code>：如果项目不是特别复杂，建议把 service 放在 <code>common</code> 模块下，可以就都可以方便的加载了。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>\n<p><br></p>', '', '前端汇', '2017-07-17 14:06:49', '31', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('49', 'Cookie', '', '<h3 id=\"cookie-\">cookie 配置</h3>\n<p>cookie 默认配置如下：</p>\n<pre><code class=\"lang-js\">export default {\n  domain: \'\', \n  path: \'/\',\n  httponly: false, //是否 http only\n  secure: false,\n  timeout: 0  //有效时间，0 为浏览器进程，单位为秒\n};\n</code></pre>\n<p>默认 cookie 是随着浏览器进程关闭而失效，可以在配置文件 <code>src/common/config/cookie.js</code> 中进行修改。如：</p>\n<pre><code class=\"lang-js\">export default {\n  timeout: 7 * 24 * 3600  //将 cookie 有效时间设置为 7 天\n};\n</code></pre>\n<h3 id=\"-cookie\">获取 cookie</h3>\n<p>controller 或者 logic 中，可以通过 <code>this.cookie</code> 方法来获取。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let cookie = this.cookie(\'theme\'); //获取名为 theme 的 cookie\n  }\n}\n</code></pre>\n<p>http 对象里也提供了 <code>cookie</code> 方法来获取 cookie。如：</p>\n<pre><code class=\"lang-js\">let cookie = http.cookie(\'theme\');\n</code></pre>\n<h3 id=\"-cookie\">设置 cookie</h3>\n<p>controller 或者 logic 中，可以通过 <code>this.cookie</code> 方法来设置。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    this.cookie(\'theme\', \'default\'); //将 cookie theme 值设置为 default\n  }\n}\n</code></pre>\n<p>http 对象里也提供了 <code>cookie</code> 方法来设置 cookie。如：</p>\n<pre><code class=\"lang-js\">http.cookie(\'theme\', \'default\');\n</code></pre>\n<p>如果设置 cookie 时想修改一些参数，可以通过第三个参数来控制，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    this.cookie(\'theme\', \'default\', {\n      timeout: 7 * 24 * 3600 //设置 cookie 有效期为 7 天\n    }); //将 cookie theme 值设置为 default\n  }\n}\n</code></pre>\n<h3 id=\"-cookie\">删除 cookie</h3>\n<p>controller 或者 logic 中，可以通过 <code>this.cookie</code> 方法来删除。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    this.cookie(\'theme\', null); //删除名为 theme 的 cookie\n  }\n}\n</code></pre>\n<p>http 对象里也提供了 <code>cookie</code> 方法来删除 cookie。如：</p>\n<pre><code class=\"lang-js\">http.cookie(\'theme\', null);\n</code></pre><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>', '', '', '2017-07-17 14:09:11', '39', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('50', 'REST API', '', '<p>项目中，经常要提供一个 API 供第三方使用，一个通用的 API 设计规范就是使用 REST API。REST API 是使用 HTTP 中的请求类型来标识对资源的操作。如：</p>\n<ul>\n<li><code>GET</code> <code>/ticket</code> #获取ticket列表</li>\n<li><code>GET</code> <code>/ticket/12</code> #查看某个具体的ticket</li>\n<li><code>POST</code> <code>/ticket</code>  #新建一个ticket</li>\n<li><code>PUT</code> <code>/ticket/12</code> #更新ticket 12</li>\n<li><code>DELETE</code> <code>/ticket/12</code> #删除ticekt 12</li>\n</ul>\n<p>ThinkJS 中提供了很便捷的方式来创建 REST API，创建后无需额外的代码即可响应 REST API 的处理，同时也可以通过定制响应额外的需求。</p>\n<h3 id=\"-rest-api\">创建 REST API</h3>\n<p>通过 <code>thinkjs controller [name] --rest</code> 即可创建一个 REST API。如：</p>\n<pre><code class=\"lang-js\">thinkjs controller home/ticket --rest\n</code></pre>\n<p>上面的命令表示在 <code>home</code> 模块下创建了一个 <code>ticket</code> 的 Rest Controller，该 Controller 用来处理资源 <code>ticket</code> 的请求。</p>\n<h3 id=\"-rest-api-\">处理 REST API 请求</h3>\n<p>Rest Controller 创建完成后，无需写任何的代码，即可完成对 REST API 的处理。资源名称和数据表名称是一一对应的，如：资源名为 <code>ticket</code>，那么对应的数据表为 <code>数据表前缀</code> + <code>ticket</code>。</p>\n<h3 id=\"-\">请求类型</h3>\n<p>REST API 默认是从 HTTP METHOD 里获取当前的请求类型的，如：当前请求类型是 <code>DELETE</code>，表示对资源进行删除操作。</p>\n<p>如果有些客户端不支持发送 <code>DELETE</code> 请求类型，那么可以通过属性 <code>_method</code> 指定一个参数用来接收请求类型。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.rest {\n  init(http){\n    super.init(http);\n    this._method = \'_method\'; //指定请求类型从 GET 参数 _method 里获取\n  }\n}\n</code></pre>\n<h3 id=\"-\">字段过滤</h3>\n<p>默认情况下，获取资源信息时，会将资源的所有字段都返回。有时候需要隐藏部分字段，可以通过在 <code>__before</code> 魔术方法里完成此类操作。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.rest {\n  __before(){\n    this.modelInstance.fieldReverse(\'password,score\'); //隐藏 password 和 score 字段\n  }\n}\n</code></pre>\n<h3 id=\"-\">权限管理</h3>\n<p>有些 REST API 需要进行权限验证，验证完成后才能获取对应的信息，可以通过在 <code>__before</code> 魔术方法里进行验证。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.rest {\n  * __before(){\n    let auth = yield this.checkAuth();\n    if(!auth){\n      return this.fail(\'no permissions\'); //没权限时直接返回\n    }\n  }\n}\n</code></pre>\n<h3 id=\"-\">更多定制</h3>\n<p>更多定制方式请参见 <a href=\"./api_controller_rest.html\">API -&gt; controller.rest</a>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>\n<p><br></p>', '', '', '2017-07-17 14:10:18', '33', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('51', 'Babel', '', '<p>ThinkJS 2.1 中，将依赖的 Babel 版本从 5 升级到 6。由于 Babel 6 是个彻底重构的版本，完全插件化了，所以很多模块在不同的插件都会有依赖，这样会导致一些问题，如：</p>\n<ul>\n<li>安装后的目录很大，并且首次运行很慢</li>\n<li>目录层级过深，windows 可能会报错</li>\n</ul>\n<p>推荐的解决方案为将 npm 升级到 3，可以通过下面的命令升级：</p>\n<pre><code class=\"lang-sh\">npm install -g npm@3\n</code></pre>\n<h3 id=\"-\">修改编译参数</h3>\n<p>Babel 6 默认的编译参数为：</p>\n<pre><code class=\"lang-js\">{\n  presets: [\'es2015-loose\', \'stage-1\'],\n  plugins: [\'transform-runtime\']\n}\n</code></pre>\n<p>如果编译参数不能满足你的需求的话，可以在入口文件 <code>www/development.js</code> 里进行修改：</p>\n<pre><code class=\"lang-js\">instance.compile({\n  retainLines: true, \n  log: true,\n  presets: [], //追加的 presets 列表\n  plugins: [] //追加的 plugins 列表\n});\n</code></pre>\n<p>后续上线前编译执行 <code>npm run compile</code> 实际上是调用 <code>package.json</code> 里对应的 <code>compile</code> 命令，所以若果有 <code>presets</code> 或者 <code>plugins</code> 修改的话，<code>compile</code> 命令也要对应改下。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:11:12', '32', '0', '0', '0', '18', 'thinkjs,nodejs ', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('52', 'thinkjs 命令', '', '<p>以全局模式安装 thinkjs 模块后，系统下就会有 thinkjs 命令，在终端执行 <code>thinkjs -h</code> 可以看到详细介绍。</p>\n<pre><code class=\"lang-text\">  Usage: thinkjs [command] &lt;options ...&gt;\n\n\n  Commands:\n\n    new &lt;projectPath&gt;            create project\n    module &lt;moduleName&gt;          add module\n    controller &lt;controllerName&gt;  add controller\n    service &lt;serviceName&gt;        add service\n    model &lt;modelName&gt;            add model\n    middleware &lt;middlewareName&gt;  add middleware\n    adapter &lt;adapterName&gt;        add adapter\n    plugin &lt;pluginPath&gt;          create ThinkJS plugin\n\n  Options:\n\n    -h, --help         output usage information\n    -V, --version      output the version number\n    -e, --es6          use es6 for project, used in `new` command\n    -t, --ts           use TypeScript for project, used in `new` command\n    -T, --test         add test dirs when create project, used in `new` command\n    -r, --rest         create rest controller, used in `controller` command\n    -M, --mongo        create mongo model, used in `model` command\n    -R, --relation     create relation model, used in `model` command\n    -m, --mode &lt;mode&gt;  project mode type(mini, normal, module), default is module, used in `new` command\n</code></pre>\n<h3 id=\"-\">创建项目</h3>\n<p>创建项目可以通过 <code>thinkjs new &lt;projectPath&gt;</code> 来执行，如：</p>\n<pre><code class=\"lang-sh\">thinkjs new thinkjs_demo\n</code></pre>\n<h4 id=\"-es6-7-\">创建 ES6/7 项目</h4>\n<p>如果想使用 ES6/7 特性开发项目，那么创建项目时需要加上 <code>--es</code> 参数，这样生成文件的代码都是 ES6/7 语法的。如：</p>\n<pre><code class=\"lang-sh\">thinkjs new thinkjs_demo --es\n</code></pre>\n<h4 id=\"-typescript-\">创建 TypeScript 项目</h4>\n<p>如果想使用 TypeScript 来开发项目，那么创建项目时需要加上 <code>--ts</code> 参数，这样生成文件的代码都是 TypeScript 语法的。如：</p>\n<pre><code class=\"lang-sh\">thinkjs new thinkjs_demo --ts\n</code></pre>\n<p><code>注</code>：TypeScript 项目文件后缀都是 <code>.ts</code>。</p>\n<h4 id=\"-\">设置项目模式</h4>\n<p>默认创建的项目是按模块来划分的。如果项目比较小，不想按模块来划分的话，可以创建项目时指定 <code>--mode</code> 参数。如：</p>\n<pre><code class=\"lang-sh\">thinkjs new thinkjs_demo --mode=normal\n</code></pre>\n<p>支持的模式列表如下：</p>\n<ul>\n<li><code>normal</code> 普通项目，模块在功能下划分。</li>\n<li><code>module</code> 按模块划分，大型项目或者想严格按模块划分的项目。</li>\n</ul>\n<p><code>注</code>：创建项目后，会在项目下创建一个名为 <code>.thinkjsrc</code> 的隐藏文件，里面标识了当前项目的一些配置，该配置会影响后续创建文件，所以需要将该文件需要纳入到版本库中。</p>\n<h3 id=\"-\">添加模块</h3>\n<p>创建项目时会自动创建模块 <code>common</code> 和 <code>home</code>，如果还需要创建其他的模块，可以在项目目录下通过 <code>thinkjs module [name]</code> 命令来创建。如：</p>\n<pre><code class=\"lang-sh\">thinkjs module admin\n</code></pre>\n<p>执行完成后，会创建目录 <code>src/admin</code>，以及在该目录下创建对应的文件。</p>\n<h3 id=\"-middleware\">添加 middleware</h3>\n<p>可以在项目目录下通过 <code>thinkjs middleware [name]</code> 命令来添加 middleware。如：</p>\n<pre><code class=\"lang-sh\">thinkjs middleware test;\n</code></pre>\n<p>执行完成后，会创建 <code>src/common/middleware/test.js</code> 文件。</p>\n<h3 id=\"-model\">添加 model</h3>\n<p>可以在项目目录下通过 <code>thinkjs model [name]</code> 命令来添加 model。如：</p>\n<pre><code class=\"lang-sh\">thinkjs model user;\n</code></pre>\n<p>执行完成后，会创建 <code>src/common/model/user.js</code> 文件。</p>\n<p>默认会在 <code>common</code> 模块下创建，如果想在其他模块下创建，可以通过指定模块创建。如：</p>\n<pre><code class=\"lang-sh\">thinkjs model home/user;\n</code></pre>\n<p>指定模块为 <code>home</code> 后，会创建 <code>src/home/model/user.js</code> 文件。</p>\n<h5 id=\"-mongo-model\">添加 Mongo Model</h5>\n<p>默认添加的 Model 是关系数据库的模型，如果想创建 Mongo Model，可以通过指定 <code>--mongo</code> 参数来添加。如：</p>\n<pre><code class=\"lang-sh\">thinkjs model home/user --mongo\n</code></pre>\n<h5 id=\"-relation-model\">添加 Relation Model</h5>\n<p>添加关联模型可以通过指定 <code>--relation</code> 参数。如：</p>\n<pre><code class=\"lang-sh\">thinkjs model home/user --relation\n</code></pre>\n<h3 id=\"-controller\">添加 controller</h3>\n<p>可以在项目目录下通过 <code>thinkjs controller [name]</code> 命令来添加 controller。如：</p>\n<pre><code class=\"lang-sh\">thinkjs controller user;\n</code></pre>\n<p>执行完成后，会创建 <code>src/common/controller/user.js</code> 文件，同时会创建 <code>src/common/logic/user.js</code> 文件。</p>\n<p>默认会在 <code>common</code> 模块下创建，如果想在其他模块下创建，可以通过指定模块创建。如：</p>\n<pre><code class=\"lang-sh\">thinkjs controller home/user;\n</code></pre>\n<p>指定模块为 <code>home</code> 后，会创建 <code>src/home/controller/user.js</code> 文件。</p>\n<h5 id=\"-rest-controller\">添加 Rest Controller</h5>\n<p>如果想提供 Rest API，可以带上 <code>--rest</code> 参数来创建。如：</p>\n<pre><code class=\"lang-sh\">thinkjs controller home/user --rest;\n</code></pre>\n<h3 id=\"-service\">添加 service</h3>\n<p>可以在项目目录下通过 <code>thinkjs service [name]</code> 命令来添加 service。如：</p>\n<pre><code class=\"lang-sh\">thinkjs service github; #创建调用 github 接口的 service\n</code></pre>\n<p>执行完成后，会创建 <code>src/common/service/github.js</code> 文件。</p>\n<p>默认会在 <code>common</code> 模块下创建，如果想在其他模块下创建，可以通过指定模块创建。如：</p>\n<pre><code class=\"lang-sh\">thinkjs service home/github;\n</code></pre>\n<p>指定模块为 <code>home</code> 后，会创建 <code>src/home/service/github.js</code> 文件。</p>\n<h3 id=\"-adapter\">添加 adapter</h3>\n<p>可以通过 <code>thinkjs adapter [type]/[name]</code> 来创建 adapter。如：</p>\n<pre><code class=\"lang-sh\">thinkjs adapter template/dot\n</code></pre>\n<p>执行后会创建文件 <code>src/common/adapter/template/dot.js</code>，表示创建一个名为 dot 的模版类型 adapter。</p>\n<h3 id=\"-plugin\">创建 plugin</h3>\n<p>ThinkJS 支持 middleware 和 adapter 2 种插件，可以通过 <code>thinkjs plugin &lt;pluginName&gt;</code> 来初始化一个插件，然后进行开发。</p>\n<pre><code class=\"lang-sh\">thinkjs plugin think-template-dot\n</code></pre>\n<p>插件名称建议使用 <code>think-</code> 打头，这样发布到 npm 仓库后，方便其他用户搜索。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>\n<p><br></p>', '', '', '2017-07-17 14:12:28', '38', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('53', '静态资源访问', '', '<p>项目开发时，一般都需要在模版里引用静态资源。</p>\n<p>使用 <code>thinkjs</code> 命令创建项目时，会自动创建 <code>www/static</code> 目录，该目录下专门用来存放 JS、CSS、图片等静态资源。</p>\n<h3 id=\"-\">访问静态资源</h3>\n<p>静态资源放在 <code>www/static</code> 目录后，模版里就可以通过下面的方式引入静态资源。</p>\n<h4 id=\"-js-\">模版里引用 JS 文件</h4>\n<pre><code class=\"lang-html\">&lt;script src=\"/static/js/foo.js\"&gt;&lt;/script&gt;\n</code></pre>\n<h4 id=\"-css-\">模版里引用 CSS 文件</h4>\n<pre><code class=\"lang-html\">&lt;link href=\"/static/css/foo.css\" rel=\"stylesheet\" /&gt;\n</code></pre>\n<h4 id=\"-\">模版里引用图片文件</h4>\n<pre><code class=\"lang-html\">&lt;img src=\"/static/img/foo.png\" alt=\"\" &gt;\n</code></pre>\n<h3 id=\"-\">静态资源访问配置</h3>\n<p>对于一个请求是否是静态资源请求，是通过正则来判断的。默认配置如下：</p>\n<pre><code class=\"lang-js\">export default {\n  resource_on: true, //是否开启静态资源解析功能\n  resource_reg: /^(static\\/|[^\\/]+\\.(?!js|html)\\w+$)/, //判断为静态资源请求的正则\n}\n</code></pre>\n<p>项目里可以根据需要在配置文件里 <code>src/common/config/config.js</code> 进行修改。</p>\n<h3 id=\"-\">线上关闭静态资源访问</h3>\n<p>项目上线后，一般会使用 nginx 等 WEB 服务器做一层代理，这时候就可以将静态资源的请求直接让 nginx 来处理，项目里就可以关闭对静态资源请求的处理来提高性能。</p>\n<p>可以在配置文件 <code>src/common/config/env/prodution.js</code> 里修改配置来关闭，如：</p>\n<pre><code class=\"lang-js\">export default {\n  resource_on: false\n}\n</code></pre><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:14:39', '38', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('54', '错误处理', '', '<p>系统在处理用户请求时，会遇到各种各样的错误情况。如：系统内部错误，url 不存在，没有权限，服务不可用等，这些情况下需要给用户显示对应的错误页面。</p>\n<h3 id=\"-\">错误页面</h3>\n<p>通过 <code>thinkjs</code> 命令创建项目时，会自动添加错误处理的逻辑文件以及相应的错误页面。</p>\n<p>错误逻辑文件路径为 <code>src/common/controller/error.js</code>，该文件内容大致如下：</p>\n<pre><code class=\"lang-js\">\'use strict\';\n/**\n * error controller\n */\nexport default class extends think.controller.base {\n  /**\n   * display error page\n   * @param  {Number} status []\n   * @return {Promise}        []\n   */\n  displayErrorPage(status){\n    let module = \'common\';\n    if(think.mode !== think.mode_module){\n      module = this.config(\'default_module\');\n    }\n    let file = `${module}/error/${status}.html`;\n    let options = this.config(\'tpl\');\n    options = think.extend({}, options, {type: \'ejs\'});\n    return this.display(file, options);\n  }\n  /**\n   * Bad Request \n   * @return {Promise} []\n   */\n  _400Action(){\n    return this.displayErrorPage(400);\n  }\n  /**\n   * Forbidden \n   * @return {Promise} []\n   */\n  _403Action(){\n    return this.displayErrorPage(403);\n  }\n  /**\n   * Not Found \n   * @return {Promise}      []\n   */\n  _404Action(){\n    return this.displayErrorPage(404);\n  }\n  /**\n   * Internal Server Error\n   * @return {Promise}      []\n   */\n  _500Action(){\n    return this.displayErrorPage(500);\n  }\n  /**\n   * Service Unavailable\n   * @return {Promise}      []\n   */\n  _503Action(){\n    return this.displayErrorPage(503);\n  }\n}\n</code></pre>\n<p>对应的模版文件路径为 <code>view/common/error_{Number}.html</code>。</p>\n<h3 id=\"-\">错误类型</h3>\n<p>系统默认支持的错误类型有 <code>400</code>，<code>403</code>，<code>404</code>，<code>500</code> 和 <code>503</code>。</p>\n<h4 id=\"400\">400</h4>\n<p>错误的请求，如：恶意构造一些非法的数据访问、访问的 url 不合法等。</p>\n<h4 id=\"403\">403</h4>\n<p>当前访问没有权限。</p>\n<h4 id=\"404\">404</h4>\n<p>访问的 url 不存在。</p>\n<h4 id=\"500\">500</h4>\n<p>系统内部出现错误，导致当前请求不可用。</p>\n<h4 id=\"503\">503</h4>\n<p>服务不可用，需要等到恢复后才能访问。</p>\n<h3 id=\"-\">扩展错误类型</h3>\n<p>项目里可以根据需要扩展错误类型，假如添加一个项目特有的错误 <code>600</code>，那么可以通过下面步骤进行：</p>\n<h5 id=\"1-_600action\">1、添加 _600Action</h5>\n<p>在 <code>src/common/controller/error.js</code> 文件中，合适的位置添加如下的代码：</p>\n<pre><code class=\"lang-js\">  _600Action(){\n    return this.displayErrorPage(600);\n  }\n</code></pre>\n<h5 id=\"2-\">2、添加错误页面</h5>\n<p>添加文件 <code>view/common/error_600.html</code>，并在文件里添加显示的错误内容。</p>\n<h5 id=\"3-\">3、显示错误页面</h5>\n<p>添加完错误后，需要在对应地方调用显示错误才能让用户看到，可以通过 <code>think.statusAction</code> 方法实现。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    if(someError){\n      return think.statusAction(600, this.http); //显示 600 错误，需要将 http 对象传递进去\n    }\n  }\n}\n</code></pre>\n<h3 id=\"-\">修改错误页面样式</h3>\n<p>修改错误页面样式，只需要修改对应的模版文件即可，如：修改 <code>404</code> 错误则修改模版文件 <code>view/common/error_404.html</code>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>\n<p><br></p>', '', '', '2017-07-17 14:17:47', '31', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('55', '错误信息', '', '<h3 id=\"eperm\">EPERM</h3>\n<h5 id=\"operation-not-permitted\">Operation Not Permitted</h5>\n<p>尝试执行某些需要特殊权限的操作。</p>\n<h3 id=\"enoent\">ENOENT</h3>\n<h5 id=\"no-such-file-or-directory\">No Such File Or Directory</h5>\n<p>通常由文件系统操作引起，比如路径中某个组件指定的路径或文件并不存在。</p>\n<h3 id=\"eacces\">EACCES</h3>\n<h5 id=\"permission-denied\">Permission Denied</h5>\n<p>拒绝访问。</p>\n<h3 id=\"eexist\">EEXIST</h3>\n<h5 id=\"file-exists\">File Exists</h5>\n<p>要求目标不存在的操作遇到了目标存在的情况。</p>\n<h3 id=\"enotdir\">ENOTDIR</h3>\n<h5 id=\"not-a-directory\">Not a Directory</h5>\n<p>给定的路径存在，但不是想要的文件夹。通常由<code>fs.readdir</code>引起。</p>\n<h3 id=\"eisdir\">EISDIR</h3>\n<h5 id=\"is-a-directory\">Is a Directory</h5>\n<p>操作的目标是文件，但给定的却是文件夹。</p>\n<h3 id=\"emfile\">EMFILE</h3>\n<h5 id=\"too-many-open-files-in-system\">Too Many Open Files In System</h5>\n<p>系统打开的文件数量已经达到上限，至少关闭一个才能打开请求的文件。</p>\n<p>通常不允许过多文件同时打开的系统（如OS X）中出现，要提高限制，可以在运行Node.js进程的同一个sh中运行<code>ulimit -n 2048</code>。</p>\n<h3 id=\"epipe\">EPIPE</h3>\n<h5 id=\"broken-pipe\">Broken Pipe</h5>\n<p>对管道、套按字或FIFO只有写而没有读。通常在<code>net</code>或<code>http</code>层出现，意味着正向其中写入数据的远程服务已关闭。</p>\n<h3 id=\"eaddrinuse\">EADDRINUSE</h3>\n<h5 id=\"address-already-in-use\">Address Already In Use</h5>\n<p>尝试把服务器绑定到一个本地地址，但该地址已经被占用。</p>\n<h3 id=\"econnreset\">ECONNRESET</h3>\n<h5 id=\"connection-reset-by-peer\">Connection Reset By Peer</h5>\n<p>连接被对端强制关闭。通常在远程套接字通信中由于对端超时或重启而丢失连接时导致。常见于<code>http</code>和<code>net</code>模块。</p>\n<h3 id=\"econnrefused\">ECONNREFUSED</h3>\n<h5 id=\"connection-refused\">Connection Refused</h5>\n<p>目标机器频繁拒绝导致无法建立连接。通常在尝试连接外部非活动主机时发生。</p>\n<h3 id=\"enotempty\">ENOTEMPTY</h3>\n<h5 id=\"directory-not-empty\">Directory Not Empty</h5>\n<p>操作目标是空文件夹，但当前文件夹非空，常见于调用<code>fs.unlink</code>。</p>\n<h3 id=\"etimedout\">ETIMEDOUT</h3>\n<h5 id=\"operation-timed-out\">Operation Timed Out</h5>\n<p>目标超过既定时间未响应造成连接或请求失败。通常在<code>http</code>或<code>net</code>中出现，一般表明连接的套接字没有适当<code>.end()</code>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:18:42', '32', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('56', '国际化', '', '<h3 id=\"-\">获取语言</h3>\n<p>可以通过 <code>http.lang</code> 方法从 cookie 或者 header 里获取当前用户的语言。如：</p>\n<pre><code class=\"lang-js\">let lang = http.lang();\n</code></pre>\n<p>如果要支持从 cookie 里获取用户选择的语言，那么需要设置语言在 cookie 里的名称。可以在配置文件 <code>src/common/config/locale.js</code> 里修改，如：</p>\n<pre><code class=\"lang-js\">export default {\n  cookie_name: \'think_locale\', //存放语言的 cookie 名称\n  default: \'en\' //默认语言\n};\n</code></pre>\n<p>在 Controller 里可以直接通过 <code>this.lang</code> 方法获取对应的语言。</p>\n<h3 id=\"-url-\">从 URL 中解析语言</h3>\n<p>有些情况下，语言是要从 URL 中解析。比如：当前页面的地址是 <code>https://www.thinkjs.org/zh-cn/doc/2.0/i18n.html</code>，就包含了语言 <code>zh-cn</code>。</p>\n<p>这种情况下需要在项目里通过 middleware 来解析其中的语言，如：</p>\n<pre><code class=\"lang-js\">think.middleware(\'get_lang\', http =&gt; {\n  let supportLangs = think.config(\'locale.support\');\n  let lang = http.pathname.split(\'/\')[0]; //从 URL 中获取语言\n\n  if(supportLangs.indexOf(lang) &gt; -1){\n    http.pathname = http.pathname.substr(lang.length + 1);\n  }else{\n    lang = http.lang(); //从 cookie 或者 header 中获取语言\n    if(supportLangs.indexOf(lang) === -1){\n      lang = http.config(\'locale.default\'); //默认支持的语言\n    }\n  }\n  http.lang(lang, true); //设置语言，并设置模版路径中添加语言目录\n});\n</code></pre>\n<p>从 URL 中解析到语言后，通过 <code>http.lang</code> 方法设置语言，后续在 Controller 里可以直接通过 <code>http.lang</code> 来获取语言了。</p>\n<p>定义 middleware <code>get_lang</code> 后，添加到对应的 hook 里。如：</p>\n<pre><code class=\"lang-js\">export default {\n  route_parse: [\'prepend\', \'get_lang\'], //将 get_lang 前置添加到 route_parse hook 里\n}\n</code></pre>\n<h3 id=\"-\">语言变量配置</h3>\n<p>支持国际化的项目需要配置变量在不同语言下的值，配置文件在 <code>src/common/config/locale/[lang].js</code>，配置格式如下：</p>\n<pre><code class=\"lang-js\">// src/common/config/locale/zh-cn.js\nexport default {\n  \'title-home\': \'ThinkJS官网 - A Node.js MVC Framework Support All Of ES6/7 Features\',\n  \'title-changelog\': \'更新日志 - ThinkJS官网\',\n}\n</code></pre>\n<pre><code class=\"lang-js\">// src/common/config/locale/en.js\nexport default {\n  \'title-home\': \'ThinkJS - A Node.js MVC Framework Support All Of ES6/7 Features\',\n  \'title-changelog\': \'Changelog - ThinkJS\'\n}\n</code></pre>\n<h3 id=\"-\">获取语言变量</h3>\n<p>配置语言变量后，可以通过 <code>http.locale</code> 方法来获取当前语言对应的变量值。如：</p>\n<pre><code class=\"lang-js\">let homeTitle = http.locale(\'title-home\');\n</code></pre>\n<p>如果在 Controller 中，可以直接通过 <code>this.locale</code> 方法来获取，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let homeTitle = this.locale(\'title-home\');\n  }\n}\n</code></pre>\n<h3 id=\"-\">模版里使用语言变量</h3>\n<p>模版里可以通过 <code>_</code> 函数来获取对应的语言值。下面以 <code>ejs</code> 模版引擎为例：</p>\n<pre><code class=\"lang-html\">&lt;%- _(\'title-home\') %&gt;\n</code></pre>\n<h3 id=\"-\">设置模版语言路径</h3>\n<p>有些项目中，需要根据不同的语言定制不同的模版，这时模版路径里加一层语言目录来处理就比较合适了。如：<code>view/zh-cn/home/index_index.html</code>，路径中添加了一层 <code>zh-cn</code> 语言目录。</p>\n<p>可以通过 <code>http.lang</code> 方法设置语言并设置在模版路径里添加一层语言目录。如：</p>\n<pre><code class=\"lang-js\">http.lang(lang, true); // true 表示在模版路径里添加一层语言目录\n</code></pre>\n<p>在 Controller 里可以通过 <code>this.lang</code> 方法来设定。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let lang = getFromUrl();\n    this.lang(lang, true);\n    ...\n  }\n}\n</code></pre><p>\n文章来源：<a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:19:49', '32', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('57', '路径常量', '', '<p>系统提供了很多常量供项目里使用，利用这些常量可以方便的访问对应的文件。</p>\n<h3 id=\"think-root_path\">think.ROOT_PATH</h3>\n<p>项目的根目录。</p>\n<h3 id=\"think-resource_path\">think.RESOURCE_PATH</h3>\n<p>静态资源根目录，路径为 <code>think.ROOT_PATH</code> + <code>/www/</code>。</p>\n<h3 id=\"think-app_path\">think.APP_PATH</h3>\n<p>APP 代码目录，路径为 <code>think.ROOT_PATH</code> + <code>/app/</code>。</p>\n<h3 id=\"think-think_path\">think.THINK_PATH</h3>\n<p>ThinkJS 框架的根目录。</p>\n<h3 id=\"think-think_lib_path\">think.THINK_LIB_PATH</h3>\n<p>ThinkJS 框架 <code>lib</code> 目录。</p>\n<h3 id=\"think-getpath-module-type-\">think.getPath(module, type)</h3>\n<p>对于 model，controller，view 等目录，由于每个模块下都有这些目录，所以无法给出一个固定的路径值。可以通过 <code>think.getPath</code> 来获取模块下的路径。</p>\n<pre><code class=\"lang-js\">let path1 = think.getPath(\'common\', \'model\'); //获取 common 下 model 的目录\nlet path2 = think.getPath(\'home\', \'controller\'); //获取 home 模块下 controller 的目录\n</code></pre>\n<h3 id=\"-\">自定义路径常量</h3>\n<p>除了通过系统给的属性或者方法来获取路径，还可以在项目里定义额外的路径常量。</p>\n<h5 id=\"-\">入口文件里定义</h5>\n<p>项目的入口文件为 <code>src/index.js</code> 或者 <code>src/production.js</code> 等，可以在这些入口文件里定义一些路径常量。如：</p>\n<pre><code class=\"lang-js\">var thinkjs = require(\'thinkjs\');\nvar path = require(\'path\');\n\nvar rootPath = path.dirname(__dirname);\n\nvar instance = new thinkjs({\n  APP_PATH: rootPath + \'/app\',\n  ROOT_PATH: rootPath,\n  RESOURCE_PATH: __dirname,\n  UPLOAD_PATH: __dirname + \'/upload\', // 定义文件上传的目录\n  env: \'development\'\n});\n\ninstance.run();\n</code></pre>\n<h5 id=\"-\">启动文件里定义</h5>\n<p>定义在 <code>src/common/bootstrap</code> 里的文件在项目启动时会自动加载，所以也可以在这些文件里定义路径常量。如：</p>\n<pre><code class=\"lang-js\">// src/common/bootstrap/common.js\nthink.UPLOAD_PATH = think.RESOURCE_PATH + \'/upload\'; //定义文件上传的目录\n</code></pre><p>\n文章来源：<a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:21:07', '29', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('58', '定时任务', '', '<p>项目在线上运行时，经常要定时去执行某个功能，这时候就需要使用定时任务来处理了。ThinkJS 支持命令行方式调用，结合系统的 crontab 功能可以很好的支持定时任务。</p>\n<h3 id=\"-\">命令行执行</h3>\n<p>ThinkJS 除了支持通过 URL 访问来执行外，还可以通过命令行的方式调用执行。使用方式如下：</p>\n<pre><code class=\"lang-sh\">node www/production.js home/index/index\n</code></pre>\n<p>上面的命令表示执行 <code>home</code> 模块下 <code>index</code> Controller 里的 indexAction。</p>\n<h5 id=\"-\">携带参数</h5>\n<p>如果需要加参数，只要在后面加上对应的参数即可：</p>\n<pre><code class=\"lang-sh\">node www/production.js home/index/index?name=thinkjs\n</code></pre>\n<p>Action 里就可以通过 <code>this.get</code> 方法来获取参数 <code>name</code> 了。</p>\n<h5 id=\"-\">修改请求方法</h5>\n<p>命令行执行默认的请求类型是 GET，如果想改为其他的类型，可以用下面的方法：</p>\n<pre><code class=\"lang-sh\">node www/production.js url=home/index/index&amp;method=post\n</code></pre>\n<p>这样就把请求类型改为了 post。但这种方式下，参数 url 的值里就不能包含 &amp; 字符了（可以通过 / 的方式指定参数，如<code>node www/production.js url=home/index/index/foo/bar&amp;method=post</code>）。</p>\n<p>除了修改请求类型，还可以修改下面的参数：</p>\n<ul>\n<li><code>host</code> 修改请求的 host 默认为 127.0.0.1</li>\n<li><code>ip</code> 修改请求的 ip 默认为 127.0.0.1</li>\n</ul>\n<h5 id=\"-header\">修改 header</h5>\n<p>有时候如果想修改更多的 headers，可以传一个完整的 json 数据，如：</p>\n<pre><code class=\"lang-sh\">node www/production.js {\"url\":\"/index/index\",\"ip\":\"127.0.0.1\",\"method\":\"POST\",\"headers\":{\"xxx\":\"yyyy\"}}\n</code></pre>\n<h5 id=\"-url-\">禁止 URL 访问</h5>\n<p>默认情况下，命令行执行的 Action 通过 URL 也可以访问到。如果禁止 URL 访问到该 Action，可以通过 <code>this.isCli</code> 来判断。如：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //禁止 URL 访问该 Action\n    if(!this.isCli()){\n      this.fail(\'only invoked in cli mode\');\n    }\n    ...\n  }\n}\n</code></pre>\n<h3 id=\"-\">执行脚本</h3>\n<p>可以创建一个简单的执行脚本来调用命令行执行，如：</p>\n<pre><code class=\"lang-sh\">cd project_path; \nnode www/production.js home/index/index;\n</code></pre>\n<p>在项目目录下创建目录 <code>crontab</code>，将上面执行脚本存为一个文件放在该目录下。</p>\n<h3 id=\"-\">定时执行</h3>\n<p>借助系统里的 crontab 可以做到定时执行，通过命令 <code>crontab -e</code> 来编辑定时任务，如：</p>\n<pre><code class=\"lang-sh\">0 */1 * * * /bin/sh project_path/crontab/a.sh # 1 小时执行一次\n</code></pre>\n<h3 id=\"-node-crontab-\">使用 node-crontab 模块执行定时任务</h3>\n<p>除了使用 crontab 和命令行联合执行定时任务外，也可以使用 <code>node-crontab</code> 模块执行定时任务。如：</p>\n<pre><code class=\"lang-js\">import crontab from \'node-crontab\';\n// 1 小时执行一次\nlet jobId = crontab.scheduleJob(\'0 */1 * * *\', () =&gt; {\n\n});\n</code></pre>\n<p>将上面代码文件存放在 <code>src/common/bootstrap</code> 目录下，这样可以在服务启动时自动执行。</p>\n<p>如果希望在开发环境下能立即看下执行的效果，可以用类似下面的方式：</p>\n<pre><code class=\"lang-js\">import crontab from \'node-crontab\';\n\nlet fn = () =&gt; {\n  //定时任务具体逻辑\n  //调用一个 Action\n  think.http(\'/home/image/spider\', true); //模拟访问 /home/image/spier\n}\n// 1 小时执行一次\nlet jobId = crontab.scheduleJob(\'0 */1 * * *\', fn);\n//开发环境下立即执行一次看效果\nif(think.env === \'development\'){\n  fn();\n}\n</code></pre><p>\n文章来源：<a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></p>', '', '', '2017-07-17 14:22:31', '36', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('59', '线上部署', '', '<h3 id=\"-\">代码编译</h3>\n<p>开发环境下，代码会自动编译、自动更新，但这种机制时间长了会有一定的内存泄露，所以线上不可使用这种方式。</p>\n<p>需要在代码上线前执行 <code>npm run compile</code> 命令，将 <code>src/</code> 目录编译到 <code>app/</code> 目录，然后将 <code>app/</code> 目录下的文件上线。</p>\n<h3 id=\"-pm2-\">使用 PM2 管理服务</h3>\n<p>PM2 是一款专业管理 Node.js 服务的模块，非常建议在线上使用。使用 PM2 需要以全局的方式安装，如： <code>sudo npm install -g pm2</code>。安装完成后，命令行下会有 pm2 命令。</p>\n<p>创建项目时，会在项目目录下创建名为 <code>pm2.json</code> 的配置文件，内容类似如下：</p>\n<pre><code class=\"lang-js\">{\n  \"apps\": [{\n    \"name\": \"demo\",\n    \"script\": \"www/production.js\",\n    \"cwd\": \"/Users/welefen/Develop/git/thinkjs/demo\",\n    \"max_memory_restart\": \"1G\",\n    \"autorestart\": true,\n    \"node_args\": [],\n    \"args\": [],\n    \"env\": {\n\n    }\n  }]\n}\n</code></pre>\n<p>将 <code>cwd</code> 配置值改为线上真实的项目路径，然后在项目目录下使用下面的命令来启动/重启服务：</p>\n<pre><code class=\"lang-sh\">pm2 startOrReload pm2.json\n</code></pre>\n<p>如果进程重启之前想进行一些操作，如：保存一些临时数据，那么可以使用 <code>GracefulReload</code>，具体请见：<a href=\"http://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/#graceful-reload。\">http://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/#graceful-reload。</a></p>\n<p>PM2 详细的配置请见 <a href=\"http://pm2.keymetrics.io/docs/usage/application-declaration/\">http://pm2.keymetrics.io/docs/usage/application-declaration/</a>。</p>\n<hr>\n<p><code>注</code>：如果线上不使用 PM2 来管理 Node.js 服务的话，启动服务需要使用命令 <code>node www/production.js</code>。</p>\n<h3 id=\"-nginx-\">使用 nginx 做反向代理</h3>\n<p>创建项目时，会在项目目录创建一个名为 <code>nginx.conf</code> 的 nginx 配置文件。配置文件内容类似如下：</p>\n<pre><code class=\"lang-nginx\">server {\n    listen 80;\n    server_name localhost;\n    root /Users/welefen/Develop/git/thinkjs/demo/www;\n    set $node_port 8360;\n\n    index index.js index.html index.htm;\n    if ( -f $request_filename/index.html ){\n        rewrite (.*) $1/index.html break;\n    }\n    if ( !-f $request_filename ){\n        rewrite (.*) /index.js;\n    }\n    location = /index.js {\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_pass http://127.0.0.1:$node_port$request_uri;\n        proxy_redirect off;\n    }\n    location = /production.js {\n        deny all;\n    }\n\n    location = /testing.js {\n        deny all;\n    }\n    location ~ /static/ {\n        etag         on;\n        expires      max;\n    }\n}\n</code></pre>\n<p>将 <code>server_name localhost</code> 里的 localhost 修改为对应的域名，将 <code>set $node_port 8360</code> 里的 8360 修改和项目里监听的端口一致。</p>\n<p>修改完成后，将该配置文件拷贝到 nginx 的配置文件目录中，然后通过 <code>nginx -s reload</code> 命令 reload 配置，这样就可以通过域名访问了。</p>\n<p>线上建议开启配置 <code>proxy_on</code>，这样就可以禁止直接通过 IP + 端口来访问。修改配置文件 <code>src/common/config/env/production.js</code>，如：</p>\n<pre><code class=\"lang-js\">export default {\n  proxy_on: true\n}\n</code></pre>\n<h3 id=\"-\">关闭静态资源处理的配置</h3>\n<p>为了方便开发，ThinkJS 是支持处理静态资源请求的。但代码部署在线上时，是用 nginx 来处理静态资源请求的，这时可以关闭 ThinkJS 里处理静态资源请求的功能来提高性能。</p>\n<p>可以在配置文件 <code>src/common/config/env/production.js</code> 中加入如下的配置：</p>\n<pre><code class=\"lang-js\">export default {\n  resource_on: false\n}\n</code></pre>\n<h3 id=\"-cluster\">使用 cluster</h3>\n<p>线上可以开启 cluster 功能达到利用多核 CPU 来提升性能，提高并发处理能力。</p>\n<p>可以在配置文件 <code>src/common/config/env/production.js</code> 中加入如下的配置：</p>\n<pre><code class=\"lang-js\">export default {\n  cluster_on: true\n}\n</code></pre>\n<p><code>注</code>：如果使用 PM2 来部署，并且开启了 cluster 模式，那么就无需在开启 ThinkJS 里的 cluster。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:23:27', '30', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('60', '单元测试', '', '<p>项目中写一些接口时有时候希望进行单元测试，ThinkJS 从 2.1.4 版本开始创建项目时支持创建单元测试相关的目录。</p>\n<h3 id=\"-\">创建单元测试项目</h3>\n<p>创建项目时带上 <code>--test</code> 参数后就会创建测试相关的目录，如：</p>\n<pre><code class=\"lang-sh\">thinkjs new demo --es --test\n</code></pre>\n<p>创建完成后，项目下会有 <code>test/</code> 目录，该目录有单元测试的示例代码，自己写的单元测试代码也也都放在该目录下。</p>\n<p><code>注</code>：如果 ThinkJS 版本低于 <code>2.1.4</code>，需要先将全局的 ThinkJS 升级。</p>\n<h3 id=\"-\">测试框架</h3>\n<p>默认使用的测试框架是 <code>mocha</code>，代码覆盖率框架为 <code>istanbul</code>。</p>\n<h3 id=\"-\">书写单元测试</h3>\n<p>可以用 <code>describe</code> 和 <code>it</code> 的方式来书写测试代码，如：</p>\n<pre><code class=\"lang-js\">var assert = require(\'assert\');\ndescribe(\'unit test\', function(){\n  it(\'test controller\', function(){\n    var data = getFromFn();\n    assert.equal(data, 1); //测试 data 是否等于 1，不等于则会测试失败\n  })\n})\n</code></pre>\n<p>有些接口是异步的，mocha 提供了一个参数来完成，如：</p>\n<pre><code class=\"lang-js\">var assert = require(\'assert\');\ndescribe(\'unit test\', function(){\n  it(\'test controller\', function(done){\n    getFromFn().then(function(data){\n      assert.equal(data, 1); //测试 data 是否等于 1，不等于则会测试失败\n      done(); //这里必须执行下 done，告知接口已经拿到数据并校验\n    })\n  })\n})\n</code></pre>\n<p>更多的测试用户请参考生成的文件 <code>test/index.js</code>，也可以参考 ThinkJS 框架的测试用例 <a href=\"https://github.com/75team/thinkjs/tree/master/test\">https://github.com/75team/thinkjs/tree/master/test</a>。</p>\n<h3 id=\"-\">执行单元测试</h3>\n<p>单元测试写完后，执行 <code>npm test</code> 就可以进行单元测试。如果代码需要编译，可以在另一个标签页面里执行 <code>npm start</code>，这样代码改变后就会自动编译。</p>\n<h3 id=\"-\">老项目支持</h3>\n<p>如果是之前创建的项目，那么通过下面的方式来支持单元测试：</p>\n<ul>\n<li>拷贝 <a href=\"https://github.com/75team/thinkjs/blob/master/template/test/index.js\">https://github.com/75team/thinkjs/blob/master/template/test/index.js</a> 内容到 <code>test/index.js</code> 文件下</li>\n<li>修改 <code>package.json</code> 文件，添加：在 <code>devDependencies</code> 里添加：</li>\n</ul>\n<pre><code class=\"lang-js\">{\n  \"devDependencies\": {\n    \"mocha\": \"1.20.1\",\n    \"istanbul\": \"0.4.0\"\n  }\n}\n</code></pre><p>\n文章来源：<a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></p>', '', '', '2017-07-17 14:24:49', '36', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('61', '开发插件', '', '<p>ThinkJS 2.0 里支持 2 种类型的插件，一种是 <a href=\"./middleware.html\">Middleware</a>，另一种是 <a href=\"./adapter_intro.html\">Adapter</a>。</p>\n<h3 id=\"-\">创建插件</h3>\n<p>可以通过下面的命令创建一个插件，插件命令建议使用 <code>think-</code> 打头。</p>\n<pre><code class=\"lang-sh\">thinkjs plugin think-xxx\n</code></pre>\n<p>执行后，会自动创建 <code>think-xxx</code> 目录，并可以看到类似下面的信息：</p>\n<pre><code class=\"lang-text\">  create : think-xxx/\n  create : think-xxx/src\n  create : think-xxx/src/index.js\n  create : think-xxx/test\n  create : think-xxx/test/index.js\n  create : think-xxx/.eslintrc\n  create : think-xxx/.npmignore\n  create : think-xxx/.travis.yml\n  create : think-xxx/package.json\n  create : think-xxx/README.md\n\n  enter path:\n  $ cd think-xxx/\n\n  install dependencies:\n  $ npm install\n\n  watch compile:\n  $ npm run watch-compile\n\n  run test:\n  $ npm run test-cov\n</code></pre>\n<h3 id=\"-\">目录结构</h3>\n<ul>\n<li><code>src/</code> 存放源代码，使用 ES6/7 特性开发</li>\n<li><code>test/</code> 单元测试目录</li>\n<li><code>.eslintrc</code> eslint 检查配置文件</li>\n<li><code>.npmignore</code> npm 发布时忽略的文件</li>\n<li><code>.travis.yml</code>  travis 持续集成配置文件</li>\n<li><code>package.json</code> npm 配置文件</li>\n<li><code>README.md</code> 说明文件</li>\n</ul>\n<h3 id=\"-\">安装依赖</h3>\n<pre><code class=\"lang-sh\">npm install --verbose\n</code></pre>\n<h3 id=\"-\">开发</h3>\n<p>代码文件为 <code>src/index.js</code>，默认生成的文件只是一个基本的类输出，没有继承任何类。</p>\n<p>如果是 Middleware，需要继承 <code>think.middleware.base</code> 类。如果是 Adapter，需要继承 <code>think.adapter.base</code> 类。</p>\n<p>开发过程中，可以在命令行下执行 <code>npm run watch-compile</code>，这样文件修改后就会立即编译。</p>\n<h3 id=\"-\">单元测试</h3>\n<p>在 <code>test/index.js</code> 文件书写相关的单元测试，测试框架使用的是 mocha，可以通过下面的命令查看单元测试结果。</p>\n<pre><code class=\"lang-sh\">npm run test-cov\n</code></pre>\n<h3 id=\"-\">说明文档</h3>\n<p>代码开发和单元测试完成后，需要在 <code>README.md</code> 里书写详细的说明文档。</p>\n<h3 id=\"-\">发布</h3>\n<p>可以通过 <code>npm publish</code> 发布模块到 npm 仓库里（如果之前没发布过，会提示创建帐号和密码）。</p>\n<p>发布完成后，可以联系 ThinkJS-Team，经确认无误后，可以添加到官方的插件列表中，并领取相关的奖励。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:25:54', '32', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('62', '推荐模块', '', '<h3 id=\"-\">网络请求</h3>\n<ul>\n<li>superagent</li>\n<li>request</li>\n</ul>\n<h3 id=\"-\">日志</h3>\n<ul>\n<li>log4js</li>\n</ul>\n<h3 id=\"-\">日期处理</h3>\n<ul>\n<li>moment</li>\n</ul>\n<h3 id=\"-\">编码转化</h3>\n<ul>\n<li>iconv-lite</li>\n</ul>\n<h3 id=\"-\">图像处理</h3>\n<ul>\n<li>gm</li>\n</ul>\n<h3 id=\"-\">框架</h3>\n<ul>\n<li>thinkjs</li>\n<li>express</li>\n<li>koa</li>\n<li>sails</li>\n</ul>\n<h3 id=\"-\">调试</h3>\n<ul>\n<li>node-inspector</li>\n</ul>\n<h3 id=\"-\">单元测试</h3>\n<ul>\n<li>mocha</li>\n<li>istanbul</li>\n<li>muk</li>\n</ul>\n<h3 id=\"-\">服务管理</h3>\n<ul>\n<li>pm2</li>\n</ul>\n<h3 id=\"-\">邮件</h3>\n<ul>\n<li>nodemailer</li>\n</ul>\n<h3 id=\"-\">定时任务</h3>\n<ul>\n<li>node-crontab</li></ul>\n文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a>', '', '', '2017-07-17 14:27:55', '34', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('63', '更多功能', '', '<h3 id=\"-callback-promise\">如何将 callback 包装成 Promise</h3>\n<p>Node.js 本身提供的很多接口都是 callback 形式的，并且很多第三方库提供的接口也是 callback 形式的。但 ThinkJS 需要接口是 Promise 形式的，所以需要将 callback 形式的接口包装成 Promise。</p>\n<p>ThinkJS 提供了 <code>think.promisify</code> 方法可以快速将接口包装为 Promise 方式，具体请见<a href=\"./api_think.html#toc-c09\">这里</a>。</p>\n<h3 id=\"-\">任务队列</h3>\n<p>Node.js 一个很大的优点就是异步 I/O，这样就可以方便的做并行处理，如：并行去请求一些接口，并行去处理一些文件。但操作系统本身对文件句柄是有限制的，如果并行处理的数目不限制，可能就会导致报错。</p>\n<p>这时候一般都是通过任务队列来处理，ThinkJS 里提供了 <code>think.parallelLimit</code> 方法来处理此类需求，具体见<a href=\"./api_think.html#toc-bb7\">这里</a>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>', '', '', '2017-07-17 14:28:52', '45', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('64', 'think.base', '', '<p><code>think.base</code>是基类，所有的类都会继承该类，该类提供了一些基本的方法。</p>\n<p>使用 ES6 语法继承该类：</p>\n<pre><code class=\"lang-js\">export default class extends think.base {\n  /**\n   * init method\n   * @return {} []\n   */\n  init(){\n\n  }\n}\n</code></pre>\n<p><code>注</code>： 使用 ES6 里的类时不要写 <code>constructor</code>，把初始化的一些操作放在 <code>init</code>方法里，该方法在类实例化时自动被调用，效果等同于 <code>constructor</code>。</p>\n<p>使用普通的方式继承该类：</p>\n<pre><code class=\"lang-js\">module.exports = think.Class(think.base, {\n  /**\n   * init method\n   * @return {} []\n   */\n  init: function(){\n\n  }\n})\n</code></pre>\n<h3 id=\"init-args-\">init(...args)</h3>\n<ul>\n<li><code>args</code> {Array}</li>\n</ul>\n<p>初始化方法，这里可以进行一些赋值等操作。</p>\n<pre><code class=\"lang-js\">class a extends think.base {\n  init(name, value){\n    this.name = name;\n    this.value = value;\n  }\n}\n</code></pre>\n<p><code>注</code>：与 <code>1.x</code> 版本不同的是，<code>2.x</code> 版本 <code>init</code> 方法不再支持返回一个 <code>Promise</code>，一些通用操作放在 <code>__before</code> 魔术方法里进行。</p>\n<h3 id=\"__before-\">__before()</h3>\n<p>前置魔术方法，可以将一些通用的行为放在这里进行，如：controller 里检测用户是否登录</p>\n<pre><code class=\"lang-js\">export default class think.controller.base {\n  /**\n   * 前置魔术方法\n   * @return {Promise} []\n   */\n  * __before(){\n    let userInfo = yield this.session(\'userInfo\');\n    //如果没有登录，则跳转到登录页面\n    if(think.isEmpty(userInfo)){\n      return this.redirect(\'/logic\');\n    }\n    this.assign(\'userInfo\', userInfo)\n  }\n}\n</code></pre>\n<h3 id=\"__after-\">__after()</h3>\n<p>后置魔术方法，在方法执行完成后在执行。</p>\n<h3 id=\"filename-\">filename()</h3>\n<ul>\n<li><code>return</code> {String} 返回当前类文件的名称</li>\n</ul>\n<p>获取当前类文件的名称，不包含文件具体路径和扩展名。</p>\n<pre><code class=\"lang-js\">//假设当前类文件具体路径为 /home/xxx/project/app/controller/user.js\nclass a extends think.base {\n  test(){\n    var filename = this.filename();\n    //returns \'user\'\n  }\n}\n</code></pre>\n<h3 id=\"parsemodulefrompath-\">parseModuleFromPath()</h3>\n<p>从当前类所在的 <code>filepath</code> 解析出所在对应的模块。</p>\n<h3 id=\"invoke-method-data-\">invoke(method, ...data)</h3>\n<ul>\n<li><code>method</code> {String} 要调用的方法名称</li>\n<li><code>data</code> {Array} 传递的参数</li>\n<li><code>return</code> {Promise}</li>\n</ul>\n<p>调用一个方法，自动调用 <code>__before</code> 和 <code>__after</code> 魔术方法。不管方法本身是否返回 <code>Promise</code>，该方法始终返回 <code>Promise</code>。</p>\n<p>方法本身支持是 <code>*/yield</code> 和<code>async/await</code>。</p>\n<pre><code class=\"lang-js\">//使用 async/await\nclass Cls extends think.base {\n  async getValue(){\n    let value = await this.getValue();\n    return value;\n  }\n}\nlet instance = new Cls();\ninstance.invoke(\'getValue\').then(data =&gt; {\n\n});\n</code></pre>\n<pre><code class=\"lang-js\">//使用 */yield\nclass Cls extends think.base {\n  * getValue(){\n    let value = yield this.getValue();\n    return value;\n  }\n}\nlet instance = new Cls();\ninstance.invoke(\'getValue\').then(data =&gt; {\n\n});\n</code></pre><p>\n文章来源：<a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:31:30', '51', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('65', 'think.http.base', '', '<p><code>think.http.base</code> 继承自 <a href=\"./api_think_base.html\">think.base</a> 类，该类为含有 http 对象处理时的基类。middleware, controller, view 类都继承自该类。</p>\n<h5 id=\"-es6-\">使用 ES6 语法继承该类</h5>\n<pre><code class=\"lang-js\">export default class extends think.http.base {\n  /**\n   * 初始化方法，实例化时自动被调用，不要写 constructor\n   * @return {} \n   */\n  init(){\n\n  }\n}\n</code></pre>\n<h5 id=\"-\">使用普通的方式继承该类</h5>\n<pre><code class=\"lang-js\">module.exports = think.Class(think.http.base, {\n  init: function(){\n\n  }\n});\n</code></pre>\n<h3 id=\"-\">属性</h3>\n<h4 id=\"http\">http</h4>\n<p>封装的 http 对象，包含的属性和方法请见 <a href=\"./api_http.html\">API -&gt; http</a>。</p>\n<h3 id=\"-\">方法</h3>\n<h4 id=\"config-name-value-\">config(name, value)</h4>\n<ul>\n<li><code>name</code> {String} 配置名称</li>\n<li><code>value</code> {Mixed} 配置值</li>\n</ul>\n<p>读取或者设置配置，value 为 <code>undefined</code> 时为读取配置，否则为设置配置。</p>\n<p>该方法不仅可以读取系统预设值的配置，也可以读取项目里定义的配置。</p>\n<p><code>注</code>：不可将当前请求的用户信息作为配置来设置，会被其他用户给冲掉。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //获取配置值\n    let value = this.config(\'name\');\n  }\n}\n</code></pre>\n<h4 id=\"action-controller-action-\">action(controller, action)</h4>\n<ul>\n<li><code>controller</code> {Object | String} controller实例</li>\n<li><code>action</code> {String} action名称</li>\n<li><code>return</code> {Promise} </li>\n</ul>\n<p>调用 controller 下的 action，返回一个 Promise。自动调用 <code>__before</code> 和 <code>__after</code> 魔术方法。</p>\n<p>如果 controller 是字符串，则自动去寻找对应的 controller。</p>\n<pre><code class=\"lang-js\">//调用当前模块下controller里的action\nexport default class extends think.controller.base {\n  * indexAction(){\n    //调用user controller下的detail方法\n    let value = yield this.action(\'user\', \'detail\');\n  }\n}\n</code></pre>\n<pre><code class=\"lang-js\">//跨模块调用controller里的action\nexport default class extends think.controller.base {\n  * indexAction(){\n    //调用admin模块user controller下的detail方法\n    let value = yield this.action(\'admin/user\', \'detail\');\n  }\n}\n</code></pre>\n<h4 id=\"cache-name-value-options-\">cache(name, value, options)</h4>\n<ul>\n<li><code>name</code> {String} 缓存名称</li>\n<li><code>value</code> {Mixed | Function} 缓存值</li>\n<li><code>options</code> {Object} 缓存配置，具体见缓存配置</li>\n</ul>\n<p>读取或者设置缓存，<code>value</code> 为 <code>undefined</code> 时是读取缓存，否则为设置缓存。默认缓存类型为 <code>file</code>。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    //获取缓存\n    let value = yield this.cache(\'name\');\n  }\n}\n</code></pre>\n<p>当参数 <code>value</code> 为 function 时，表示获取缓存，如果缓存值不存在，则调用该 function，将返回值设置缓存并返回。这样避免在项目开发时要先判断缓存是否存在，然后再从相关地方读取值然后设置缓存的麻烦。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    //获取缓存，缓存不存在时自动调用 function，并设置缓存\n    let value = yield this.cache(\'name\', () =&gt; {\n      return this.model(\'user\').select();\n    });\n  }\n}\n</code></pre>\n<p>设置缓存并修改缓存类型：</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    //设置缓存，缓存类型使用redis\n    yield this.cache(\'name\', \'value\', {\n      type: \'redis\'\n    });\n  }\n}\n</code></pre>\n<h4 id=\"hook-event-data-\">hook(event, data)</h4>\n<ul>\n<li><code>event</code> {String} 事件名称</li>\n<li><code>data</code> {Mixed} 参数</li>\n<li><code>return</code> {Promise}</li>\n</ul>\n<p>执行对应的事件，一个事件包含若干个 middleware，会按顺序执行这些 middleware。</p>\n<p>事件可以在配置 <code>src/common/config/hook.js</code> 里定义，也可以通过 think.hook 来注册。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    let result = yield this.hook(\'parse_data\');\n  }\n}\n</code></pre>\n<h4 id=\"model-name-options-\">model(name, options)</h4>\n<ul>\n<li><code>name</code> {String} 模型名称</li>\n<li><code>options</code> {Object} 配置，具体见数据库配置</li>\n<li><code>return</code> {Object} model实例</li>\n</ul>\n<p>获取模型实例，默认获取当前模块下对应模型的实例，也可以跨模块获取模型的实例。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //获取当前模块下的 user model 的实例\n    let model = this.model(\'user\');\n    //获取admin模块下 article model 的实例\n    let model1 = this.model(\'admin/article\');\n    //获取当前模块下的 test model 的实例，并且是 sqlite 的数据库\n    let model2 = this.model(\'test\', {\n      type: \'sqlite\' //设置数据库类型为sqlite，更多参数见数据库配置\n    })\n  }\n}\n</code></pre>\n<h4 id=\"controller-name-\">controller(name)</h4>\n<ul>\n<li><code>name</code> {String} controller名称</li>\n<li><code>return</code> {Object} controller实例</li>\n</ul>\n<p>获取 Controller 的实例，如果 Controller 找不到，则报错。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //获取当前模块下 user controller 的实例\n    let controller = this.controller(\'user\');\n    //获取admin模块下 user controller 的实例\n    let controller1 = this.controller(\'admin/user\');\n  }\n}\n</code></pre>\n<h4 id=\"service-name-\">service(name)</h4>\n<ul>\n<li><code>name</code> {String} service 名称</li>\n<li><code>return</code> {Class} </li>\n</ul>\n<p>获取对应的 service。service 返回的可能是 class ，也可能直接是个对象，所以不会直接实例化。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //获取对应的service\n    let service = this.service(\'user\');\n    //获取service的实例\n    let instance = new service(...args);\n    //获取admin模块下的user service\n    let service1 = this.service(\'admin/user\');\n  }\n}\n</code></pre><p>\n文章来源：<a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:33:15', '46', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('66', 'http', '', '<p>这里的 http 对象并不是 Node.js 里的 http 模块，而是对 request 和 response 对象包装后一个新的对象。</p>\n<pre><code class=\"lang-js\">var http = require(\'http\');\n\nhttp.createServer(function (request, response) {\n  response.writeHead(200, {\'Content-Type\': \'text/plain\'});\n  response.end(\'Hello World\\n\');\n}).listen(8124);\n</code></pre>\n<p>如上面的代码所示，Node.js 创建服务时，会传递 request 和 response 2个对象给回调函数。为了后续调用方便， ThinkJS 对这2个对象进行了包装，包装成了 http 对象，并且提供很多有用的方法。</p>\n<p>http 对象会在 middleware, logic, controller, view 中传递。</p>\n<p><code>注</code>：http 对象是 EventEmitter 的一个实例，所以可以对其进行事件监听和执行。</p>\n<h3 id=\"-\">属性</h3>\n<h4 id=\"http-req\">http.req</h4>\n<p>系统原生的 request 对象</p>\n<h4 id=\"http-res\">http.res</h4>\n<p>系统原生的 response 对象</p>\n<h4 id=\"http-starttime\">http.startTime</h4>\n<p>请求的开始时间，是个<code>unix</code>时间戳。</p>\n<h4 id=\"http-url\">http.url</h4>\n<p>当前请求的 url 。</p>\n<h4 id=\"http-version\">http.version</h4>\n<p>当前请求的 http 版本。</p>\n<h4 id=\"http-method\">http.method</h4>\n<p>当前请求的类型。</p>\n<h4 id=\"http-headers\">http.headers</h4>\n<p>当前请求的所有头信息。</p>\n<h4 id=\"http-pathname\">http.pathname</h4>\n<p>当前请求的 pathname，路由识别会依赖该值，会在后续的处理中对其进行改变。所以在 action 拿到值可能跟初始解析出来的值不一致。</p>\n<h4 id=\"http-query\">http.query</h4>\n<p>当前请求的所有 query 数据。</p>\n<h4 id=\"http-host\">http.host</h4>\n<p>当前请求的 host， 包含端口。</p>\n<h4 id=\"http-hostname\">http.hostname</h4>\n<p>当前请求的 hostname，不包含端口。</p>\n<h4 id=\"http-payload\">http.payload</h4>\n<p>当前请求的 payload 数据，提交型的请求才含有该值。</p>\n<p><code>注</code>：该属性后续会废弃，建议使用 <code>http.getPayload</code> 方法。</p>\n<h4 id=\"http-_get\">http._get</h4>\n<p>存放 GET 参数值。</p>\n<h4 id=\"http-_post\">http._post</h4>\n<p>存放 POST 参数值</p>\n<h4 id=\"http-_file\">http._file</h4>\n<p>存放上传的文件数据</p>\n<h4 id=\"http-_cookie\">http._cookie</h4>\n<p>存放 cookie 数据。</p>\n<h4 id=\"http-module\">http.module</h4>\n<p>当前请求解析后对应的模块名。</p>\n<h4 id=\"http-controller\">http.controller</h4>\n<p>当前请求解析后对应的控制器名。</p>\n<h4 id=\"http-action\">http.action</h4>\n<p>当前请求解析后对应的操作名。</p>\n<h3 id=\"-\">方法</h3>\n<h4 id=\"http-getpayload-\">http.getPayload()</h4>\n<ul>\n<li><code>return</code> {Promise} payload 内容</li>\n</ul>\n<p>获取 payload。</p>\n<h4 id=\"http-config-name-\">http.config(name)</h4>\n<ul>\n<li><code>name</code> {String} 参数名</li>\n<li><code>return</code> {Mixed} 返回对应的参数值</li>\n</ul>\n<p>获取当前请求下对应的参数值。</p>\n<h4 id=\"http-referrer-\">http.referrer()</h4>\n<ul>\n<li><code>return</code> {String} 请求的 referrer</li>\n</ul>\n<p>返回当前请求的 referrer。</p>\n<h4 id=\"http-useragent-\">http.userAgent()</h4>\n<ul>\n<li><code>return</code> {String} 请求的 userAgent</li>\n</ul>\n<p>返回当前请求的 userAgent。</p>\n<h4 id=\"http-isget-\">http.isGet()</h4>\n<ul>\n<li><code>return</code> {Boolean}</li>\n</ul>\n<p>返回当前请求是否是 GET 请求。</p>\n<h4 id=\"http-ispost-\">http.isPost()</h4>\n<ul>\n<li><code>return</code> {Boolean}</li>\n</ul>\n<p>返回当前请求是否是 POST 请求。</p>\n<h4 id=\"http-isajax-method-\">http.isAjax(method)</h4>\n<ul>\n<li><code>method</code> {String} 请求类型</li>\n<li><code>return</code> {Boolean}</li>\n</ul>\n<p>返回当前请求是否是 Ajax 请求。</p>\n<pre><code class=\"lang-js\">http.isAjax(); //判断是否是Ajax请求\nhttp.isAjax(\'GET\'); //判断是否是Ajax请求，且请求类型是GET\n</code></pre>\n<h4 id=\"http-isjsonp-name-\">http.isJsonp(name)</h4>\n<ul>\n<li><code>name</code> {String} callback 参数名称，默认为 callback</li>\n<li><code>return</code> {Boolean}</li>\n</ul>\n<p>返回当前请求是否是 jsonp 请求。</p>\n<pre><code class=\"lang-js\">//url is  /index/test?callback=testxxx\nhttp.isJsonp(); //true\nhttp.isJsonp(\'cb\'); //false\n</code></pre>\n<h4 id=\"http-get-name-value-\">http.get(name, value)</h4>\n<ul>\n<li><code>name</code> {String} 参数名称</li>\n<li><code>value</code> {Mixed} 参数值</li>\n</ul>\n<p>获取或者设置 GET 参数值。可以通过该方法设置 GET 参数值，方便后续的逻辑里获取。</p>\n<pre><code class=\"lang-js\">// url is /index/test?name=thinkjs\nhttp.get(\'name\'); // returns \'thinkjs\'\nhttp.get(\'name\', \'other value\');\nhttp.get(\'name\'); // returns \'other value\'\n</code></pre>\n<h4 id=\"http-post-name-value-\">http.post(name, value)</h4>\n<ul>\n<li><code>name</code> {String} 参数名称</li>\n<li><code>value</code> {Mixed} 参数值</li>\n</ul>\n<p>获取或者设置 POST 值。可以通过该方法设置 POST 值，方便后续的逻辑里获取。</p>\n<pre><code class=\"lang-js\">http.post(\'email\'); //获取提交的email\n</code></pre>\n<h4 id=\"http-param-name-\">http.param(name)</h4>\n<ul>\n<li><code>name</code> {String} 参数名称</li>\n<li><code>return</code> {Mixed}</li>\n</ul>\n<p>获取参数值，优先从 POST 里获取，如果值为空，则从 URL 参数里获取。</p>\n<h4 id=\"http-file-name-\">http.file(name)</h4>\n<ul>\n<li><code>name</code> {String} 文件对应的字段名称</li>\n<li><code>return</code> {Object} </li>\n</ul>\n<p>获取上传的文件。</p>\n<pre><code class=\"lang-js\">http.file(\'image\');\n//returns \n{\n  fieldName: \'image\', //表单里的字段名\n  originalFilename: filename, //原始文件名\n  path: filepath, //文件临时存放的路径\n  size: size //文件大小\n}\n</code></pre>\n<h4 id=\"http-header-name-value-\">http.header(name, value)</h4>\n<ul>\n<li><code>name</code> {String} header 名称</li>\n<li><code>value</code> {String} header 值</li>\n</ul>\n<p>获取或者设置 header 信息。</p>\n<pre><code class=\"lang-js\">http.header(\'accept\'); //获取accept\nhttp.header(\'X-NAME\', \'thinkjs\'); //设置header\n</code></pre>\n<h4 id=\"http-expires-time-\">http.expires(time)</h4>\n<ul>\n<li><code>time</code> {Number} 过期时间，单位为秒</li>\n</ul>\n<p>强缓存，设置 <code>Cache-Control</code> 和 <code>Expires</code> 头信息。</p>\n<pre><code class=\"lang-js\">http.header(86400); //设置过期时间为 1 天。\n</code></pre>\n<h4 id=\"http-status-status-\">http.status(status)</h4>\n<p>设置状态码。如果头信息已经发送，则无法设置状态码。</p>\n<pre><code class=\"lang-js\">http.status(400); //设置状态码为400\n</code></pre>\n<h4 id=\"http-ip-\">http.ip()</h4>\n<p>获取用户的 ip 。如果使用了代理，获取的值可能不准。</p>\n<h4 id=\"http-lang-lang-asviewpath-\">http.lang(lang, asViewPath)</h4>\n<ul>\n<li><code>lang</code> {String} 要设置的语言</li>\n<li><code>asViewPath</code> {Boolean} 是否添加一层模版语言目录</li>\n</ul>\n<p>获取或者设置国际化的语言，可以支持模版路径要多一层语言的目录。</p>\n<h5 id=\"-\">获取语言</h5>\n<pre><code class=\"lang-js\">let lang = http.lang();\n</code></pre>\n<p>获取语言的循序为 <code>http._lang</code> -&gt; <code>从 cookie 中获取</code> -&gt; <code>从 header 中获取</code>，如果需要从 url 中解析语言，可以获取后通过 <code>http.lang(lang)</code> 方法设置到属性 <code>http._lang</code> 中。</p>\n<h5 id=\"-\">设置语言</h5>\n<pre><code class=\"lang-js\">let lang = getFromUrl();\nhttp.lang(lang, true); //设置语言，并指定模版路径中添加一层语言目录\n</code></pre>\n<h4 id=\"http-theme-theme-\">http.theme(theme)</h4>\n<p>获取或者设置主题，设置后模版路径要多一层主题的目录。</p>\n<h4 id=\"http-cookie-name-value-\">http.cookie(name, value)</h4>\n<ul>\n<li><code>name</code> {String} cookie 名称</li>\n<li><code>value</code> {String} cookie 值</li>\n</ul>\n<p>读取或者设置 cookie 值。</p>\n<pre><code class=\"lang-js\">http.cookie(\'think_test\'); //获取名为 think_test 的 cookie\nhttp.cookie(\'name\', \'value\'); //设置 cookie，如果头信息已经发送则设置无效\nhttp.cookie(\'name\', null); //删除 cookie\n</code></pre>\n<h4 id=\"http-session-name-value-\">http.session(name, value)</h4>\n<ul>\n<li><code>name</code> {String} session 名</li>\n<li><code>value</code> {Mixed} session 值</li>\n<li><code>return</code> {Promise}</li>\n</ul>\n<p>读取、设置和清除 session。</p>\n<h5 id=\"-session\">读取 Session</h5>\n<pre><code class=\"lang-js\">let value = yield http.session(\'userInfo\');\n</code></pre>\n<h5 id=\"-session\">设置 Session</h5>\n<pre><code class=\"lang-js\">yield http.session(\'userInfo\', data);\n</code></pre>\n<h5 id=\"-session\">清除 Session</h5>\n<pre><code class=\"lang-js\">yield http.session();\n</code></pre>\n<h4 id=\"http-redirect-url-status-\">http.redirect(url, status)</h4>\n<ul>\n<li><code>url</code> {String} 要跳转的 url</li>\n<li><code>status</code> {Number} 状态码， 301 或者 302，默认为302</li>\n</ul>\n<p>页面跳转。</p>\n<pre><code class=\"lang-js\">http.redirect(\'/login\'); //跳转到登录页面\n</code></pre>\n<h4 id=\"http-type-contenttype-encoding-\">http.type(contentType, encoding)</h4>\n<ul>\n<li><code>contentType</code> {String} 要设置的 contentType</li>\n<li><code>encoding</code> {String} 要设置的编码</li>\n</ul>\n<p>获取或者设置 Content-Type。</p>\n<pre><code class=\"lang-js\">http.type(); //获取Content-Type\nhttp.type(\'text/html\'); //设置Content-Type，会自动加上charset\nhttp.type(\'audio/mpeg\', false); //设置Content-Type，不追加charset\n</code></pre>\n<h4 id=\"http-write-content-encoding-\">http.write(content, encoding)</h4>\n<ul>\n<li><code>content</code> {Mixed} 要输出的内容</li>\n<li><code>encoding</code> {String} 编码</li>\n</ul>\n<p>输出内容，要调用 http.end 才能结束当前请求。</p>\n<h4 id=\"http-end-content-encoding-\">http.end(content, encoding)</h4>\n<ul>\n<li><code>content</code> {Mixed} 要输出的内容</li>\n<li><code>encoding</code> {String} 编码</li>\n</ul>\n<p>输出内容并结束当前请求。</p>\n<h4 id=\"http-success-data-message-\">http.success(data, message)</h4>\n<ul>\n<li><code>data</code> {Mixed} 要输出的数据</li>\n<li><code>message</code> {String} 追加的message</li>\n</ul>\n<p>格式化输出一个正常的数据，一般是操作成功后输出。</p>\n<pre><code class=\"lang-js\">http.success({name: \'thinkjs\'});\n//writes\n{\n  errno: 0,\n  errmsg: \'\',\n  data: {\n    name: \'thinkjs\'\n  }\n}\n</code></pre>\n<p>这样客户端就可以根据 <code>errno</code> 是否为 <code>0</code> 为判断当前请求是否正常。</p>\n<h4 id=\"http-fail-errno-errmsg-data-\">http.fail(errno, errmsg, data)</h4>\n<ul>\n<li><code>errno</code> {Number} 错误号</li>\n<li><code>errmsg</code> {String} 错误信息</li>\n<li><code>data</code> {Mixed} 额外的数据</li>\n</ul>\n<p>格式化输出一个异常的数据，一般是操作失败后输出。</p>\n<p><code>注</code>：字段名 <code>errno</code> 和 <code>errmsg</code> 可以在配置里进行修改。</p>\n<pre><code class=\"lang-js\">http.fail(100, \'fail\')\n//writes\n{\n  errno: 100,\n  errmsg: \'fail\',\n  data: \'\'\n}\n</code></pre>\n<p>这样客户端就可以拿到具体的错误号和错误信息，然后根据需要显示了。</p>\n<p><code>注</code>：字段名 <code>errno</code> 和 <code>errmsg</code> 可以在配置里进行修改。</p>\n<h4 id=\"http-json-data-\">http.json(data)</h4>\n<ul>\n<li><code>data</code> {Object}</li>\n</ul>\n<p>json 方式输出数据，会设置 Content-Type 为 <code>application/json</code>，该值对应的配置为<code>json_content_type</code>。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:34:12', '50', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('67', 'controller', '', '<p><code>think.controller.base</code> 继承自 <a href=\"./api_think_http_base.html\">think.http.base</a> 类。项目里的控制器需要继承该类。</p>\n<h5 id=\"-es6-\">使用 ES6 的语法继承该类</h5>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n\n  }\n}\n</code></pre>\n<h5 id=\"-\">使用普通方式继承该类</h5>\n<pre><code class=\"lang-js\">module.exports = think.controller({\n  indexAction(){\n\n  }\n})\n</code></pre>\n<h3 id=\"-\">属性</h3>\n<h4 id=\"controller-http\">controller.http</h4>\n<p>传递进来的 <a href=\"./api_http.html\">http</a> 对象。</p>\n<h3 id=\"-\">方法</h3>\n<h4 id=\"controller-ip-\">controller.ip()</h4>\n<ul>\n<li><code>return</code> {String}</li>\n</ul>\n<p>获取当前请求用户的 ip，等同与 http.ip 方法。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let ip = this.ip();\n  }\n}\n</code></pre>\n<h4 id=\"controller-method-\">controller.method()</h4>\n<ul>\n<li><code>return</code> {String}</li>\n</ul>\n<p>获取当前请求的类型，转化为小写。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let method = this.method(); //get or post ...\n  }\n}\n</code></pre>\n<h4 id=\"controller-ismethod-method-\">controller.isMethod(method)</h4>\n<ul>\n<li><code>method</code> {String} 类型</li>\n<li><code>return</code> {Boolean}</li>\n</ul>\n<p>判断当前的请求类型是否是指定的类型。</p>\n<h4 id=\"controller-isget-\">controller.isGet()</h4>\n<ul>\n<li><code>return</code> {Boolean}</li>\n</ul>\n<p>判断是否是 GET 请求。</p>\n<h4 id=\"controller-ispost-\">controller.isPost()</h4>\n<ul>\n<li><code>return</code> {Boolean}</li>\n</ul>\n<p>判断是否是 POST 请求。</p>\n<h4 id=\"controller-isajax-method-\">controller.isAjax(method)</h4>\n<ul>\n<li><code>method</code> {String}</li>\n<li><code>return</code> {Boolean}</li>\n</ul>\n<p>判断是否是 Ajax 请求。如果指定了 method，那么请求类型也要相同。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //是ajax 且请求类型是 POST\n    let isAjax = this.isAjax(\'post\');\n  }\n}\n</code></pre>\n<h4 id=\"controller-iswebsocket-\">controller.isWebSocket()</h4>\n<ul>\n<li><code>return</code> {Boolean}</li>\n</ul>\n<p>是否是 websocket 请求。</p>\n<h4 id=\"controller-iscli-\">controller.isCli()</h4>\n<ul>\n<li><code>return</code> {Boolean}</li>\n</ul>\n<p>是否是命令行下调用。</p>\n<h4 id=\"controller-isjsonp-callback-\">controller.isJsonp(callback)</h4>\n<ul>\n<li><code>callback</code> {String} callback 名称</li>\n<li><code>return</code> {Boolean}</li>\n</ul>\n<p>是否是 jsonp 请求。</p>\n<h4 id=\"controller-get-name-\">controller.get(name)</h4>\n<ul>\n<li><code>name</code> {String} 参数名</li>\n</ul>\n<p>获取 GET 参数值。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //获取一个参数值\n    let value = this.get(\'xxx\');\n    //获取所有的参数值\n    let values = this.get();\n  }\n}\n</code></pre>\n<h4 id=\"controller-post-name-\">controller.post(name)</h4>\n<ul>\n<li><code>name</code> {String} 参数名</li>\n</ul>\n<p>获取 POST 提交的参数。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //获取一个参数值\n    let value = this.post(\'xxx\');\n    //获取所有的 POST 参数值\n    let values = this.post();\n  }\n}\n</code></pre>\n<h4 id=\"controller-param-name-\">controller.param(name)</h4>\n<ul>\n<li><code>name</code> {String} 参数名</li>\n</ul>\n<p>获取参数值，优先从 POST 里获取，如果取不到再从 GET 里获取。</p>\n<h4 id=\"controller-file-name-\">controller.file(name)</h4>\n<ul>\n<li><code>name</code> {String} 上传文件对应的字段名</li>\n</ul>\n<p>获取上传的文件，返回值是个对象，包含下面的属性：</p>\n<pre><code class=\"lang-js\">{\n  fieldName: \'file\', //表单字段名称\n  originalFilename: filename, //原始的文件名\n  path: filepath, //文件保存的临时路径，使用时需要将其移动到项目里的目录，否则请求结束时会被删除\n  size: 1000 //文件大小\n}\n</code></pre>\n<p>如果文件不存在，那么值为一个空对象 <code>{}</code>。</p>\n<h4 id=\"controller-header-name-value-\">controller.header(name, value)</h4>\n<ul>\n<li><code>name</code> {String} header 名</li>\n<li><code>value</code> {String} header 值</li>\n</ul>\n<p>获取或者设置 header。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let accept = this.header(\'accept\'); //获取 header\n    this.header(\'X-NAME\', \'thinks\'); //设置 header\n  }\n}\n</code></pre>\n<h4 id=\"controller-expires-time-\">controller.expires(time)</h4>\n<ul>\n<li><code>time</code> {Number} 过期时间，单位为秒</li>\n</ul>\n<p>强缓存，设置 <code>Cache-Control</code> 和 <code>Expires</code> 头信息。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    this.expires(86400); //设置过期时间为 1 天。\n  }\n}\n</code></pre>\n<h4 id=\"controller-useragent-\">controller.userAgent()</h4>\n<p>获取 userAgent。</p>\n<h4 id=\"controller-referrer-onlyhost-\">controller.referrer(onlyHost)</h4>\n<ul>\n<li><code>referrer</code> {Boolean} 是否只需要 host</li>\n</ul>\n<p>获取 referrer。</p>\n<h4 id=\"controller-cookie-name-value-options-\">controller.cookie(name, value, options)</h4>\n<ul>\n<li><code>name</code> {String} cookie 名</li>\n<li><code>value</code> {String} cookie 值</li>\n<li><code>options</code> {Object}</li>\n</ul>\n<p>获取、设置或者删除 cookie。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //获取 cookie 值\n    let value = this.cookie(\'think_name\');\n  }\n}\n</code></pre>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //设置 cookie 值\n    this.cookie(\'think_name\', value, {\n      timeout: 3600 * 24 * 7 //有效期为一周\n    });\n  }\n}\n</code></pre>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //删除 cookie\n    this.cookie(\'think_name\', null); \n  }\n}\n</code></pre>\n<h4 id=\"controller-session-name-value-\">controller.session(name, value)</h4>\n<ul>\n<li><code>name</code> {String} session 名</li>\n<li><code>value</code> {Mixed} session 值</li>\n<li><code>return</code> {Promise}</li>\n</ul>\n<p>读取、设置和清除 session。</p>\n<h5 id=\"-session\">读取 Session</h5>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    //获取session\n    let value = yield this.session(\'userInfo\');\n  }\n}\n</code></pre>\n<h5 id=\"-session\">设置 Session</h5>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    //设置 session\n    yield this.session(\'userInfo\', data);\n  }\n}\n</code></pre>\n<h5 id=\"-session\">清除 Session</h5>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  * indexAction(){\n    //清除当前用户的 session\n    yield this.session();\n  }\n}\n</code></pre>\n<h4 id=\"controller-lang-lang-asviewpath-\">controller.lang(lang, asViewPath)</h4>\n<ul>\n<li><code>lang</code> {String} 要设置的语言</li>\n<li><code>asViewPath</code> {Boolean} 是否在模版目录添加一层语言目录</li>\n</ul>\n<p>读取或者设置语言。</p>\n<h4 id=\"controller-locale-key-\">controller.locale(key)</h4>\n<ul>\n<li><code>key</code> {String} </li>\n</ul>\n<p>根据 language 获取对应的语言文本。</p>\n<h4 id=\"controller-redirect-url-statuscode-\">controller.redirect(url, statusCode)</h4>\n<ul>\n<li><code>url</code> {String} 要跳转的 url</li>\n<li><code>statusCode</code> {Number} 状态码，默认为 302</li>\n</ul>\n<p>页面跳转。</p>\n<h4 id=\"controller-assign-name-value-\">controller.assign(name, value)</h4>\n<ul>\n<li><code>name</code> {String | Object} 变量名</li>\n<li><code>value</code> {Mixed} 变量值</li>\n</ul>\n<p>将变量赋值到模版中。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    //单个赋值\n    this.assign(\'title\', \'thinkjs\');\n    //批量赋值\n    this.assign({\n      name: \'xxx\',\n      desc: \'yyy\'\n    })\n  }\n}\n</code></pre>\n<h4 id=\"controller-fetch-templatefile-\">controller.fetch(templateFile)</h4>\n<ul>\n<li><code>templateFile</code> {String} 模版文件地址</li>\n<li><code>return</code> {Promise}</li>\n</ul>\n<p>获取解析后的模版内容。</p>\n<h5 id=\"-\">直接获取</h5>\n<pre><code class=\"lang-js\">// 假设文件路径为 /foo/bar/app/home/controller/index.js\nexport default class extends think.controller.base {\n  * indexAction(){\n    // home/index_index.html\n    let content = yield this.fetch();\n  }\n}\n</code></pre>\n<h5 id=\"-action\">改变 action</h5>\n<pre><code class=\"lang-js\">// 假设文件路径为 /foo/bar/app/home/controller/index.js\nexport default class extends think.controller.base {\n  * indexAction(){\n    // home/index_detail.html\n    let content = yield this.fetch(\'detail\');\n  }\n}\n</code></pre>\n<h5 id=\"-controller-action\">改变 controller 和 action</h5>\n<pre><code class=\"lang-js\">// 假设文件路径为 /foo/bar/app/home/controller/index.js\nexport default class extends think.controller.base {\n  * indexAction(){\n    // home/user_detail.html\n    let content = yield this.fetch(\'user/detail\');\n  }\n}\n</code></pre>\n<h5 id=\"-module-controller-action\">改变 module, controller 和 action</h5>\n<pre><code class=\"lang-js\">// 假设文件路径为 /foo/bar/app/home/controller/index.js\nexport default class extends think.controller.base {\n  * indexAction(){\n    // admin/user_detail.html\n    let content = yield this.fetch(\'admin/user/detail\');\n  }\n}\n</code></pre>\n<h5 id=\"-\">改变文件后缀名</h5>\n<pre><code class=\"lang-js\">// 假设文件路径为 /foo/bar/app/home/controller/index.js\nexport default class extends think.controller.base {\n  * indexAction(){\n    // home/index_detail.xml\n    let content = yield this.fetch(\'detail.xml\');\n  }\n}\n</code></pre>\n<h5 id=\"-\">获取绝对路径文件</h5>\n<pre><code class=\"lang-js\">// 假设文件路径为 /foo/bar/app/home/controller/index.js\nexport default class extends think.controller.base {\n  * indexAction(){\n    // /home/xxx/aaa/bbb/c.html\n    let content = yield this.fetch(\'/home/xxx/aaa/bbb/c.html\');\n  }\n}\n</code></pre>\n<h4 id=\"controller-display-templatefile-\">controller.display(templateFile)</h4>\n<ul>\n<li><code>templateFile</code> {String} 模版文件路径</li>\n</ul>\n<p>输出模版内容到浏览器端。查找模版文件策略和 <code>controller.fetch</code> 相同。</p>\n<h4 id=\"controller-jsonp-data-\">controller.jsonp(data)</h4>\n<ul>\n<li><code>data</code> {Mixed} 要输出的内容</li>\n</ul>\n<p>jsonp 的方法输出内容，获取 callback 名称安全过滤后输出。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    this.jsonp({name: \'thinkjs\'});\n    //writes\n    \'callback_fn_name({name: \"thinkjs\"})\'\n  }\n}\n</code></pre>\n<h4 id=\"controller-json-data-\">controller.json(data)</h4>\n<ul>\n<li><code>data</code> {Mixed} 要输出的内容</li>\n</ul>\n<p>json 的方式输出内容。</p>\n<h4 id=\"controller-status-status-\">controller.status(status)</h4>\n<ul>\n<li><code>status</code> {Number} 状态码，默认为 404</li>\n</ul>\n<p>设置状态码。</p>\n<h4 id=\"controller-deny-status-\">controller.deny(status)</h4>\n<ul>\n<li><code>status</code> {String} 状态码，默认为 403</li>\n</ul>\n<p>拒绝当前请求。</p>\n<h4 id=\"controller-write-data-encoding-\">controller.write(data, encoding)</h4>\n<ul>\n<li><code>data</code> {mixed} 要输出的内容</li>\n<li><code>encoding</code> {String} 编码</li>\n</ul>\n<p>输出内容</p>\n<h4 id=\"controller-end-data-encoding-\">controller.end(data, encoding)</h4>\n<ul>\n<li><code>data</code> {mixed} 要输出的内容</li>\n<li><code>encoding</code> {String} 编码</li>\n</ul>\n<p>输出内容后结束当前请求。</p>\n<h4 id=\"controller-type-type-charset-\">controller.type(type, charset)</h4>\n<ul>\n<li><code>type</code> {String} Content-Type</li>\n<li><code>charset</code> {Boolean} 是否自动追加 charset</li>\n</ul>\n<p>设置 Content-Type。</p>\n<h4 id=\"controller-download-filepath-contenttype-filename-\">controller.download(filePath, contentType, fileName)</h4>\n<ul>\n<li><code>filePath</code> {String} 下载文件的具体路径</li>\n<li><code>content-Type</code> {String} Content-Type</li>\n<li><code>fileName</code> {String} 保存的文件名</li>\n</ul>\n<p>下载文件。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let filePath = think.RESOUCE_PATH + \'/a.txt\';\n    //自动识别 Content-Type，保存的文件名为 a.txt\n    this.download(filePath);\n  }\n}\n</code></pre>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let filePath = think.RESOUCE_PATH + \'/a.log\';\n    //自动识别 Content-Type，保存的文件名为 b.txt\n    this.download(filePath, \'b.txt\');\n  }\n}\n</code></pre>\n<pre><code class=\"lang-js\">export default class extends think.controller.base {\n  indexAction(){\n    let filePath = think.RESOUCE_PATH + \'/a.log\';\n    //指定 Content-Type 为 text/html，保存的文件名为 b.txt\n    this.download(filePath, \'text/html\', \'b.txt\');\n  }\n}\n</code></pre>\n<h4 id=\"controller-success-data-message-\">controller.success(data, message)</h4>\n<ul>\n<li><code>data</code> {Mixed} 要输出的数据</li>\n<li><code>message</code> {String} 追加的message</li>\n</ul>\n<p>格式化输出一个正常的数据，一般是操作成功后输出。</p>\n<pre><code class=\"lang-js\">http.success({name: \'thinkjs\'});\n//writes\n{\n  errno: 0,\n  errmsg: \'\',\n  data: {\n    name: \'thinkjs\'\n  }\n}\n</code></pre>\n<p>这样客户端就可以根据 <code>errno</code> 是否为 <code>0</code> 为判断当前请求是否正常。</p>\n<h4 id=\"controller-fail-errno-errmsg-data-\">controller.fail(errno, errmsg, data)</h4>\n<ul>\n<li><code>errno</code> {Number} 错误号</li>\n<li><code>errmsg</code> {String} 错误信息</li>\n<li><code>data</code> {Mixed} 额外的数据</li>\n</ul>\n<p>格式化输出一个异常的数据，一般是操作失败后输出。</p>\n<p><code>注</code>：字段名 <code>errno</code> 和 <code>errmsg</code> 可以在配置里进行修改。</p>\n<pre><code class=\"lang-js\">http.fail(100, \'fail\')\n//writes\n{\n  errno: 100,\n  errmsg: \'fail\',\n  data: \'\'\n}\n</code></pre>\n<p>这样客户端就可以拿到具体的错误号和错误信息，然后根据需要显示了。</p>\n<p><code>注</code>：字段名 <code>errno</code> 和 <code>errmsg</code> 可以在配置里进行修改。</p>\n<h4 id=\"controller-sendtime-name-\">controller.sendTime(name)</h4>\n<ul>\n<li><code>name</code> {String} header key</li>\n</ul>\n<p>发送请求的执行时间，使用 header 的方式发出。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p>\n<p><br></p>', '', '', '2017-07-17 14:35:13', '51', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('68', 'rest controller', '', '<p><code>think.controller.rest</code> 继承自 <a href=\"./api_controller.html\">think.controller.base</a>，用来处理 Rest 接口。</p>\n<h5 id=\"-es6-\">使用 ES6 的语法继承该类</h5>\n<pre><code class=\"lang-js\">export default class extends think.controller.rest {\n\n}\n</code></pre>\n<h5 id=\"-\">使用普通方式继承该类</h5>\n<pre><code class=\"lang-js\">module.exports = think.controller(\'rest\', {\n\n})\n</code></pre>\n<h3 id=\"-\">属性</h3>\n<h4 id=\"controller-_isrest\">controller._isRest</h4>\n<p>标识此 controller 对应的是 Rest 接口。如果在 <code>init</code> 方法里将该属性设置为 <code>false</code>，那么该 controller 不再是一个 Rest 接口。</p>\n<h4 id=\"controller-_method\">controller._method</h4>\n<p>获取 method 方式。默认从 http method 中获取，但有些客户端不支持发送 DELETE, PUT 类型的请求，所以可以设置为从 GET 参数里获取。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.rest {\n  init(http){\n    super.init(http);\n    //设置 _method，表示从 GET 参数获取 _method 字段的值\n    //如果没有取到，则从 http method 中获取\n    this._method = \'_method\';\n  }\n}\n</code></pre>\n<h4 id=\"controller-resource\">controller.resource</h4>\n<p>当前 Rest 对应的 Resource 名称。</p>\n<h4 id=\"controller-id\">controller.id</h4>\n<p>资源 ID</p>\n<h4 id=\"controller-modelinstance\">controller.modelInstance</h4>\n<p>资源对应 model 的实例。</p>\n<h3 id=\"-\">方法</h3>\n<h4 id=\"controller-__before-\">controller.__before()</h4>\n<p>可以在魔术方法 <code>__before</code> 中进行字段过滤、分页、权限校验等功能。</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.rest{\n  __before(){\n    //过滤 password 字段\n    this.modelInstance.field(\'password\', true);\n  }\n}\n</code></pre>\n<h4 id=\"controller-getaction-\">controller.getAction()</h4>\n<p>获取资源数据，如果有 id，拉取一条，否则拉取列表。</p>\n<pre><code class=\"lang-js\">//方法实现，可以根据需要修改\nexport default class extends think.controller.rest {\n  * getAction(){\n    let data;\n    if (this.id) {\n      let pk = yield this.modelInstance.getPk();\n      data = yield this.modelInstance.where({[pk]: this.id}).find();\n      return this.success(data);\n    }\n    data = yield this.modelInstance.select();\n    return this.success(data);\n  }\n}\n</code></pre>\n<h4 id=\"controller-postaction-\">controller.postAction()</h4>\n<p>添加数据</p>\n<pre><code class=\"lang-js\">//方法实现，可以根据需要修改\nexport default class extends think.controller.rest {\n  * postAction(){\n    let pk = yield this.modelInstance.getPk();\n    let data = this.post();\n    delete data[pk];\n    if(think.isEmpty(data)){\n      return this.fail(\'data is empty\');\n    }\n    let insertId = yield this.modelInstance.add(data);\n    return this.success({id: insertId});\n  }\n}\n</code></pre>\n<h4 id=\"controller-deleteaction-\">controller.deleteAction()</h4>\n<p>删除数据</p>\n<pre><code class=\"lang-js\">//方法实现，可以根据需要修改\nexport default class extends think.controller.rest {\n  * deleteAction(){\n    if (!this.id) {\n      return this.fail(\'params error\');\n    }\n    let pk = yield this.modelInstance.getPk();\n    let rows = yield this.modelInstance.where({[pk]: this.id}).delete();\n    return this.success({affectedRows: rows});\n  }\n}\n</code></pre>\n<h4 id=\"controller-putaction-\">controller.putAction()</h4>\n<p>更新数据</p>\n<pre><code class=\"lang-js\">//方法实现，可以根据需要修改\nexport default class extends think.controller.rest {\n  * putAction(){\n    if (!this.id) {\n      return this.fail(\'params error\');\n    }\n    let pk = yield this.modelInstance.getPk();\n    let data = this.post();\n    delete data[pk];\n    if (think.isEmpty(data)) {\n      return this.fail(\'data is empty\');\n    }\n    let rows = yield this.modelInstance.where({[pk]: this.id}).update(data);\n    return this.success({affectedRows: rows});\n  }\n}\n</code></pre>\n<h4 id=\"controller-__call-\">controller.__call()</h4>\n<p>找不到方法时调用</p>\n<pre><code class=\"lang-js\">export default class extends think.controller.rest {\n  __call(){\n    return this.fail(think.locale(\'ACTION_INVALID\', this.http.action, this.http.url));\n  }\n}\n</code></pre><p>\n文章来源：<a href=\"http://www.thinkjs.org\" target=\"_blank\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:36:07', '71', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);
INSERT INTO `li_article` VALUES ('69', 'MongoDB', '', '<p><code>think.model.mongo</code> 继承类 <a href=\"./api_model.html\">think.model.base</a>。</p>\n<h5 id=\"-es6-\">使用 ES6 的语法继承该类</h5>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  getList(){\n\n  }\n}\n</code></pre>\n<h5 id=\"-\">使用普通方式继承该类</h5>\n<pre><code class=\"lang-js\">module.exports = think.model(\'mongo\', {\n  getList: function(){\n\n  }\n})\n</code></pre>\n<h3 id=\"-\">属性</h3>\n<h4 id=\"model-schema\">model.schema</h4>\n<p>设置字段，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  init(...args){\n    super.init(...args);\n    //设置字段\n    this.schema = {\n      name: {\n        type: \'string\'\n      },\n      pwd: {\n        type: \'string\'\n      }\n    }\n  }\n}\n</code></pre>\n<p><code>注</code>：目前框架并不会对字段进行检查。</p>\n<h4 id=\"model-indexes\">model.indexes</h4>\n<p>设置字段索引，数据操作之前会自动创建索引。</p>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  init(...args){\n    super.init(...args);\n    //配置索引\n    this.indexes = { \n\n    }\n  }\n}\n</code></pre>\n<h5 id=\"-\">单字段索引</h5>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  init(...args){\n    super.init(...args);\n    //配置索引\n    this.indexes = { \n      name: 1\n    }\n  }\n}\n</code></pre>\n<h5 id=\"-\">唯一索引</h5>\n<p>通过 <code>$unique</code> 来指定为唯一索引，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  init(...args){\n    super.init(...args);\n    //配置索引\n    this.indexes = { \n      name: {$unique: 1}\n    }\n  }\n}\n</code></pre>\n<h5 id=\"-\">多字段索引</h5>\n<p>可以将多个字段联合索引，如：</p>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  init(...args){\n    super.init(...args);\n    //配置索引\n    this.indexes = { \n      email: 1\n      test: {\n        name: 1,\n        title: 1,\n        $unique: 1\n      }\n    }\n  }\n}\n</code></pre>\n<h4 id=\"model-pk\">model.pk</h4>\n<p>主键名，默认为 <code>_id</code>，可以通过 <code>this.getPk</code> 方法获取。</p>\n<h3 id=\"-\">方法</h3>\n<h4 id=\"model-where-where-\">model.where(where)</h4>\n<p>mongo 模型中的 where 条件设置和关系数据库中不太一样。</p>\n<h5 id=\"-\">等于判断</h5>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  where1(){\n    return this.where({ type: \"snacks\" }).select();\n  }\n}\n</code></pre>\n<h5 id=\"and-\">AND 条件</h5>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  where1(){\n    return this.where({ type: \'food\', price: { $lt: 9.95 } }).select();\n  }\n}\n</code></pre>\n<h5 id=\"or-\">OR 条件</h5>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  where1(){\n    return this.where({\n     $or: [ { qty: { $gt: 100 } }, { price: { $lt: 9.95 } } ]\n    }).select();\n  }\n  where2(){\n    return this.where({\n     type: \'food\',\n     $or: [ { qty: { $gt: 100 } }, { price: { $lt: 9.95 } } ]\n   }).select();\n  }\n}\n</code></pre>\n<h5 id=\"-\">内嵌文档</h5>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  where1(){\n    return this.where( {\n      producer:\n        {\n          company: \'ABC123\',\n          address: \'123 Street\'\n        }\n    }).select();\n  }\n  where2(){\n    return this.where({ \'producer.company\': \'ABC123\' } ).select();\n  }\n}\n</code></pre>\n<h5 id=\"in-\">IN 条件</h5>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  where1(){\n    return this.where({ type: { $in: [ \'food\', \'snacks\' ] } }).select();\n  }\n}\n</code></pre>\n<hr>\n<p>更多文档请见 <a href=\"https://docs.mongodb.org/manual/reference/operator/query/#query-selectors\">https://docs.mongodb.org/manual/reference/operator/query/#query-selectors</a>。</p>\n<h4 id=\"model-collection-\">model.collection()</h4>\n<ul>\n<li><code>return</code> {Promise}</li>\n</ul>\n<p>获取操作当前表的句柄。</p>\n<pre><code class=\"lang-js\">export default class extends think.model.mongo {\n  async getIndexes(){\n    let collection = await this.collection();\n    return collection.indexes();\n  }\n}\n</code></pre>\n<h4 id=\"model-aggregate-options-\">model.aggregate(options)</h4>\n<p>聚合查询。具体请见 <a href=\"https://docs.mongodb.org/manual/core/aggregation-introduction/\">https://docs.mongodb.org/manual/core/aggregation-introduction/</a>。</p>\n<h4 id=\"model-mapreduce-map-reduce-out-\">model.mapReduce(map, reduce, out)</h4>\n<p>mapReduce 操作，具体请见 <a href=\"https://docs.mongodb.org/manual/core/map-reduce/\">https://docs.mongodb.org/manual/core/map-reduce/</a>。</p>\n<h4 id=\"model-createindex-indexes-options-\">model.createIndex(indexes, options)</h4>\n<ul>\n<li><code>indexes</code> {Object} 索引配置</li>\n<li><code>options</code> {Object}</li>\n</ul>\n<p>创建索引。</p>\n<h4 id=\"model-getindexes-\">model.getIndexes()</h4>\n<ul>\n<li><code>return</code> {Promise}</li>\n</ul>\n<p>获取索引。</p><p>文章来源：<a href=\"http://www.thinkjs.org/\">http://www.thinkjs.org</a></p><p><br></p>', '', '', '2017-07-17 14:39:00', '76', '0', '0', '0', '18', 'thinkjs,nodejs', '1', '1', '', '8', '0', null, null, null, null);

-- ----------------------------
-- Table structure for li_comment
-- ----------------------------
DROP TABLE IF EXISTS `li_comment`;
CREATE TABLE `li_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `aid` int(11) DEFAULT NULL COMMENT '文章id',
  `author` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `qq` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `comment` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `belongid` int(11) DEFAULT '0' COMMENT '回复的评论id',
  `dig` int(11) DEFAULT '0',
  `tipoff` int(11) DEFAULT '0' COMMENT '举报',
  `createtime` datetime DEFAULT NULL,
  `pic` varchar(255) COLLATE utf8_bin DEFAULT '' COMMENT '头像',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of li_comment
-- ----------------------------

-- ----------------------------
-- Table structure for li_guest
-- ----------------------------
DROP TABLE IF EXISTS `li_guest`;
CREATE TABLE `li_guest` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `contact` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `guest` varchar(255) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of li_guest
-- ----------------------------
INSERT INTO `li_guest` VALUES ('0', 's', '是', '搜索');

-- ----------------------------
-- Table structure for li_item
-- ----------------------------
DROP TABLE IF EXISTS `li_item`;
CREATE TABLE `li_item` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `itemname` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_item
-- ----------------------------
INSERT INTO `li_item` VALUES ('1', '文章');
INSERT INTO `li_item` VALUES ('2', '前端资讯');
INSERT INTO `li_item` VALUES ('3', 'nodejs');
INSERT INTO `li_item` VALUES ('4', '资源下载');
INSERT INTO `li_item` VALUES ('5', '招聘');
INSERT INTO `li_item` VALUES ('6', '活动');
INSERT INTO `li_item` VALUES ('7', '文档');

-- ----------------------------
-- Table structure for li_links
-- ----------------------------
DROP TABLE IF EXISTS `li_links`;
CREATE TABLE `li_links` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `link` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `logo` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `qq` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `notice` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `flag` varchar(255) COLLATE utf8_bin DEFAULT '0' COMMENT '是否通过',
  `orders` int(255) DEFAULT '0' COMMENT '顺序',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of li_links
-- ----------------------------

INSERT INTO `li_links` VALUES ('0', '知识林', 'http://www.zslin.com/', '', '', null, '0', '0');

-- ----------------------------
-- Table structure for li_manage_permission
-- ----------------------------
DROP TABLE IF EXISTS `li_manage_permission`;
CREATE TABLE `li_manage_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pername` varchar(255) DEFAULT NULL,
  `permission` text,
  `tag` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=70 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_manage_permission
-- ----------------------------
INSERT INTO `li_manage_permission` VALUES ('1', '新建/编辑文章', 'admin/content/article', '1');
INSERT INTO `li_manage_permission` VALUES ('2', '添加markdown', 'admin/content/addmarkdown', '1');
INSERT INTO `li_manage_permission` VALUES ('3', '文章列表', 'admin/content/index', '1');
INSERT INTO `li_manage_permission` VALUES ('7', '后台首页', 'admin/index/index', '4');
INSERT INTO `li_manage_permission` VALUES ('8', '后台欢迎页', 'admin/index/welcome', '4');
INSERT INTO `li_manage_permission` VALUES ('9', '草稿箱文章列表', 'admin/content/draftlist', '1');
INSERT INTO `li_manage_permission` VALUES ('10', '新增/编辑文章提交接口', 'admin/content/doadd', '1');
INSERT INTO `li_manage_permission` VALUES ('11', '草稿箱发布接口', 'admin/content/updatestatus', '1');
INSERT INTO `li_manage_permission` VALUES ('12', '删除/批量删除文章接口', 'admin/content/delsome', '1');
INSERT INTO `li_manage_permission` VALUES ('13', '上传文章缩略图接口', 'admin/content/upload', '1');
INSERT INTO `li_manage_permission` VALUES ('14', '上传编辑器图片接口', 'admin/content/uploadeditor', '1');
INSERT INTO `li_manage_permission` VALUES ('15', '上传markdown文件及解析接口/内容分页', 'admin/content/uploadfile', '1');
INSERT INTO `li_manage_permission` VALUES ('16', '留言列表', 'admin/guest/index', '5');
INSERT INTO `li_manage_permission` VALUES ('17', '删除/批量留言接口', 'admin/guest/delsome', '5');
INSERT INTO `li_manage_permission` VALUES ('18', '退出后台接口', 'admin/index/logout', '4');
INSERT INTO `li_manage_permission` VALUES ('19', '栏目列表', 'admin/item/index', '6');
INSERT INTO `li_manage_permission` VALUES ('20', '新增/编辑栏目', 'admin/item/item', '6');
INSERT INTO `li_manage_permission` VALUES ('21', '新增/编辑栏目接口', 'admin/item/save', '6');
INSERT INTO `li_manage_permission` VALUES ('22', '删除/批量删除栏目接口', 'admin/item/delsome', '6');
INSERT INTO `li_manage_permission` VALUES ('23', '申请列表', 'admin/links/index', '14');
INSERT INTO `li_manage_permission` VALUES ('24', '删除/批量删除友情链接接口', 'admin/links/delsome', '14');
INSERT INTO `li_manage_permission` VALUES ('25', '导航列表', 'admin/menu/index', '2');
INSERT INTO `li_manage_permission` VALUES ('26', '新增/编辑导航', 'admin/menu/item', '2');
INSERT INTO `li_manage_permission` VALUES ('27', '编辑/新增导航接口', 'admin/menu/save', '2');
INSERT INTO `li_manage_permission` VALUES ('28', '删除/批量删除导航接口', 'admin/menu/delsome', '2');
INSERT INTO `li_manage_permission` VALUES ('29', '权限列表', 'admin/permission/index', '10');
INSERT INTO `li_manage_permission` VALUES ('30', '新增/编辑权限', 'admin/permission/item', '10');
INSERT INTO `li_manage_permission` VALUES ('31', '编辑/新增权限接口', 'admin/permission/save', '10');
INSERT INTO `li_manage_permission` VALUES ('32', '删除/批量删除权限接口', 'admin/permission/delsome', '10');
INSERT INTO `li_manage_permission` VALUES ('33', '权限分类列表', 'admin/pertag/index', '10');
INSERT INTO `li_manage_permission` VALUES ('34', '新增/编辑权限分类', 'admin/pertag/item', '10');
INSERT INTO `li_manage_permission` VALUES ('35', '编辑/新增权限分类接口', 'admin/pertag/save', '10');
INSERT INTO `li_manage_permission` VALUES ('36', '删除/批量删除权限分类接口', 'admin/pertag/delsome', '10');
INSERT INTO `li_manage_permission` VALUES ('37', '角色列表', 'admin/role/index', '10');
INSERT INTO `li_manage_permission` VALUES ('38', '新增/编辑角色', 'admin/role/item', '10');
INSERT INTO `li_manage_permission` VALUES ('39', '新增/编辑角色接口', 'admin/role/save', '10');
INSERT INTO `li_manage_permission` VALUES ('40', '删除/批量删除角色接口', 'admin/role/delsome', '10');
INSERT INTO `li_manage_permission` VALUES ('41', '角色分配权限页', 'admin/role/perlist', '10');
INSERT INTO `li_manage_permission` VALUES ('42', '角色分配权限保存接口', 'admin/role/rolesave', '10');
INSERT INTO `li_manage_permission` VALUES ('43', '标签列表', 'admin/tag/index', '9');
INSERT INTO `li_manage_permission` VALUES ('44', '新增/编辑标签', 'admin/tag/item', '9');
INSERT INTO `li_manage_permission` VALUES ('45', '新增/编辑标签接口', 'admin/tag/save', '9');
INSERT INTO `li_manage_permission` VALUES ('46', '删除/批量删除标签接口', 'admin/tag/delsome', '9');
INSERT INTO `li_manage_permission` VALUES ('47', '用户列表', 'admin/user/index', '8');
INSERT INTO `li_manage_permission` VALUES ('48', '新增/编辑用户', 'admin/user/item', '8');
INSERT INTO `li_manage_permission` VALUES ('49', '新增/编辑用户接口', 'admin/user/save', '8');
INSERT INTO `li_manage_permission` VALUES ('50', '删除/批量删除用户接口', 'admin/user/delsome', '8');
INSERT INTO `li_manage_permission` VALUES ('51', '常规设置', 'admin/system/index', '11');
INSERT INTO `li_manage_permission` VALUES ('52', '常规设置保存接口', 'admin/system/edit', '11');
INSERT INTO `li_manage_permission` VALUES ('53', '评论设置', 'admin/system/setcomment', '11');
INSERT INTO `li_manage_permission` VALUES ('54', '评论设置保存接口', 'admin/system/commentedit', '11');
INSERT INTO `li_manage_permission` VALUES ('55', '管理员列表', 'admin/user/adminlist', '8');
INSERT INTO `li_manage_permission` VALUES ('56', '评论列表', 'admin/comment/index', '12');
INSERT INTO `li_manage_permission` VALUES ('57', '举报列表', 'admin/comment/tiplist', '12');
INSERT INTO `li_manage_permission` VALUES ('58', '主题列表', 'admin/topic/index', '13');
INSERT INTO `li_manage_permission` VALUES ('59', '显示/隐藏主题', 'admin/topic/update', '13');
INSERT INTO `li_manage_permission` VALUES ('60', '主题标签管理', 'admin/topictag/index', '13');
INSERT INTO `li_manage_permission` VALUES ('61', '新增/编辑主题分类', 'admin/topictag/item', '13');
INSERT INTO `li_manage_permission` VALUES ('62', '新增/编辑主题分类接口', 'admin/topictag/save', '13');
INSERT INTO `li_manage_permission` VALUES ('63', '删除/批量删除主题标签接口', 'admin/topictag/delsome', '13');
INSERT INTO `li_manage_permission` VALUES ('64', '链接管理', 'admin/links/list', '14');
INSERT INTO `li_manage_permission` VALUES ('65', '新增/编辑友情链接	', 'admin/links/item', '14');
INSERT INTO `li_manage_permission` VALUES ('66', '新增/编辑友情链接接口', 'admin/links/save', '14');
INSERT INTO `li_manage_permission` VALUES ('67', '显示/隐藏友情链接接口', 'admin/links/upstatus', '14');
INSERT INTO `li_manage_permission` VALUES ('68', '设置logo', 'admin/system/setlogo', '11');
INSERT INTO `li_manage_permission` VALUES ('69', '上传logo接口', 'admin/system/upload', '11');

-- ----------------------------
-- Table structure for li_manage_role
-- ----------------------------
DROP TABLE IF EXISTS `li_manage_role`;
CREATE TABLE `li_manage_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `role` varchar(255) DEFAULT NULL,
  `rolename` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `pid` text,
  `permission` longtext CHARACTER SET utf8 COLLATE utf8_bin,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_manage_role
-- ----------------------------
INSERT INTO `li_manage_role` VALUES ('1', 'superadmin', '超级管理员', '1,2,3,9,10,11,12,13,14,15,25,26,27,28,7,8,18,16,17,19,20,21,22,47,48,49,50,55,43,44,45,46,29,30,31,32,33,34,35,36,37,38,39,40,41,42,51,52,53,54,68,69,56,57,58,59,60,61,62,63,23,24,64,65,66,67', 0x
INSERT INTO `li_manage_role` VALUES ('2', 'admin', '管理员', '1,2,3,9,10,11,12,13,14,15,25,26,27,28,7,8,18,16,17,19,20,21,22,23,24,47,43,44,45,46', 0x61646D696E2F636F6E74656E742F61727469636C652C61646D696E2F636F6E74656E742F6164646D61726B646F776E2C61646D696E2F636F6E74656E742F696E6465782C61646D696E2F636F6E74656E742F64726166746C6973742C61646D696E2F636F6E74656E742F646F6164642C61646D696E2F636F6E74656E742F7570646174657374617475732C61646D696E2F636F6E74656E742F64656C736F6D652C61646D696E2F636F6E74656E742F75706C6F61642C61646D696E2F636F6E74656E742F75706C6F6164656469746F722C61646D696E2F636F6E74656E742F75706C6F616466696C652C61646D696E2F6D656E752F696E6465782C61646D696E2F6D656E752F6974656D2C61646D696E2F6D656E752F736176652C61646D696E2F6D656E752F64656C736F6D652C61646D696E2F696E6465782F696E6465782C61646D696E2F696E6465782F77656C636F6D652C61646D696E2F696E6465782F6C6F676F75742C61646D696E2F67756573742F696E6465782C61646D696E2F67756573742F64656C736F6D652C61646D696E2F6974656D2F696E6465782C61646D696E2F6974656D2F6974656D2C61646D696E2F636F6E74656E742F736176652C61646D696E2F6974656D2F64656C736F6D652C61646D696E2F6C696E6B732F696E6465782C61646D696E2F6C696E6B732F64656C736F6D652C61646D696E2F757365722F696E6465782C61646D696E2F7461672F696E6465782C61646D696E2F7461672F6974656D2C61646D696E2F7461672F736176652C61646D696E2F7461672F64656C736F6D65);
INSERT INTO `li_manage_role` VALUES ('3', 'editor', '编辑', '1,2,3,9,10,11,12,13,14,15,7,8,18', 0x
INSERT INTO `li_manage_role` VALUES ('4', 'visitor', '访客', '3,9,25,7,8,18,16,19,23,47,43', 0x61646D696E2F636F6E74656E742F696E6465782C61646D696E2F636F6E74656E742F64726166746C6973742C61646D696E2F6D656E752F696E6465782C61646D696E2F696E6465782F696E6465782C61646D696E2F696E6465782F77656C636F6D652C61646D696E2F696E6465782F6C6F676F75742C61646D696E2F67756573742F696E6465782C61646D696E2F6974656D2F696E6465782C61646D696E2F6C696E6B732F696E6465782C61646D696E2F757365722F696E6465782C61646D696E2F7461672F696E646578);

-- ----------------------------
-- Table structure for li_manage_tag
-- ----------------------------
DROP TABLE IF EXISTS `li_manage_tag`;
CREATE TABLE `li_manage_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_manage_tag
-- ----------------------------
INSERT INTO `li_manage_tag` VALUES ('1', '文章管理');
INSERT INTO `li_manage_tag` VALUES ('2', '导航管理');
INSERT INTO `li_manage_tag` VALUES ('4', '基础页面');
INSERT INTO `li_manage_tag` VALUES ('5', '留言管理');
INSERT INTO `li_manage_tag` VALUES ('6', '栏目管理');
INSERT INTO `li_manage_tag` VALUES ('8', '用户管理');
INSERT INTO `li_manage_tag` VALUES ('9', '标签管理');
INSERT INTO `li_manage_tag` VALUES ('10', '权限管理');
INSERT INTO `li_manage_tag` VALUES ('11', '系统设置');
INSERT INTO `li_manage_tag` VALUES ('12', '评论管理');
INSERT INTO `li_manage_tag` VALUES ('13', '社区管理');
INSERT INTO `li_manage_tag` VALUES ('14', '友情链接');

-- ----------------------------
-- Table structure for li_menu
-- ----------------------------
DROP TABLE IF EXISTS `li_menu`;
CREATE TABLE `li_menu` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `menuname` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '菜单名',
  `url` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '导航链接',
  `info` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '备注',
  `appear` int(11) DEFAULT '1',
  `orders` int(255) DEFAULT '0' COMMENT '排序',
  `target` int(11) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of li_menu
-- ----------------------------
INSERT INTO `li_menu` VALUES ('1', '首页', '/', '', '1', '1', '1');
INSERT INTO `li_menu` VALUES ('2', '文档', '/doc.html', null, '0', '2', '0');
INSERT INTO `li_menu` VALUES ('8', '资源下载', '/download.html', null, '1', '3', '0');
INSERT INTO `li_menu` VALUES ('9', '活动', '/activity.html', null, '1', '4', '0');
INSERT INTO `li_menu` VALUES ('10', '社区', '/topic.html', null, '1', '5', '0');
INSERT INTO `li_menu` VALUES ('11', '招聘', '/topic/job.html', null, '1', '6', '0');
INSERT INTO `li_menu` VALUES ('14', '捐赠', '/donate.html', null, '1', '7', '0');

-- ----------------------------
-- Table structure for li_system
-- ----------------------------
DROP TABLE IF EXISTS `li_system`;
CREATE TABLE `li_system` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sitename` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  `keywords` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `author` char(50) DEFAULT NULL,
  `copyright` varchar(255) DEFAULT NULL,
  `links` text,
  `allowcomment` int(11) DEFAULT '1',
  `tongji` text,
  `theme` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT 'default',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_system
-- ----------------------------
INSERT INTO `li_system` VALUES ('1', '里部落阁-liblog演示站点', '/', '前端汇,liblog,thinkjs,全栈开发', '里部落阁是liblog的演示站点，是基于thinkjs框架的nodejs博客系统，具备完善的轻量级网站后台，完全免费，简单灵活，兼容性好 让您快速搭建中小型网站、博客', '前端汇', '@2015 copyright', '<li><a href=\"http://www.jsout.com\" target=\"_blank\">前端汇</a></li>\n<li><a href=\"http://www.yii-china.com\" target=\"_blank\">Yii中文网</a></li>\n<li><a href=\"http://laravelacademy.org\" target=\"_blank\">laravel学院</a></li>\n<li><a href=\"http://wangeditor.github.io\" target=\"_blank\">wangEditor</a></li>\n<li><a href=\"http://www.drupalchina.cn\" target=\"_blank\">Drupal中国</a></li>\n<li><a href=\"http://www.mairuier.com/\" target=\"_blank\">麦锐尔</a></li>\n<li><a href=\"http://blog.bestbole.com\" target=\"_blank\">百思伯乐</a></li>\n<li><a href=\"http://iquan.kuaizhan.com\" target=\"_blank\">爱圈快站</a></li>\n<li><a href=\"http://www.imenger.cn\" target=\"_blank\">IM极客小站</a></li>\n<li><a href=\"http://www.zslin.com\" target=\"_blank\">知识林</a></li>\n<li><a href=\"http://iotechie.info\" target=\"_blank\">I/OTechie技术社区</a></li>\n<li><a href=\"http://www.17ky.net\" target=\"_blank\">一起开源</a></li>\n<li><a href=\"http://www.cxytiandi.com\" target=\"_blank\">猿天地</a></li>', '0', '<script>\n    var _hmt = _hmt || [];\n    (function() {\n        var hm = document.createElement(\"script\");\n        hm.src = \"//hm.baidu.com/hm.js?8c04fc9ebc7d286e7c03911b6affb970\";\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(hm, s);\n    })();\n</script>', 'liblog');

-- ----------------------------
-- Table structure for li_system_comment
-- ----------------------------
DROP TABLE IF EXISTS `li_system_comment`;
CREATE TABLE `li_system_comment` (
  `clientid` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `appcode` text CHARACTER SET utf8,
  `appkey` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `appid` varchar(255) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`,`appid`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of li_system_comment
-- ----------------------------
INSERT INTO `li_system_comment` VALUES ('clientId', '<!--高速版-->\n<div id=\"SOHUCS\"></div>\n<script charset=\"utf-8\" type=\"text/javascript\" src=\"http://changyan.sohu.com/upload/changyan.js\" ></script>\n<script type=\"text/javascript\">\n    window.changyan.api.config({\n        appid: \'cysoRJNxO\',\n        conf: \'prod_1fbcbcaf3589e576afe2785fe80d6684\'\n    });\n</script>', 'ce46948884ce9504641c9c97d3171bce', 'cysoRJNxO', '1');

-- ----------------------------
-- Table structure for li_tags
-- ----------------------------
DROP TABLE IF EXISTS `li_tags`;
CREATE TABLE `li_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `tagname` varchar(255) DEFAULT NULL,
  `appear` int(11) DEFAULT '1',
  `orders` int(255) DEFAULT '0' COMMENT '显示顺序',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_tags
-- ----------------------------
INSERT INTO `li_tags` VALUES ('1', 'web开发', '0', '0');
INSERT INTO `li_tags` VALUES ('2', 'thinkjs', '1', '1');
INSERT INTO `li_tags` VALUES ('3', 'nodejs', '1', '2');
INSERT INTO `li_tags` VALUES ('4', 'jquery', '0', '3');
INSERT INTO `li_tags` VALUES ('5', 'css3', '1', '4');
INSERT INTO `li_tags` VALUES ('6', 'css3+html5', '1', '5');
INSERT INTO `li_tags` VALUES ('7', 'javascript', '1', '6');
INSERT INTO `li_tags` VALUES ('8', 'html', '1', '7');
INSERT INTO `li_tags` VALUES ('9', '前端设计', '0', '0');
INSERT INTO `li_tags` VALUES ('10', 'fis', '0', '0');
INSERT INTO `li_tags` VALUES ('11', 'grunt', '0', '0');
INSERT INTO `li_tags` VALUES ('12', '前端工具', '1', '8');

-- ----------------------------
-- Table structure for li_topic
-- ----------------------------
DROP TABLE IF EXISTS `li_topic`;
CREATE TABLE `li_topic` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `item` varchar(255) DEFAULT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin COMMENT '内容',
  `author` varchar(255) DEFAULT NULL,
  `createtime` datetime DEFAULT NULL,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT '标题',
  `view` bigint(20) DEFAULT '1' COMMENT '点击数',
  `updatetime` datetime DEFAULT NULL,
  `updateauthor` varchar(255) DEFAULT NULL,
  `updatepic` varchar(255) DEFAULT NULL,
  `replycount` int(11) DEFAULT '0' COMMENT '回复数',
  `show` smallint(255) DEFAULT '1' COMMENT '是否显示',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_topic
-- ----------------------------
INSERT INTO `li_topic` VALUES ('1', 'ask', 0x3C703EE59CA8E5819AE799BBE99986E9A1B5E79A84E9AA8CE8AF81E7A081E58A9FE883BDEFBC8CE4B98BE5898DE6B2A1E69C89E794A86E6F6465E5819AE8BF87EFBC8CE69C89E4BB80E4B988E58A9EE6B395E4B988EFBC9F3C2F703E, 'yongxi', '2017-09-02 15:52:44', '新手求解，thinkjs如何生成随机验证码，并返回至前台？', '193', '2017-09-02 16:30:43', 'yongxi', 'common/images/pic/avatar_7.jpg', '4', '0');
INSERT INTO `li_topic` VALUES ('2', 'thinkjs', 0xnull, '2017-09-09 10:45:05', '分页问题', '83', '2017-09-12 10:25:32', 'yongxi', 'common/images/pic/avatar_2.jpg', '1', '1');
INSERT INTO `li_topic` VALUES ('3', 'liblog', yongxi', '2017-09-14 15:38:28', 'liblog v2.0功能更新(2016/9/14)', '49', '2017-09-14 15:38:28', 'yongxi', 'common/images/pic/avatar_13.jpg', '0', '1');

-- ----------------------------
-- Table structure for li_topic_comment
-- ----------------------------
DROP TABLE IF EXISTS `li_topic_comment`;
CREATE TABLE `li_topic_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `author` varchar(255) NOT NULL,
  `tid` bigint(20) DEFAULT NULL,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT '主题标题',
  `createtime` datetime DEFAULT NULL,
  `pic` varchar(255) DEFAULT '' COMMENT '回复者头像',
  `like` bigint(20) DEFAULT '0',
  `comment` longtext CHARACTER SET utf8 COLLATE utf8_bin,
  `likers` text,
  `oldcomment` longtext CHARACTER SET utf8 COLLATE utf8_bin,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of li_topic_comment
-- ----------------------------
INSERT INTO `li_topic_comment` VALUES ('1', 'yongxi', '1', 'Nodejs开源博客系统推荐(Liblog )', '2017-08-22 02:10:34', '', '0', 0xE5898DE7ABAFE6B18720687474703A2F2F7777772E6A736F75742E636F6D2CE68F90E4BE9BE585A8E7AB99E5858DE8B4B9E6BA90E7A081284E6F64656A73E5BC80E6BA90E58D9AE5AEA2E7B3BBE7BB9F292CE5AE98E696B95151E7BEA40AE7BEA4E58FB73235363638373630312CE6ACA2E8BF8EE58AA0E585A5EFBC81E5898DE7ABAFE696B9E99DA2E79A84E997AEE9A298EFBC8CE58FAFE4BBA5E59CA8E7BEA4E9878CE68F90E997AE, null, 0x3C703EE5898DE7ABAFE6B187203C6120687265663D22687474703A2F2F7777772E6A736F75742E636F6D2F22207461726765743D225F626C616E6B223E687474703A2F2F7777772E6A736F75742E636F6D3C2F613E2CE68F90E4BE9BE585A8E7AB99E5858DE8B4B9E6BA90E7A081284E6F64656A73E5BC80E6BA90E58D9AE5AEA2E7B3BBE7BB9F292CE5AE98E696B95151E7BEA40AE7BEA4E58FB73235363638373630312CE6ACA2E8BF8EE58AA0E585A5EFBC81E5898DE7ABAFE696B9E99DA2E79A84E997AEE9A298EFBC8CE58FAFE4BBA5E59CA8E7BEA4E9878CE68F90E997AE3C62723E3C2F703E3C703E3C62723E3C2F703E);
INSERT INTO `li_topic_comment` VALUES ('2', 'yongxi', '1', '如何使用liblog', '2017-08-25 17:07:56', 'common/images/pic/avatar_2.jpg', '0', 0x6D61726B65642120363636, null, 0x3C703E6D61726B656421203636363C2F703E);
INSERT INTO `li_topic_comment` VALUES ('3', 'yongxi', '1', '有没有比较过ThinkJS与AngularJs2？', '2017-08-25 17:13:35', 'common/images/pic/avatar_8.jpg', '0', 0x416E67756C61724A53E5BD93E5889DE698AFE68F90E4BE9BE7BB99E8AEBEE8AEA1E4BABAE59198E794A8E69DA5E5BFABE9809FE69E84E5BBBA48544D4CE8A1A8E58D95E79A84E4B880E4B8AAE58685E983A8E5B7A5E585B7E38082E99A8FE79D80E697B6E997B4E79A84E68EA8E7A7BBEFBC8CE59084E7A78DE789B9E680A720E8A2ABE58AA0E585A5E8BF9BE58EBBE4BBA5E98082E5BA94E4B88DE5908CE59CBAE699AFE4B88BE79A84E5BA94E794A8E5BC80E58F91E38082E784B6E8808CE794B1E4BA8EE69C80E5889DE79A84E69EB6E69E84E99990E588B6EFBC88E6AF94E5A682E7BB91E5AE9AE5928CE6A8A1E69DBFE69CBAE588B6EFBC89EFBC8CE680A7E883BDE79A8420E68F90E58D87E5B7B2E7BB8FE99D9EE5B8B8E59BB0E99ABEE4BA86E38082, null, 0x3C703E416E67756C61724A53E5BD93E5889DE698AFE68F90E4BE9BE7BB99E8AEBEE8AEA1E4BABAE59198E794A8E69DA5E5BFABE9809FE69E84E5BBBA48544D4CE8A1A8E58D95E79A84E4B880E4B8AAE58685E983A8E5B7A5E585B7E38082E99A8FE79D80E697B6E997B4E79A84E68EA8E7A7BBEFBC8CE59084E7A78DE789B9E680A720E8A2ABE58AA0E585A5E8BF9BE58EBBE4BBA5E98082E5BA94E4B88DE5908CE59CBAE699AFE4B88BE79A84E5BA94E794A8E5BC80E58F91E38082E784B6E8808CE794B1E4BA8EE69C80E5889DE79A84E69EB6E69E84E99990E588B6EFBC88E6AF94E5A682E7BB91E5AE9AE5928CE6A8A1E69DBFE69CBAE588B6EFBC89EFBC8CE680A7E883BDE79A8420E68F90E58D87E5B7B2E7BB8FE99D9EE5B8B8E59BB0E99ABEE4BA86E380823C2F703E3C703E3C62723E3C2F703E);
INSERT INTO `li_topic_comment` VALUES ('4', 'yongxi', '1', 'css3中display:box 和display:flex区别', '2017-08-29 19:32:26', '', '0', 0xnull, 0x
INSERT INTO `li_topic_comment` VALUES ('5', 'yongxi', '1', 'css3中display:box 和display:flex区别', '2017-08-29 19:34:43', 'common/images/pic/avatar_4.jpg', '0', 0x4061736631393838C2A0E6808EE4B988E585BCE5AEB9E5A4A7E983A8E58886E88081E78988E69CACE6B58FE8A788E599A8E591A2EFBC8CE5A5BDE5838FE8B79FE6B58FE8A788E599A8E78988E69CACE4B99FE69C89E585B3E7B3BBE590A7EFBC81, null, 0x3C6120687265663D222F706572736F6E616C2F406173663139383822207461726765743D225F626C616E6B223E40617366313938383C2F613E266E6273703BE6808EE4B988E585BCE5AEB9E5A4A7E983A8E58886E88081E78988E69CACE6B58FE8A788E599A8E591A2EFBC8CE5A5BDE5838FE8B79FE6B58FE8A788E599A8E78988E69CACE4B99FE69C89E585B3E7B3BBE590A7EFBC81);
INSERT INTO `li_topic_comment` VALUES ('6', 'yongxi', '1', 'css3中display:box 和display:flex区别', '2017-08-29 19:37:17', 'common/images/pic/avatar_7.jpg', '0', 0xE5898DE88085646973706C61793A626F78E698AF32303039E5B9B4E79A84E8AFADE6B395E78988E69CACEFBC8CE4BDBFE794A8E697B6E99C80E8A681E58AA0E4B88AE6B58FE8A788E599A8E79A84E5898DE7BC80EFBC8CE4B88DE8BF87E78EB0E59CA8E5B7B2E7BB8FE8BF87E697B6E4BA86E380820AE5908EE88085646973706C61793A666C6578E698AF32303132E5B9B4E69C80E696B0E4BFAEE6ADA3E79A84E8AFADE6B395E78988E69CACEFBC8CE6B58FE8A788E599A8E694AFE68C81E8BE83E5A5BDEFBC8CE4B99FE5B086E68890E4B8BAE4BBA5E5908EE6A087E58786E79A84E8AFADE6B395E380820AE4B8ADE997B432303131E5B9B4E4B99FE68F90E587BAE4BA86E4B880E4B8AAE5A587E891A9E79A84E8AFADE6B395E78988E69CAC646973706C61793A666C6578626F78EFBC8CE99D9EE5AE98E696B9E79A84EFBC8CE5BD93E697B6E4B8BBE8A681E698AFE4B8BA4945E6B58FE8A788E599A8E4BDBFE794A8E380820A646973706C61793A626F78E6B58FE8A788E599A8E694AFE68C81EFBC9A494546697265666F784368726F6D655361666172694F70657261E4B88DE694AFE68C81322E302D34302E30EFBC882D6D6F7A2DEFBC89342E302D34352E30EFBC882D7765626B69742DEFBC89362E302D382E30EFBC882D7765626B69742DEFBC8931352E302D32392E30EFBC882D7765626B69742DEFBC89494546697265666F784368726F6D655361666172694F7065726131312E302B32322E302B32312E302BEFBC882D7765626B69742DEFBC8932392E302B362E312BEFBC882D7765626B69742DEFBC89392E302B31352E302BEFBC882D7765626B69742DEFBC8931372E302BE8BE83E4B8BAE5AE8CE695B4E79A84E585BCE5AEB9E680A7E4BBA3E7A081EFBC8CE5A682E4B88BEFBC9A2E626F78207B0A20202020646973706C61793A202D7765626B69742D626F783B202F2A204368726F6D6520342B2C2053616661726920332E312C20694F532053616661726920332E322B202A2F0A20202020646973706C61793A202D6D6F7A2D626F783B202F2A2046697265666F782031372D202A2F0A20202020646973706C61793A202D7765626B69742D666C65783B202F2A204368726F6D652032312B2C2053616661726920362E312B2C20694F532053616661726920372B2C204F706572612031352F3136202A2F0A20202020646973706C61793A202D6D6F7A2D666C65783B202F2A2046697265666F782031382B202A2F0A20202020646973706C61793A202D6D732D666C6578626F783B202F2A204945203130202A2F0A20202020646973706C61793A20666C65783B202F2A204368726F6D652032392B2C2046697265666F782032322B2C2049452031312B2C204F706572612031322E312F31372F31382C20416E64726F696420342E342B202A2F0A7D, null, 0x
INSERT INTO `li_topic_comment` VALUES ('7', 'yongxi', '1', 'css3中display:box 和display:flex有区别？', '2017-08-29 19:41:09', 'common/images/pic/avatar_4.jpg', '0', 0x406C697669736B79C2A0E6849FE8B0A2EFBC81, null, 0x3C6120687265663D222F706572736F6E616C2F406C697669736B7922207461726765743D225F626C616E6B223E406C697669736B793C2F613E266E6273703BE6849FE8B0A2EFBC81);
INSERT INTO `li_topic_comment` VALUES ('8', 'yongxi', '1', 'div垂直水平居中的几种方法', '2017-09-02 10:15:26', 'common/images/pic/avatar_9.jpg', '1', 0xE6B2A1E4BABAE9A1B6E59097EFBC9FE887AAE5B7B1E9A1B6E4B880E4B88BEFBC81, 'yongxi', 0x3C703EE6B2A1E4BABAE9A1B6E59097EFBC9FE887AAE5B7B1E9A1B6E4B880E4B88BEFBC813C2F703E);
INSERT INTO `li_topic_comment` VALUES ('9', 'yongxi', '1', 'React单页应用如何实现第三方登录功能', '2017-09-02 10:31:53', 'common/images/pic/avatar_9.jpg', '0', 0xE7ACACE4B889E696B9E799BBE99986E4B8BBE8A681E698AFE58F91E98081E8AFB7E6B182E5928CE8BF94E59B9EE695B0E68DAEEFBC8CE8B79FE4BB80E4B988E8AFADE8A880EFBC8CE4BB80E4B988E6A186E69EB6E697A0E585B3E38082E58FAFE4BBA5E7BD91E4B88AE689BEE4B880E4B88BE79BB8E585B3E8B584E69699E38082, 'yongxi', 0x3C703EE7ACACE4B889E696B9E799BBE99986E4B8BBE8A681E698AFE58F91E98081E8AFB7E6B182E5928CE8BF94E59B9EE695B0E68DAEEFBC8CE8B79FE4BB80E4B988E8AFADE8A880EFBC8CE4BB80E4B988E6A186E69EB6E697A0E585B3E380823C2F703E3C703EE58FAFE4BBA5E7BD91E4B88AE689BEE4B880E4B88BE79BB8E585B3E8B584E69699E380823C2F703E3C703E3C62723E3C2F703E);
INSERT INTO `li_topic_comment` VALUES ('10', 'yongxi', '1', '前端汇功能更新帖(liblog v2.0)', '2017-09-02 13:41:50', 'common/images/pic/avatar_7.jpg', '0', 0x0A20202020202020202020200A2020202020202020202020E5898DE7ABAFE6B187287777772E6A736F75742E636F6D29E698AFE59FBAE4BA8E6C69626C6F67E79A84E58D9AE5AEA2E7BD91E7AB99EFBC8C6C69626C6F67E79A84E69C80E696B0E58A9FE883BDE4BC9AE59CA86A736F7574E4B88AE69BB4E696B0E4B88EE4BD93E9AA8CEFBC8CE69C80E5908EE4BC9AE59CA8E5BC80E6BA90E78988E98089E68BA9E983A8E58886E58A9FE883BDE98090E6ADA5E69BB4E696B0EFBC810A2020202020202020200A202020202020202020, 'yongxi', 0x0A20202020202020202020200A20202020202020202020203C703E3C623EE5898DE7ABAFE6B1873C2F623E287777772E6A736F75742E636F6D29E698AFE59FBAE4BA8E6C69626C6F67E79A84E58D9AE5AEA2E7BD91E7AB99EFBC8C3C2F703E3C703E3C623E6C69626C6F673C2F623EE79A84E69C80E696B0E58A9FE883BDE4BC9AE59CA86A736F7574E4B88AE69BB4E696B0E4B88EE4BD93E9AA8CEFBC8CE69C80E5908EE4BC9AE59CA8E5BC80E6BA90E78988E98089E68BA9E983A8E58886E58A9FE883BDE98090E6ADA5E69BB4E696B0EFBC813C2F703E0A2020202020202020203C703E3C62723E3C2F703E0A202020202020202020);
INSERT INTO `li_topic_comment` VALUES ('11', 'yongxi', '1', '前端汇功能更新帖(liblog v2.0)', '2017-09-02 13:44:37', 'common/images/pic/avatar_7.jpg', '1', 0x0A20202020202020202020200A20202020202020202020200A2020202020202020202020323031362F392F323AE69BB4E696B0E69C80E696B0E4BC9AE59198E79A84E5B195E7A4BAE4BC9AE59198E4B8AAE4BABAE4B8ADE5BF83E6B7BBE58AA0E2809CE58F91E5B883E8AF9DE9A298E2809DE58A9FE883BDE993BEE68EA5E4BFAEE5A48DE697A0E698B5E7A7B0E79A84E4BC9AE59198E79A84E68B9BE591BCE698BEE7A4BAE694B9E59684E983A8E58886E4BD93E9AA8CC2A00A2020202020202020200A2020202020202020200A202020202020202020, 'yongxi', 0x
INSERT INTO `li_topic_comment` VALUES ('12', 'yongxi', '1', '新手求解，thinkjs如何生成随机验证码，并返回至前台？', '2017-09-02 16:22:36', 'common/images/pic/avatar_7.jpg', '1', 0xnull, 0x

-- ----------------------------
-- Table structure for li_topic_item
-- ----------------------------
DROP TABLE IF EXISTS `li_topic_item`;
CREATE TABLE `li_topic_item` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `comment` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_topic_item
-- ----------------------------
INSERT INTO `li_topic_item` VALUES ('1', 'share', '分享');
INSERT INTO `li_topic_item` VALUES ('2', 'ask', '问答');
INSERT INTO `li_topic_item` VALUES ('3', 'job', '招聘');
INSERT INTO `li_topic_item` VALUES ('4', 'liblog', 'liblog');
INSERT INTO `li_topic_item` VALUES ('5', 'wangeditor', 'wangeditor');
INSERT INTO `li_topic_item` VALUES ('6', 'thinkjs', 'thinkjs');

-- ----------------------------
-- Table structure for li_user
-- ----------------------------
DROP TABLE IF EXISTS `li_user`;
CREATE TABLE `li_user` (
  `id` int(100) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `password` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `role` int(255) DEFAULT '4',
  `openid` varchar(255) DEFAULT NULL COMMENT '第三方登录标识',
  `pic` varchar(255) DEFAULT '' COMMENT '头像',
  `way` varchar(255) DEFAULT 'site' COMMENT '登录方式',
  `point` varchar(255) DEFAULT '10' COMMENT '积分',
  `sign` text COMMENT '个性签名',
  `createtime` datetime DEFAULT NULL,
  `level` int(11) DEFAULT '1' COMMENT '等级',
  `vip` int(11) DEFAULT '0' COMMENT 'vip',
  `isverify` int(11) DEFAULT '0' COMMENT '是否已验证邮箱',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_user
-- ----------------------------
INSERT INTO `li_user` VALUES ('1', 'admin', 'admin', 'e10adc3949ba59abbe56e057f20f883e', 'admin@jsout.com', '1', null, 'common/images/pic/avatar_7.jpg', 'site', '15', null, '2017-08-22 14:44:32', '1', '0', '0');
;

-- ----------------------------
-- Table structure for li_user_collect
-- ----------------------------
DROP TABLE IF EXISTS `li_user_collect`;
CREATE TABLE `li_user_collect` (
  `id` bigint(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(255) DEFAULT NULL COMMENT '类型',
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `author` varchar(255) DEFAULT NULL,
  `createtime` datetime DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  `aid` int(11) DEFAULT NULL COMMENT '文章id',
  `iscollect` int(11) DEFAULT '1' COMMENT '是否收藏',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_user_collect
-- ----------------------------
INSERT INTO `li_user_collect` VALUES ('1', '/topic/item/27', ' css3中display:box 和display:flex区别 ', 'asf1988', '2017-08-29 19:31:08', 'topic', '27', '1');
INSERT INTO `li_user_collect` VALUES ('2', '/topic/item/28', ' div垂直水平居中的几种方法 ', 'bbt1991', '2017-09-02 10:14:56', 'topic', '28', '1');
INSERT INTO `li_user_collect` VALUES ('3', '/topic/item/31.html', ' 新手求解，thinkjs如何生成随机验证码，并返回至前台？ ', 'livisky', '2017-09-02 16:32:09', 'topic', '31', '1');
